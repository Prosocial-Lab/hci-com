{"ast":null,"code":"/**\r\n * ForceDirectedTree chart module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { SerialChart, SerialChartDataItem } from \"../../charts/types/SerialChart\";\nimport { ForceDirectedSeries } from \"./ForceDirectedSeries\";\nimport { registry } from \"../../core/Registry\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport { color } from \"../../core/utils/Color\";\nimport { percent } from \"../../core/utils/Percent\";\nimport * as $ease from \"../../core/utils/Ease\";\nimport * as $math from \"../../core/utils/Math\";\nimport { ZoomOutButton } from \"../../core/elements/ZoomOutButton\";\nimport { getInteraction } from \"../../core/interaction/Interaction\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines a [[DataItem]] for [[ForceDirectedTree]].\r\n *\r\n * @since 4.3.8\r\n * @see {@link DataItem}\r\n */\n\nvar ForceDirectedTreeDataItem =\n/** @class */\nfunction (_super) {\n  __extends(ForceDirectedTreeDataItem, _super);\n\n  function ForceDirectedTreeDataItem() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  return ForceDirectedTreeDataItem;\n}(SerialChartDataItem);\n\nexport { ForceDirectedTreeDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * A main class for [[ForceDirectedTree]] chart type.\r\n *\r\n * @see {@link IForceDirectedTreeEvents} for a list of available Events\r\n * @see {@link IForceDirectedTreeAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/force-directed/} For more information\r\n * @since 4.3.8\r\n * @important\r\n */\n\nvar ForceDirectedTree =\n/** @class */\nfunction (_super) {\n  __extends(ForceDirectedTree, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function ForceDirectedTree() {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\r\n     * Default duration of zoom animations (ms).\r\n     */\n\n\n    _this.zoomDuration = 1000;\n    /**\r\n     * Default zooming animation easing function.\r\n     */\n\n    _this.zoomEasing = $ease.cubicOut;\n    /**\r\n     * Smallest available zoom level. The chart will not allow to zoom out past\r\n     * this setting.\r\n     *\r\n     * NOTE: Should be power of 2.\r\n     *\r\n     * @default 1\r\n     */\n\n    _this.minZoomLevel = 1;\n    /**\r\n     * Biggest available zoom level. The chart will not allow to zoom in past\r\n     * this setting.\r\n     *\r\n     * NOTE: Should be power of 2.\r\n     *\r\n     * @default 32\r\n     */\n\n    _this.maxZoomLevel = 16;\n    _this.className = \"ForceDirectedTree\";\n    _this.seriesContainer.isMeasured = true;\n    _this.seriesContainer.layout = \"absolute\";\n    _this.mouseWheelBehavior = \"none\";\n    _this.zoomStep = 2;\n    _this.seriesContainer.background.fillOpacity = 0;\n    _this.seriesContainer.background.fill = color(\"#ffffff\");\n\n    var zoomOutButton = _this.createChild(ZoomOutButton);\n\n    zoomOutButton.shouldClone = false;\n    zoomOutButton.x = percent(100);\n    zoomOutButton.horizontalCenter = \"right\";\n    zoomOutButton.valign = \"top\";\n    zoomOutButton.zIndex = Number.MAX_SAFE_INTEGER;\n    zoomOutButton.marginTop = 5;\n    zoomOutButton.marginRight = 5;\n    zoomOutButton.isMeasured = false;\n    zoomOutButton.adapter.add(\"dx\", function (dx, target) {\n      return -zoomOutButton.marginRight;\n    });\n    zoomOutButton.hide(0);\n    _this.zoomOutButton = zoomOutButton;\n\n    _this.addDisposer(_this.seriesContainer.events.on(\"sizechanged\", function () {\n      if (_this.seriesContainer.scale != 1) {\n        _this.zoomOutButton.show();\n      } else {\n        _this.zoomOutButton.hide();\n      }\n    }));\n\n    var interaction = getInteraction();\n\n    _this._disposers.push(interaction.body.events.on(\"down\", function (event) {\n      if (_this.zoomable) {\n        var svgPoint = $utils.documentPointToSvg(event.pointer.point, _this.htmlContainer);\n\n        if (svgPoint.x > 0 && svgPoint.y > 0 && svgPoint.x < _this.svgContainer.width && svgPoint.y < _this.svgContainer.height) {\n          _this.seriesContainer.dragStart(event.pointer);\n        }\n      }\n    }, _this));\n\n    _this._disposers.push(interaction.body.events.on(\"up\", function (event) {\n      if (_this.zoomable) {\n        _this.seriesContainer.dragStop(event.pointer, true);\n      }\n    }, _this)); // Apply theme\n\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Creates and returns a new series of the suitable type.\r\n   *\r\n   * @return New series\r\n   */\n\n\n  ForceDirectedTree.prototype.createSeries = function () {\n    return new ForceDirectedSeries();\n  };\n  /**\r\n   * Returns a new/empty DataItem of the type appropriate for this object.\r\n   *\r\n   * @see {@link DataItem}\r\n   * @return Data Item\r\n   */\n\n\n  ForceDirectedTree.prototype.createDataItem = function () {\n    return new ForceDirectedTreeDataItem();\n  };\n  /**\r\n   * Setups the legend to use the chart's data.\r\n   *\r\n   * @ignore\r\n   */\n\n\n  ForceDirectedTree.prototype.feedLegend = function () {\n    var legend = this.legend;\n\n    if (legend) {\n      var legendData_1 = [];\n      this.series.each(function (series) {\n        if (!series.hiddenInLegend) {\n          var dataItems = series.dataItems;\n\n          if (dataItems.length == 1) {\n            var children = series.dataItems.getIndex(0).children;\n\n            if (children && children.length > 0) {\n              dataItems = children;\n            }\n          }\n\n          dataItems.each(function (dataItem) {\n            if (!dataItem.hiddenInLegend) {\n              legendData_1.push(dataItem);\n              var legendSettings = series.legendSettings;\n\n              if (legendSettings) {\n                if (legendSettings.labelText) {\n                  legend.labels.template.text = legendSettings.labelText;\n                }\n\n                if (legendSettings.itemLabelText) {\n                  legend.labels.template.text = legendSettings.itemLabelText;\n                }\n\n                if (legendSettings.valueText) {\n                  legend.valueLabels.template.text = legendSettings.valueText;\n                }\n\n                if (legendSettings.itemValueText) {\n                  legend.valueLabels.template.text = legendSettings.itemValueText;\n                }\n              }\n            }\n          });\n        }\n      });\n      legend.data = legendData_1;\n      legend.dataFields.name = \"name\";\n    }\n  };\n  /**\r\n   * Sets defaults that instantiate some objects that rely on parent, so they\r\n   * cannot be set in constructor.\r\n   */\n\n\n  ForceDirectedTree.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this); // Add a default screen reader title for accessibility\n    // This will be overridden in screen reader if there are any `titles` set\n\n\n    if (!$type.hasValue(this.readerTitle)) {\n      this.readerTitle = this.language.translate(\"Force directed tree\");\n    }\n  };\n  /**\r\n   * Since this chart uses hierarchical data, we need to remove childrent\r\n   * dataField from export of non-hierarchical formats such as CSV and XSLX.\r\n   *\r\n   * @return Export\r\n   */\n\n\n  ForceDirectedTree.prototype.getExporting = function () {\n    var _this = this;\n\n    var exporting = _super.prototype.getExporting.call(this);\n\n    exporting.adapter.add(\"formatDataFields\", function (info) {\n      if (info.format == \"csv\" || info.format == \"xlsx\") {\n        _this.series.each(function (series) {\n          if ($type.hasValue(series.dataFields.children)) {\n            delete info.dataFields[series.dataFields.children];\n          }\n        });\n      }\n\n      return info;\n    });\n    return exporting;\n  };\n  /**\r\n   * Handles mouse wheel event, e.g. user rotates mouse wheel while over the\r\n   * map: zooms in or out depending on the direction of the wheel turn.\r\n   *\r\n   * @param event  Original event\r\n   */\n\n\n  ForceDirectedTree.prototype.handleWheel = function (event) {\n    var point = $utils.documentPointToSprite(event.point, this.seriesContainer);\n    var zoomLevel = this.seriesContainer.scale;\n\n    if (event.shift.y < 0) {\n      zoomLevel *= this.zoomStep;\n    } else {\n      zoomLevel /= this.zoomStep;\n    }\n\n    zoomLevel = $math.fitToRange(zoomLevel, this.minZoomLevel, this.maxZoomLevel);\n    this.zoomToPoint(point, zoomLevel);\n  };\n  /**\r\n   * Zooms the chart to particular point.\r\n   *\r\n   * @from 4.10.0\r\n   * @param  point      A point to zoom to\r\n   * @param  zoomLevel  Zoom level\r\n   * @param  center     Should the chart center on the target point?\r\n   */\n\n\n  ForceDirectedTree.prototype.zoomToPoint = function (point, zoomLevel, center) {\n    var container = this.seriesContainer;\n    var svgPoint;\n\n    if (center) {\n      svgPoint = {\n        x: this.maxWidth / 2,\n        y: this.maxHeight / 2\n      };\n    } else {\n      svgPoint = $utils.spritePointToSvg(point, container);\n    }\n\n    var x = svgPoint.x - point.x * zoomLevel;\n    var y = svgPoint.y - point.y * zoomLevel;\n    container.animate([{\n      property: \"scale\",\n      to: zoomLevel\n    }, {\n      property: \"x\",\n      to: x\n    }, {\n      property: \"y\",\n      to: y\n    }], this.zoomDuration, this.zoomEasing);\n  };\n  /**\r\n   * Zooms the chart to particular data item (node).\r\n   *\r\n   * @from 4.10.0\r\n   * @param  dataItem   A data item to zoom to\r\n   * @param  zoomLevel  Zoom level\r\n   * @param  center     Should the chart center on the target point?\r\n   */\n\n\n  ForceDirectedTree.prototype.zoomToDataItem = function (dataItem, zoomLevel, center) {\n    var x = dataItem.node.pixelX;\n    var y = dataItem.node.pixelY;\n\n    if (!$type.isNumber(zoomLevel)) {\n      zoomLevel = this.seriesContainer.scale * this.zoomStep;\n    }\n\n    this.zoomToPoint({\n      x: x,\n      y: y\n    }, zoomLevel, center);\n  };\n  /**\r\n   * Zooms out the chart to initial full view.\r\n   *\r\n   * @from 4.10.0\r\n   */\n\n\n  ForceDirectedTree.prototype.zoomOut = function () {\n    var container = this.seriesContainer;\n    this.zoomToPoint({\n      x: container.pixelWidth / 2,\n      y: container.pixelHeight / 2\n    }, 1, true);\n  };\n\n  Object.defineProperty(ForceDirectedTree.prototype, \"zoomable\", {\n    /**\r\n     * @return Zoomable\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"zoomable\");\n    },\n\n    /**\r\n     * When user zooms in or out current zoom level is multiplied or divided\r\n     * by value of this setting.\r\n     *\r\n     * @default false\r\n     * @since 4.10.0\r\n     * @see {@link https://www.amcharts.com/docs/v4/chart-types/force-directed/#Zooming} for more information about zooming ForceDirectedTree\r\n     * @param value  Zoomable\r\n     */\n    set: function set(value) {\n      var _this = this;\n\n      if (this.setPropertyValue(\"zoomable\", value)) {\n        if (value) {\n          this.seriesContainer.resizable = true;\n          this.seriesContainer.draggable = true;\n          this.seriesContainer.dragWhileResize = true;\n          this.mouseWheelBehavior = \"zoom\";\n          this._backgroundZoomoutDisposer = this.seriesContainer.background.events.on(\"hit\", function () {\n            _this.zoomOut();\n          }, this, false);\n\n          this._disposers.push(this._backgroundZoomoutDisposer);\n        } else {\n          this.seriesContainer.resizable = false;\n          this.seriesContainer.draggable = false;\n          this.seriesContainer.dragWhileResize = false;\n          this.mouseWheelBehavior = \"none\";\n\n          if (this._backgroundZoomoutDisposer) {\n            this._backgroundZoomoutDisposer.dispose();\n          }\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ForceDirectedTree.prototype, \"mouseWheelBehavior\", {\n    /**\r\n     * @return Mouse wheel behavior\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"mouseWheelBehavior\");\n    },\n\n    /**\r\n     * Specifies what should chart do if when mouse wheel is rotated.\r\n     *\r\n     * @param Mouse wheel behavior\r\n     * @since 4.10.0\r\n     * @default none\r\n     */\n    set: function set(value) {\n      if (this.setPropertyValue(\"mouseWheelBehavior\", value)) {\n        if (value != \"none\") {\n          this._mouseWheelDisposer = this.chartContainer.events.on(\"wheel\", this.handleWheel, this, false);\n\n          this._disposers.push(this._mouseWheelDisposer);\n        } else {\n          if (this._mouseWheelDisposer) {\n            this._mouseWheelDisposer.dispose();\n          }\n\n          this.chartContainer.wheelable = false;\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ForceDirectedTree.prototype, \"zoomStep\", {\n    /**\r\n     * @return Zoom factor\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"zoomStep\");\n    },\n\n    /**\r\n     * When user zooms in or out current zoom level is multiplied or divided\r\n     * by value of this setting.\r\n     *\r\n     * @since 4.10.0\r\n     * @default 2\r\n     * @param value  Zoom factor\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"zoomStep\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ForceDirectedTree.prototype, \"zoomOutButton\", {\n    /**\r\n     * @return Zoom out button\r\n     */\n    get: function get() {\n      return this._zoomOutButton;\n    },\n\n    /**\r\n     * A [[Button]] element that is used for zooming out the chart.\r\n     *\r\n     * This button appears only when chart is zoomed in, and disappears\r\n     * autoamatically when it is zoome dout.\r\n     *\r\n     * @param button  Zoom out button\r\n     */\n    set: function set(button) {\n      var _this = this;\n\n      this._zoomOutButton = button;\n\n      if (button) {\n        button.events.on(\"hit\", function () {\n          _this.zoomOut();\n        }, undefined, false);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return ForceDirectedTree;\n}(SerialChart);\n\nexport { ForceDirectedTree };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"ForceDirectedTree\"] = ForceDirectedTree;\nregistry.registeredClasses[\"ForceDirectedTreeDataItem\"] = ForceDirectedTreeDataItem;","map":{"version":3,"sources":["../../../../../src/.internal/plugins/forceDirected/ForceDirectedTree.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * ForceDirectedTree chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SerialChart, ISerialChartProperties, ISerialChartDataFields, ISerialChartAdapters, ISerialChartEvents, SerialChartDataItem } from \"../../charts/types/SerialChart\";\r\nimport { ForceDirectedSeries, ForceDirectedSeriesDataItem } from \"./ForceDirectedSeries\";\r\nimport { Export } from \"../../core/export/Export\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { Sprite, ISpriteEvents, AMEvent } from \"../../core/Sprite\";\r\nimport { IDisposer } from \"../../core/utils/Disposer\";\r\nimport * as $ease from \"../../core/utils/Ease\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport { ZoomOutButton } from \"../../core/elements/ZoomOutButton\";\r\nimport { getInteraction, IInteractionEvents } from \"../../core/interaction/Interaction\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ForceDirectedTree]].\r\n *\r\n * @since 4.3.8\r\n * @see {@link DataItem}\r\n */\r\nexport class ForceDirectedTreeDataItem extends SerialChartDataItem { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ForceDirectedTree]].\r\n *\r\n * @since 4.3.8\r\n */\r\nexport interface IForceDirectedTreeDataFields extends ISerialChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ForceDirectedTree]].\r\n *\r\n * @since 4.3.8\r\n */\r\nexport interface IForceDirectedTreeProperties extends ISerialChartProperties {\r\n\r\n\t/**\r\n\t * Indicates whether chart can be zoomed/panned (via mouse, touch, or API).\r\n\t *\r\n\t * @since 4.10.0\r\n\t * @default false\r\n\t */\r\n\tzoomable?: boolean;\r\n\r\n\t/**\r\n\t * Specifies what should chart do if when mouse wheel is rotated.\r\n\t *\r\n\t * @since 4.10.0\r\n\t * @default none\r\n\t */\r\n\tmouseWheelBehavior?: \"zoom\" | \"none\";\r\n\r\n\t/**\r\n\t * When user zooms in or out current zoom level is multiplied or divided\r\n\t * by value of this setting.\r\n\t *\r\n\t * @since 4.10.0\r\n\t * @default 2\r\n\t */\r\n\tzoomStep?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[ForceDirectedTree]].\r\n *\r\n * @since 4.3.8\r\n */\r\nexport interface IForceDirectedTreeEvents extends ISerialChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ForceDirectedTree]].\r\n *\r\n * @since 4.3.8\r\n * @see {@link Adapter}\r\n */\r\nexport interface IForceDirectedTreeAdapters extends ISerialChartAdapters, IForceDirectedTreeProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A main class for [[ForceDirectedTree]] chart type.\r\n *\r\n * @see {@link IForceDirectedTreeEvents} for a list of available Events\r\n * @see {@link IForceDirectedTreeAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/force-directed/} For more information\r\n * @since 4.3.8\r\n * @important\r\n */\r\nexport class ForceDirectedTree extends SerialChart {\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: ForceDirectedTreeDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IForceDirectedTreeDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IForceDirectedTreeProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IForceDirectedTreeAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IForceDirectedTreeEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: ForceDirectedSeries;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected _mouseWheelDisposer: IDisposer;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected _backgroundZoomoutDisposer: IDisposer;\r\n\r\n\t/**\r\n\t * Default duration of zoom animations (ms).\r\n\t */\r\n\tpublic zoomDuration: number = 1000;\r\n\r\n\r\n\t/**\r\n\t * Default zooming animation easing function.\r\n\t */\r\n\tpublic zoomEasing: (value: number) => number = $ease.cubicOut;\r\n\r\n\t/**\r\n\t * Smallest available zoom level. The chart will not allow to zoom out past\r\n\t * this setting.\r\n\t *\r\n\t * NOTE: Should be power of 2.\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\tpublic minZoomLevel: number = 1;\r\n\r\n\t/**\r\n\t * Biggest available zoom level. The chart will not allow to zoom in past\r\n\t * this setting.\r\n\t *\r\n\t * NOTE: Should be power of 2.\r\n\t *\r\n\t * @default 32\r\n\t */\r\n\tpublic maxZoomLevel: number = 16;\r\n\r\n\t/**\r\n\t * A button which is used to zoom out the chart.\r\n\t */\r\n\tprotected _zoomOutButton: ZoomOutButton;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"ForceDirectedTree\";\r\n\r\n\t\tthis.seriesContainer.isMeasured = true;\r\n\t\tthis.seriesContainer.layout = \"absolute\";\r\n\r\n\t\tthis.mouseWheelBehavior = \"none\";\r\n\t\tthis.zoomStep = 2;\r\n\r\n\t\tthis.seriesContainer.background.fillOpacity = 0;\r\n\t\tthis.seriesContainer.background.fill = color(\"#ffffff\")\r\n\r\n\t\tlet zoomOutButton = this.createChild(ZoomOutButton);\r\n\t\tzoomOutButton.shouldClone = false;\r\n\t\tzoomOutButton.x = percent(100);\r\n\t\tzoomOutButton.horizontalCenter = \"right\";\r\n\t\tzoomOutButton.valign = \"top\";\r\n\t\tzoomOutButton.zIndex = Number.MAX_SAFE_INTEGER;\r\n\t\tzoomOutButton.marginTop = 5;\r\n\t\tzoomOutButton.marginRight = 5;\r\n\t\tzoomOutButton.isMeasured = false;\r\n\r\n\t\tzoomOutButton.adapter.add(\"dx\", (dx, target) => {\r\n\t\t\treturn - zoomOutButton.marginRight;\r\n\t\t})\r\n\r\n\t\tzoomOutButton.hide(0);\r\n\t\tthis.zoomOutButton = zoomOutButton;\r\n\r\n\t\tthis.addDisposer(this.seriesContainer.events.on(\"sizechanged\", () => {\r\n\r\n\t\t\tif (this.seriesContainer.scale != 1) {\r\n\t\t\t\tthis.zoomOutButton.show();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.zoomOutButton.hide();\r\n\t\t\t}\r\n\t\t}));\r\n\r\n\t\tconst interaction = getInteraction();\r\n\t\tthis._disposers.push(interaction.body.events.on(\"down\", (event: IInteractionEvents[\"down\"]) => {\r\n\t\t\tif (this.zoomable) {\r\n\t\t\t\tlet svgPoint = $utils.documentPointToSvg(event.pointer.point, this.htmlContainer);\r\n\t\t\t\tif (svgPoint.x > 0 && svgPoint.y > 0 && svgPoint.x < this.svgContainer.width && svgPoint.y < this.svgContainer.height) {\r\n\t\t\t\t\tthis.seriesContainer.dragStart(event.pointer);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}, this));\r\n\t\tthis._disposers.push(interaction.body.events.on(\"up\", (event: IInteractionEvents[\"up\"]) => {\r\n\t\t\tif (this.zoomable) {\r\n\t\t\t\tthis.seriesContainer.dragStop(event.pointer, true);\r\n\t\t\t}\r\n\t\t}, this));\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new series of the suitable type.\r\n\t *\r\n\t * @return New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new ForceDirectedSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new ForceDirectedTreeDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the legend to use the chart's data.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tpublic feedLegend(): void {\r\n\t\tlet legend = this.legend;\r\n\t\tif (legend) {\r\n\r\n\t\t\tlet legendData: any[] = [];\r\n\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tif (!series.hiddenInLegend) {\r\n\r\n\t\t\t\t\tlet dataItems = series.dataItems;\r\n\t\t\t\t\tif (dataItems.length == 1) {\r\n\t\t\t\t\t\tlet children = series.dataItems.getIndex(0).children;\r\n\t\t\t\t\t\tif (children && children.length > 0) {\r\n\t\t\t\t\t\t\tdataItems = children;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdataItems.each((dataItem) => {\r\n\t\t\t\t\t\tif (!dataItem.hiddenInLegend) {\r\n\t\t\t\t\t\t\tlegendData.push(<ForceDirectedSeriesDataItem>dataItem);\r\n\r\n\t\t\t\t\t\t\tlet legendSettings = series.legendSettings;\r\n\t\t\t\t\t\t\tif (legendSettings) {\r\n\t\t\t\t\t\t\t\tif (legendSettings.labelText) {\r\n\t\t\t\t\t\t\t\t\tlegend.labels.template.text = legendSettings.labelText;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif (legendSettings.itemLabelText) {\r\n\t\t\t\t\t\t\t\t\tlegend.labels.template.text = legendSettings.itemLabelText;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif (legendSettings.valueText) {\r\n\t\t\t\t\t\t\t\t\tlegend.valueLabels.template.text = legendSettings.valueText;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif (legendSettings.itemValueText) {\r\n\t\t\t\t\t\t\t\t\tlegend.valueLabels.template.text = legendSettings.itemValueText;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tlegend.data = legendData;\r\n\t\t\tlegend.dataFields.name = \"name\";\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Force directed tree\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Since this chart uses hierarchical data, we need to remove childrent\r\n\t * dataField from export of non-hierarchical formats such as CSV and XSLX.\r\n\t *\r\n\t * @return Export\r\n\t */\r\n\tprotected getExporting(): Export {\r\n\t\tconst exporting = super.getExporting();\r\n\t\texporting.adapter.add(\"formatDataFields\", (info) => {\r\n\t\t\tif (info.format == \"csv\" || info.format == \"xlsx\") {\r\n\t\t\t\tthis.series.each((series) => {\r\n\t\t\t\t\tif ($type.hasValue(series.dataFields.children)) {\r\n\t\t\t\t\t\tdelete info.dataFields[series.dataFields.children];\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\treturn info;\r\n\t\t})\r\n\t\treturn exporting;\r\n\t}\r\n\r\n\t/**\r\n\t * Handles mouse wheel event, e.g. user rotates mouse wheel while over the\r\n\t * map: zooms in or out depending on the direction of the wheel turn.\r\n\t *\r\n\t * @param event  Original event\r\n\t */\r\n\tprotected handleWheel(event: AMEvent<Sprite, ISpriteEvents>[\"wheel\"]) {\r\n\r\n\t\tlet point: IPoint = $utils.documentPointToSprite(event.point, this.seriesContainer);\r\n\r\n\t\tlet zoomLevel = this.seriesContainer.scale;\r\n\r\n\t\tif (event.shift.y < 0) {\r\n\t\t\tzoomLevel *= this.zoomStep;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tzoomLevel /= this.zoomStep;\r\n\t\t}\r\n\r\n\t\tzoomLevel = $math.fitToRange(zoomLevel, this.minZoomLevel, this.maxZoomLevel);\r\n\r\n\t\tthis.zoomToPoint(point, zoomLevel)\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the chart to particular point.\r\n\t *\r\n\t * @from 4.10.0\r\n\t * @param  point      A point to zoom to\r\n\t * @param  zoomLevel  Zoom level\r\n\t * @param  center     Should the chart center on the target point?\r\n\t */\r\n\tpublic zoomToPoint(point: IPoint, zoomLevel: number, center?: boolean): void {\r\n\r\n\t\tlet container = this.seriesContainer;\r\n\r\n\t\tlet svgPoint: IPoint\r\n\t\tif (center) {\r\n\t\t\tsvgPoint = { x: this.maxWidth / 2, y: this.maxHeight / 2 };\r\n\t\t}\r\n\t\telse {\r\n\t\t\tsvgPoint = $utils.spritePointToSvg(point, container)\r\n\t\t}\r\n\r\n\t\tlet x = svgPoint.x - point.x * zoomLevel;\r\n\t\tlet y = svgPoint.y - point.y * zoomLevel;\r\n\r\n\t\tcontainer.animate([{ property: \"scale\", to: zoomLevel }, { property: \"x\", to: x }, { property: \"y\", to: y }], this.zoomDuration, this.zoomEasing);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the chart to particular data item (node).\r\n\t *\r\n\t * @from 4.10.0\r\n\t * @param  dataItem   A data item to zoom to\r\n\t * @param  zoomLevel  Zoom level\r\n\t * @param  center     Should the chart center on the target point?\r\n\t */\r\n\tpublic zoomToDataItem(dataItem: ForceDirectedSeriesDataItem, zoomLevel?: number, center?: boolean): void {\r\n\t\tlet x = dataItem.node.pixelX;\r\n\t\tlet y = dataItem.node.pixelY;\r\n\r\n\t\tif (!$type.isNumber(zoomLevel)) {\r\n\t\t\tzoomLevel = this.seriesContainer.scale * this.zoomStep;\r\n\t\t}\r\n\r\n\t\tthis.zoomToPoint({ x: x, y: y }, zoomLevel, center);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms out the chart to initial full view.\r\n\t *\r\n\t * @from 4.10.0\r\n\t */\r\n\tpublic zoomOut(): void {\r\n\t\tlet container = this.seriesContainer;\r\n\t\tthis.zoomToPoint({ x: container.pixelWidth / 2, y: container.pixelHeight / 2 }, 1, true);\r\n\t}\r\n\r\n\t/**\r\n\t * When user zooms in or out current zoom level is multiplied or divided\r\n\t * by value of this setting.\r\n\t *\r\n\t * @default false\r\n\t * @since 4.10.0\r\n\t * @see {@link https://www.amcharts.com/docs/v4/chart-types/force-directed/#Zooming} for more information about zooming ForceDirectedTree\r\n\t * @param value  Zoomable\r\n\t */\r\n\tpublic set zoomable(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"zoomable\", value)) {\r\n\t\t\tif (value) {\r\n\t\t\t\tthis.seriesContainer.resizable = true;\r\n\t\t\t\tthis.seriesContainer.draggable = true;\r\n\t\t\t\tthis.seriesContainer.dragWhileResize = true;\r\n\t\t\t\tthis.mouseWheelBehavior = \"zoom\";\r\n\r\n\t\t\t\tthis._backgroundZoomoutDisposer = this.seriesContainer.background.events.on(\"hit\", () => {\r\n\t\t\t\t\tthis.zoomOut();\r\n\t\t\t\t}, this, false);\r\n\t\t\t\tthis._disposers.push(this._backgroundZoomoutDisposer);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.seriesContainer.resizable = false;\r\n\t\t\t\tthis.seriesContainer.draggable = false;\r\n\t\t\t\tthis.seriesContainer.dragWhileResize = false;\r\n\t\t\t\tthis.mouseWheelBehavior = \"none\";\r\n\t\t\t\tif (this._backgroundZoomoutDisposer) {\r\n\t\t\t\t\tthis._backgroundZoomoutDisposer.dispose();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Zoomable\r\n\t */\r\n\tpublic get zoomable(): boolean {\r\n\t\treturn this.getPropertyValue(\"zoomable\");\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies what should chart do if when mouse wheel is rotated.\r\n\t *\r\n\t * @param Mouse wheel behavior\r\n\t * @since 4.10.0\r\n\t * @default none\r\n\t */\r\n\tpublic set mouseWheelBehavior(value: \"zoom\" | \"none\") {\r\n\r\n\t\tif (this.setPropertyValue(\"mouseWheelBehavior\", value)) {\r\n\t\t\tif (value != \"none\") {\r\n\t\t\t\tthis._mouseWheelDisposer = this.chartContainer.events.on(\"wheel\", this.handleWheel, this, false);\r\n\t\t\t\tthis._disposers.push(this._mouseWheelDisposer);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this._mouseWheelDisposer) {\r\n\t\t\t\t\tthis._mouseWheelDisposer.dispose();\r\n\t\t\t\t}\r\n\t\t\t\tthis.chartContainer.wheelable = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Mouse wheel behavior\r\n\t */\r\n\tpublic get mouseWheelBehavior(): \"zoom\" | \"none\" {\r\n\t\treturn this.getPropertyValue(\"mouseWheelBehavior\");\r\n\t}\r\n\r\n\t/**\r\n\t * When user zooms in or out current zoom level is multiplied or divided\r\n\t * by value of this setting.\r\n\t *\r\n\t * @since 4.10.0\r\n\t * @default 2\r\n\t * @param value  Zoom factor\r\n\t */\r\n\tpublic set zoomStep(value: number) {\r\n\t\tthis.setPropertyValue(\"zoomStep\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Zoom factor\r\n\t */\r\n\tpublic get zoomStep(): number {\r\n\t\treturn this.getPropertyValue(\"zoomStep\");\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Button]] element that is used for zooming out the chart.\r\n\t *\r\n\t * This button appears only when chart is zoomed in, and disappears\r\n\t * autoamatically when it is zoome dout.\r\n\t *\r\n\t * @param button  Zoom out button\r\n\t */\r\n\tpublic set zoomOutButton(button: ZoomOutButton) {\r\n\t\tthis._zoomOutButton = button;\r\n\t\tif (button) {\r\n\t\t\tbutton.events.on(\"hit\", () => {\r\n\t\t\t\tthis.zoomOut();\r\n\t\t\t}, undefined, false);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Zoom out button\r\n\t */\r\n\tpublic get zoomOutButton(): ZoomOutButton {\r\n\t\treturn this._zoomOutButton;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ForceDirectedTree\"] = ForceDirectedTree;\r\nregistry.registeredClasses[\"ForceDirectedTreeDataItem\"] = ForceDirectedTreeDataItem;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}