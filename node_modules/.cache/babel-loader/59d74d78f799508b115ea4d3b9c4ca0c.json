{"ast":null,"code":"/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { __extends } from \"tslib\";\nimport { Series, SeriesDataItem } from \"../../charts/series/Series\";\nimport { registry } from \"../../core/Registry\";\nimport { ListTemplate, ListDisposer, List } from \"../../core/utils/List\";\nimport { ForceDirectedNode } from \"./ForceDirectedNode\";\nimport { Disposer } from \"../../core/utils/Disposer\";\nimport { ForceDirectedLink } from \"./ForceDirectedLink\";\nimport { ColorSet } from \"../../core/utils/ColorSet\";\nimport * as d3force from \"d3-force\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $array from \"../../core/utils/Array\";\nimport { Percent, percent } from \"../../core/utils/Percent\";\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines a [[DataItem]] for [[ForceDirectedSeries]].\r\n *\r\n * @see {@link DataItem}\r\n * @since 4.3.8\r\n */\n\nvar ForceDirectedSeriesDataItem =\n/** @class */\nfunction (_super) {\n  __extends(ForceDirectedSeriesDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function ForceDirectedSeriesDataItem() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * Have all children already been initialized?\r\n     */\n\n\n    _this.childrenInited = false;\n    _this.className = \"ForceDirectedSeriesDataItem\";\n    _this.hasChildren.children = true;\n    _this.childLinks = new List();\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Shows the Data Item and related visual elements.\r\n   *\r\n   * @param duration  Animation duration (ms)\r\n   * @param delay     Delay animation (ms)\r\n   * @param fields    A list of fields to set values of\r\n   */\n\n\n  ForceDirectedSeriesDataItem.prototype.show = function (duration, delay, fields) {\n    this._visible = true;\n\n    if (this.node) {\n      this.node.isActive = true;\n    }\n\n    return;\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  ForceDirectedSeriesDataItem.prototype.dispatchVisibility = function (visible) {\n    if (this.events.isEnabled(\"visibilitychanged\")) {\n      var event_1 = {\n        type: \"visibilitychanged\",\n        target: this,\n        visible: visible\n      };\n      this.events.dispatchImmediately(\"visibilitychanged\", event_1);\n    }\n  };\n  /**\r\n   * Hides the Data Item and related visual elements.\r\n   *\r\n   * @param duration  Animation duration (ms)\r\n   * @param delay     Delay animation (ms)\r\n   * @param toValue   A value to set to `fields` when hiding\r\n   * @param fields    A list of data fields to set value to `toValue`\r\n   */\n\n\n  ForceDirectedSeriesDataItem.prototype.hide = function (duration, delay, toValue, fields) {\n    this._visible = false;\n\n    if (this.events.isEnabled(\"visibilitychanged\")) {\n      var event_2 = {\n        type: \"visibilitychanged\",\n        target: this,\n        visible: false\n      };\n      this.events.dispatchImmediately(\"visibilitychanged\", event_2);\n    }\n\n    if (this.node) {\n      this.node.isActive = false;\n    }\n\n    return;\n  };\n\n  Object.defineProperty(ForceDirectedSeriesDataItem.prototype, \"value\", {\n    /**\r\n     * @return Value\r\n     */\n    get: function get() {\n      var value = this.values.value.value;\n\n      if (!$type.isNumber(value)) {\n        if (this.children) {\n          value = 0;\n          this.children.each(function (child) {\n            value += child.value;\n          });\n        }\n      }\n\n      return value;\n    },\n\n    /**\r\n     * Numeric value of the item.\r\n     *\r\n     * @param value  Value\r\n     */\n    set: function set(value) {\n      this.setValue(\"value\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ForceDirectedSeriesDataItem.prototype, \"node\", {\n    /**\r\n     * An element, related to this data item. (node)\r\n     *\r\n     * @readonly\r\n     * @return node element\r\n     */\n    get: function get() {\n      var _this = this;\n\n      if (!this._node) {\n        var component_1 = this.component;\n        var node_1 = component_1.nodes.create();\n        node_1.draggable = true;\n        this._node = node_1;\n\n        this._disposers.push(node_1);\n\n        this._disposers.push(new Disposer(function () {\n          component_1.nodes.removeValue(node_1);\n        }));\n\n        this.addSprite(node_1);\n        node_1.visible = this.visible;\n        node_1.hiddenState.properties.visible = true; // Apply accessibility\n\n        if (component_1.itemsFocusable()) {\n          this.component.role = \"menu\";\n          node_1.role = \"menuitem\";\n          node_1.focusable = true;\n        } else {\n          this.component.role = \"list\";\n          node_1.role = \"listitem\";\n          node_1.focusable = false;\n        } // Apply screen reader label\n\n\n        if (node_1.focusable) {\n          node_1.events.once(\"focus\", function (ev) {\n            node_1.readerTitle = component_1.populateString(component_1.itemReaderText, _this);\n          }, undefined, false);\n          node_1.events.once(\"blur\", function (ev) {\n            node_1.readerTitle = \"\";\n          }, undefined, false);\n        }\n\n        if (node_1.hoverable) {\n          node_1.events.once(\"over\", function (ev) {\n            node_1.readerTitle = component_1.populateString(component_1.itemReaderText, _this);\n          }, undefined, false);\n          node_1.events.once(\"out\", function (ev) {\n            node_1.readerTitle = \"\";\n          }, undefined, false);\n        }\n      }\n\n      return this._node;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ForceDirectedSeriesDataItem.prototype, \"level\", {\n    /**\r\n     * Depth level in the series hierarchy.\r\n     *\r\n     * The top-level item will have level set at 0. Its children will have\r\n     * level 1, and so on.\r\n     *\r\n     * @readonly\r\n     * @return Level\r\n     */\n    get: function get() {\n      if (!this.parent) {\n        return 0;\n      } else {\n        return this.parent.level + 1;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ForceDirectedSeriesDataItem.prototype, \"percent\", {\n    /**\r\n     * Percent value of a node.\r\n     *\r\n     * @since 4.9.0\r\n     * @return Percent\r\n     */\n    get: function get() {\n      if (this.parent) {\n        return this.value / this.parent.value * 100;\n      }\n\n      return 100;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ForceDirectedSeriesDataItem.prototype, \"color\", {\n    /**\r\n     * @return Color\r\n     */\n    get: function get() {\n      var color = this.properties.color;\n\n      if (color == undefined) {\n        if (this.parent) {\n          color = this.parent.color;\n        }\n      }\n\n      if (color == undefined) {\n        if (this.component) {\n          color = this.component.colors.getIndex(this.component.colors.step * this.index);\n        }\n      }\n\n      return color;\n    },\n\n    /**\r\n     * Item's color.\r\n     *\r\n     * If not set, will use parent's color, or, if that is not set either,\r\n     * automatically assigned color from chart's color set. (`chart.colors`)\r\n     *\r\n     * @param value  : Color | LinearGradient | RadialGradient | Pattern\r\n     */\n    set: function set(value) {\n      this.setProperty(\"color\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ForceDirectedSeriesDataItem.prototype, \"linkWith\", {\n    /**\r\n     * @return Link list\r\n     */\n    get: function get() {\n      return this.properties.linkWith;\n    },\n\n    /**\r\n     * An array of id's of other nodes outside of the child/parent tree to link\r\n     * with.\r\n     *\r\n     * @param  value  Link list\r\n     */\n    set: function set(value) {\n      this.setProperty(\"linkWith\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ForceDirectedSeriesDataItem.prototype, \"hiddenInLegend\", {\n    /**\r\n     * @return Hidden in legend?\r\n     */\n    get: function get() {\n      return this.properties.hiddenInLegend;\n    },\n\n    /**\r\n     * Should dataItem (node) be hidden in legend?\r\n     *\r\n     * @param value Visible in legend?\r\n     */\n    set: function set(value) {\n      this.setProperty(\"hiddenInLegend\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ForceDirectedSeriesDataItem.prototype, \"collapsed\", {\n    /**\r\n     * @return Collapsed?\r\n     */\n    get: function get() {\n      return this.properties.collapsed;\n    },\n\n    /**\r\n     * Indicates whether node should start off as collapsed.\r\n     *\r\n     * This can be used to specify whether node should start off as collapsed\r\n     * via data.\r\n     *\r\n     * To toggle actual node, use its `isActive` property instead.\r\n     *\r\n     * @param  value  Collapsed?\r\n     */\n    set: function set(value) {\n      this.setProperty(\"collapsed\", value);\n      this.node.isActive = !value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ForceDirectedSeriesDataItem.prototype, \"fixed\", {\n    /**\r\n     * @return Fixed?\r\n     */\n    get: function get() {\n      return this.properties.fixed;\n    },\n\n    /**\r\n     * Is this node fixed (immovable)?\r\n     *\r\n     * @since 4.6.2\r\n     * @param  value  Fixed?\r\n     */\n    set: function set(value) {\n      this.setProperty(\"fixed\", value);\n\n      if (this.component) {\n        this.component.handleFixed(this);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ForceDirectedSeriesDataItem.prototype, \"children\", {\n    /**\r\n     * @return Item's children\r\n     */\n    get: function get() {\n      return this.properties.children;\n    },\n\n    /**\r\n     * A list of item's sub-children.\r\n     *\r\n     * @param children  Item's children\r\n     */\n    set: function set(children) {\n      this.setProperty(\"children\", children);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Creates a marker used in the legend for this slice.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param marker  Marker container\r\n   */\n\n  ForceDirectedSeriesDataItem.prototype.createLegendMarker = function (marker) {\n    this.component.createLegendMarker(marker, this);\n\n    if (!this.node.isActive) {\n      this.hide();\n    }\n  };\n\n  Object.defineProperty(ForceDirectedSeriesDataItem.prototype, \"legendDataItem\", {\n    /**\r\n     * @return Legend data item\r\n     */\n    get: function get() {\n      return this._legendDataItem;\n    },\n\n    /**\r\n     * A legend's data item, that corresponds to this data item.\r\n     *\r\n     * @param value  Legend data item\r\n     */\n    set: function set(value) {\n      this._legendDataItem = value;\n\n      if (value.label) {\n        value.label.dataItem = this;\n      }\n\n      if (value.valueLabel) {\n        value.valueLabel.dataItem = this;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return ForceDirectedSeriesDataItem;\n}(SeriesDataItem);\n\nexport { ForceDirectedSeriesDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines [[Series]] for a [[ForceDirectedTree]] chart.\r\n *\r\n * @see {@link IForceDirectedSeriesEvents} for a list of available Events\r\n * @see {@link IForceDirectedSeriesAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/ForceDirectedTree/} For more information\r\n * @todo Example\r\n * @since 4.3.8\r\n * @important\r\n */\n\nvar ForceDirectedSeries =\n/** @class */\nfunction (_super) {\n  __extends(ForceDirectedSeries, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function ForceDirectedSeries() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"ForceDirectedSeries\";\n    _this.d3forceSimulation = d3force.forceSimulation();\n    _this.maxRadius = percent(8);\n    _this.minRadius = percent(1);\n    _this.width = percent(100);\n    _this.height = percent(100);\n    _this.colors = new ColorSet();\n    _this.colors.step = 2;\n    _this.width = percent(100);\n    _this.height = percent(100);\n    _this.manyBodyStrength = -15;\n    _this.centerStrength = 0.8;\n\n    _this.setPropertyValue(\"dragFixedNodes\", false);\n\n    _this.setPropertyValue(\"velocityDecay\", 0.4);\n\n    _this.events.on(\"maxsizechanged\", function () {\n      _this.updateRadiuses(_this.dataItems);\n\n      _this.updateLinksAndNodes();\n\n      _this.dataItems.each(function (dataItem) {\n        _this.handleFixed(dataItem);\n      });\n\n      var d3forceSimulation = _this.d3forceSimulation;\n      var w = $math.max(50, _this.innerWidth);\n      var h = $math.max(50, _this.innerHeight);\n\n      if (d3forceSimulation) {\n        d3forceSimulation.force(\"x\", d3force.forceX().x(w / 2).strength(_this.centerStrength * 100 / w));\n        d3forceSimulation.force(\"y\", d3force.forceY().y(h / 2).strength(_this.centerStrength * 100 / h));\n\n        if (d3forceSimulation.alpha() < 0.4) {\n          d3forceSimulation.alpha(0.4);\n          d3forceSimulation.restart();\n        }\n      }\n    });\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Returns maximum value from all supplied data items.\r\n   *\r\n   * @ignore\r\n   * @param   dataItems  List of data items\r\n   * @param   max        Default max\r\n   * @return             Max\r\n   */\n\n\n  ForceDirectedSeries.prototype.getMaxValue = function (dataItems, max) {\n    var _this = this;\n\n    dataItems.each(function (dataItem) {\n      if (dataItem.value > max) {\n        max = dataItem.value;\n      }\n\n      if (dataItem.children) {\n        var cmax = _this.getMaxValue(dataItem.children, max);\n\n        if (cmax > max) {\n          max = cmax;\n        }\n      }\n    });\n    return max;\n  };\n  /**\r\n   * Validates (processes) data items.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  ForceDirectedSeries.prototype.validateDataItems = function () {\n    var _this = this;\n\n    if (this.chart.__disabled) {\n      _super.prototype.validateDataItems.call(this);\n\n      return;\n    }\n\n    this._dataDisposers.push(new ListDisposer(this.links));\n\n    this._maxValue = this.getMaxValue(this.dataItems, 0);\n    this.forceLinks = [];\n    this.colors.reset();\n    var index = 0;\n    var radius = Math.min(this.innerHeight / 3, this.innerWidth / 3);\n\n    if (this.dataItems.length <= 1) {\n      radius = 0;\n    }\n\n    this.dataItems.each(function (dataItem) {\n      var angle = index / _this.dataItems.length * 360;\n      var node = dataItem.node;\n      var xField = node.propertyFields.x;\n      var yField = node.propertyFields.y;\n\n      if (xField && $type.hasValue(dataItem.dataContext[xField])) {\n        node.x = dataItem.dataContext[xField];\n      } else {\n        node.x = _this.innerWidth / 2 + radius * $math.cos(angle);\n      }\n\n      if (yField && $type.hasValue(dataItem.dataContext[yField])) {\n        node.y = dataItem.dataContext[yField];\n      } else {\n        node.y = _this.innerHeight / 2 + radius * $math.sin(angle);\n      }\n\n      dataItem.node.fill = dataItem.color;\n      dataItem.node.stroke = dataItem.color;\n      index++;\n\n      _this.initNode(dataItem);\n    });\n\n    if (this.dataFields.linkWith) {\n      this.dataItems.each(function (dataItem) {\n        _this.processLinkWith(dataItem);\n      });\n    }\n\n    var d3forceSimulation = this.d3forceSimulation;\n    d3forceSimulation.on(\"tick\", function () {\n      _this.updateLinksAndNodes();\n    }); // helps to avoid initial scatter\n\n    for (var i = 0; i < 10; i++) {\n      d3forceSimulation.tick();\n    }\n\n    d3forceSimulation.alphaDecay(1 - Math.pow(0.001, 1 / 600));\n    this.chart.feedLegend();\n\n    _super.prototype.validateDataItems.call(this);\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  ForceDirectedSeries.prototype.handleFixed = function (dataItem) {\n    var _this = this;\n\n    var node = dataItem.node;\n    var xField = node.propertyFields.x;\n    var yField = node.propertyFields.y;\n\n    if (xField && $type.hasValue(dataItem.dataContext[xField])) {\n      node.x = dataItem.dataContext[xField];\n    }\n\n    if (yField && $type.hasValue(dataItem.dataContext[yField])) {\n      node.y = dataItem.dataContext[yField];\n    }\n\n    if (dataItem.fixed) {\n      if (node.x instanceof Percent) {\n        node.fx = $utils.relativeToValue(node.x, this.innerWidth);\n      } else {\n        node.fx = node.x;\n      }\n\n      if (node.y instanceof Percent) {\n        node.fy = $utils.relativeToValue(node.y, this.innerHeight);\n      } else {\n        node.fy = node.y;\n      }\n\n      node.draggable = this.dragFixedNodes;\n      node.validate(); // for links to redraw\n    } else {\n      node.fx = undefined;\n      node.fy = undefined;\n      node.draggable = true;\n    }\n\n    if (dataItem && dataItem.children) {\n      dataItem.children.each(function (di) {\n        _this.handleFixed(di);\n      });\n    }\n  };\n  /**\r\n   * @ignore\r\n   * @todo description\r\n   */\n\n\n  ForceDirectedSeries.prototype.updateNodeList = function () {\n    var d3forceSimulation = this.d3forceSimulation;\n    d3forceSimulation.nodes(this.nodes.values);\n    this._linkForce = d3force.forceLink(this.forceLinks);\n    d3forceSimulation.force(\"link\", this._linkForce);\n    this._collisionForce = d3force.forceCollide();\n    d3forceSimulation.force(\"collision\", this._collisionForce);\n    var w = $math.max(50, this.innerWidth);\n    var h = $math.max(50, this.innerHeight);\n    d3forceSimulation.force(\"x\", d3force.forceX().x(w / 2).strength(this.centerStrength * 100 / w));\n    d3forceSimulation.force(\"y\", d3force.forceY().y(h / 2).strength(this.centerStrength * 100 / h));\n  };\n  /**\r\n   * @ignore\r\n   * @todo description\r\n   */\n\n\n  ForceDirectedSeries.prototype.updateLinksAndNodes = function () {\n    var _this = this;\n\n    if (this._linkForce) {\n      this._linkForce.distance(function (linkDatum) {\n        return _this.getDistance(linkDatum);\n      });\n\n      this._linkForce.strength(function (linkDatum) {\n        return _this.getStrength(linkDatum);\n      });\n    }\n\n    if (this._collisionForce) {\n      this._collisionForce.radius(function (node) {\n        if (node instanceof ForceDirectedNode) {\n          var radius = node.circle.pixelRadius;\n\n          if (!node.outerCircle.__disabled && !node.outerCircle.disabled && node.outerCircle.visible) {\n            radius = (radius + 3) * node.outerCircle.scale;\n          }\n\n          return radius + node.paddingRadius;\n        }\n\n        return 1;\n      });\n    }\n\n    this.d3forceSimulation.force(\"manybody\", d3force.forceManyBody().strength(function (node) {\n      if (node instanceof ForceDirectedNode) {\n        return node.circle.pixelRadius * _this.manyBodyStrength;\n      }\n\n      return _this.manyBodyStrength;\n    }));\n  };\n  /**\r\n   * @ignore\r\n   * @todo description\r\n   */\n\n\n  ForceDirectedSeries.prototype.getDistance = function (linkDatum) {\n    var source = linkDatum.source;\n    var target = linkDatum.target;\n    var distance = 0;\n\n    if (target.dataItem && source.dataItem) {\n      var link = source.linksWith.getKey(target.uid);\n\n      if (link) {\n        distance = link.distance;\n      }\n\n      if (!source.isActive) {\n        distance = 1;\n      }\n\n      if (target.isHidden) {\n        return 0;\n      }\n\n      return distance * (source.circle.pixelRadius + target.circle.pixelRadius);\n    }\n\n    return distance;\n  };\n  /**\r\n   * @ignore\r\n   * @todo description\r\n   */\n\n\n  ForceDirectedSeries.prototype.getStrength = function (linkDatum) {\n    var source = linkDatum.source;\n    var target = linkDatum.target;\n    var strength = 0;\n    var link = source.linksWith.getKey(target.uid);\n\n    if (link) {\n      strength = link.strength;\n    }\n\n    if (target.isHidden) {\n      return 0;\n    }\n\n    return strength;\n  };\n  /**\r\n   * Handler for drag end event.\r\n   *\r\n   * @ignore\r\n   */\n\n\n  ForceDirectedSeries.prototype.nodeDragEnded = function () {\n    this.d3forceSimulation.alphaTarget(0);\n  };\n  /**\r\n   * Handler for drag start event.\r\n   *\r\n   * @ignore\r\n   */\n\n\n  ForceDirectedSeries.prototype.nodeDragStarted = function () {\n    this.d3forceSimulation.alpha(0.1);\n    this.d3forceSimulation.restart();\n  };\n  /**\r\n   * Resets positions of whole tree.\r\n   *\r\n   * @ignore\r\n   */\n\n\n  ForceDirectedSeries.prototype.restartSimulation = function () {\n    if (this.d3forceSimulation.alpha() <= 0.3) {\n      this.d3forceSimulation.alpha(0.3);\n      this.d3forceSimulation.restart();\n    }\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  ForceDirectedSeries.prototype.updateRadiuses = function (dataItems) {\n    var _this = this;\n\n    dataItems.each(function (dataItem) {\n      _this.updateRadius(dataItem);\n\n      if (dataItem.childrenInited) {\n        _this.updateRadiuses(dataItem.children);\n      }\n    });\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  ForceDirectedSeries.prototype.updateRadius = function (dataItem) {\n    var node = dataItem.node;\n    var minSide = (this.innerWidth + this.innerHeight) / 2;\n    var minRadius = $utils.relativeToValue(this.minRadius, minSide);\n    var maxRadius = $utils.relativeToValue(this.maxRadius, minSide);\n    var radius = minRadius + dataItem.value / this._maxValue * (maxRadius - minRadius);\n\n    if (!$type.isNumber(radius)) {\n      radius = minRadius;\n    } //if(!node.circle.isHidden){\n\n\n    node.circle.radius = radius; //}\n\n    node.outerCircle.radius = radius + 3;\n    node.circle.states.getKey(\"active\").properties.radius = radius;\n    node.circle.defaultState.properties.radius = radius;\n  };\n  /**\r\n   * Initializes node.\r\n   *\r\n   * @ignore\r\n   */\n\n\n  ForceDirectedSeries.prototype.initNode = function (dataItem) {\n    var _this = this;\n\n    var node = dataItem.node;\n    node.parent = this;\n    this.updateRadius(dataItem); //let nodeIndex = this.nodes.indexOf(dataItem.node);\n\n    if (!dataItem.children || dataItem.children.length == 0) {\n      node.outerCircle.disabled = true;\n      node.circle.interactionsEnabled = true;\n      node.cursorOverStyle = MouseCursorStyle.default;\n    } else {\n      node.cursorOverStyle = MouseCursorStyle.pointer;\n    }\n\n    if (this.dataItemsInvalid && (dataItem.level >= this.maxLevels - 1 || dataItem.collapsed)) {\n      node.isActive = false;\n      this.updateNodeList();\n      return;\n    }\n\n    if (!node.isActive) {\n      node.hide(0);\n    }\n\n    this.handleFixed(dataItem);\n\n    if (dataItem.children) {\n      var index_1 = 0;\n      dataItem.childrenInited = true;\n\n      if (this.dataItems.length == 1 && dataItem.level == 0) {\n        this.colors.next();\n      }\n\n      dataItem.children.each(function (child) {\n        /*\r\n        let link = this.links.create();\r\n        link.parent = this;\r\n        link.zIndex = -1;\r\n        dataItem.childLinks.push(link);\r\n        link.source = dataItem.node;\r\n        let childIndex = this.nodes.indexOf(child.node);\r\n        link.target = child.node;\r\n        child.parentLink = link;\r\n          this._forceLinks.push({ source: nodeIndex, target: childIndex });\r\n        */\n        var link = node.linkWith(child.node);\n        child.parentLink = link;\n        var radius = 2 * node.circle.pixelRadius + child.node.circle.pixelRadius;\n        var angle = index_1 / dataItem.children.length * 360;\n        child.node.x = node.pixelX + radius * $math.cos(angle);\n        child.node.y = node.pixelY + radius * $math.sin(angle);\n        child.node.circle.radius = 0;\n        var color;\n        var diColor = child.properties.color;\n\n        if ($type.hasValue(diColor)) {\n          color = diColor;\n        } else {\n          if (_this.dataItems.length == 1 && dataItem.level == 0) {\n            color = _this.colors.next();\n          } else {\n            color = dataItem.color;\n          }\n        }\n\n        child.color = color;\n        child.node.fill = color;\n        child.node.stroke = color;\n        child.parentLink.stroke = color;\n        child.node.fill = child.node.fill;\n        child.node.stroke = child.node.stroke;\n\n        _this.initNode(child);\n\n        index_1++;\n      });\n    }\n\n    node.isActive = true;\n    node.show();\n    this.updateNodeList();\n  };\n  /**\r\n   * @ignore\r\n   * @todo description\r\n   */\n\n\n  ForceDirectedSeries.prototype.processLinkWith = function (dataItem) {\n    var _this = this;\n\n    if (dataItem.linkWith) {\n      $array.each(dataItem.linkWith, function (id, index) {\n        var dataItemToConnect = _this.getDataItemById(_this.dataItems, id);\n\n        if (dataItemToConnect) {\n          dataItem.node.linkWith(dataItemToConnect.node, _this.linkWithStrength);\n        }\n      });\n    }\n\n    if (dataItem.children) {\n      dataItem.children.each(function (child) {\n        _this.processLinkWith(child);\n      });\n    }\n  };\n  /**\r\n   * Returns a [[ForceDirectedSeriesDataItem]] related to node by specific id.\r\n   *\r\n   * @param   dataItems  List of data items to search in\r\n   * @param   id         Id to search for\r\n   * @return             Data item\r\n   */\n\n\n  ForceDirectedSeries.prototype.getDataItemById = function (dataItems, id) {\n    for (var i = dataItems.length - 1; i >= 0; i--) {\n      var dataItem = dataItems.getIndex(i);\n\n      if (dataItem.id == id) {\n        return dataItem;\n      }\n\n      if (dataItem.children) {\n        var di = this.getDataItemById(dataItem.children, id);\n\n        if (di) {\n          return di;\n        }\n      }\n    }\n  };\n  /**\r\n   * Returns a new/empty DataItem of the type appropriate for this object.\r\n   *\r\n   * @see {@link DataItem}\r\n   * @return Data Item\r\n   */\n\n\n  ForceDirectedSeries.prototype.createDataItem = function () {\n    return new ForceDirectedSeriesDataItem();\n  };\n\n  Object.defineProperty(ForceDirectedSeries.prototype, \"nodes\", {\n    /**\r\n     * A list of nodes in series.\r\n     *\r\n     * @return  Node list\r\n     */\n    get: function get() {\n      if (!this._nodes) {\n        var node = this.createNode();\n        node.applyOnClones = true;\n\n        this._disposers.push(node);\n\n        this._nodes = new ListTemplate(node);\n\n        this._disposers.push(new ListDisposer(this._nodes));\n      }\n\n      return this._nodes;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ForceDirectedSeries.prototype, \"links\", {\n    /**\r\n     * A list of links between nodes.\r\n     *\r\n     * @return  Link list\r\n     */\n    get: function get() {\n      if (!this._links) {\n        var link = this.createLink();\n        link.applyOnClones = true;\n\n        this._disposers.push(link);\n\n        this._links = new ListTemplate(link);\n\n        this._disposers.push(new ListDisposer(this._links));\n      }\n\n      return this._links;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Creates a new node.\r\n   */\n\n  ForceDirectedSeries.prototype.createNode = function () {\n    return new ForceDirectedNode();\n  };\n  /**\r\n   * Creates a new link.\r\n   */\n\n\n  ForceDirectedSeries.prototype.createLink = function () {\n    return new ForceDirectedLink();\n  };\n\n  Object.defineProperty(ForceDirectedSeries.prototype, \"minRadius\", {\n    /**\r\n     * @return Minimum radius (px or percent)\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"minRadius\");\n    },\n\n    /**\r\n     * Smallest possible radius in pixels of the node circle.\r\n     *\r\n     * If set in percent, it radius will be calculated from average width and\r\n     * height of series.\r\n     *\r\n     * @default Percent(1)\r\n     * @param  value  Minimum radius (px or percent)\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"minRadius\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ForceDirectedSeries.prototype, \"maxRadius\", {\n    /**\r\n     * @return Maximum radius (px or Percent)\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"maxRadius\");\n    },\n\n    /**\r\n     * Biggest possible radius in pixels of the node circle.\r\n     *\r\n     * If set in percent, it radius will be calculated from average width and\r\n     * height of series.\r\n     *\r\n     * @default Percent(8)\r\n     * @param  value  Maximum radius (px or Percent)\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"maxRadius\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ForceDirectedSeries.prototype, \"colors\", {\n    /**\r\n     * @return Color set\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"colors\");\n    },\n\n    /**\r\n     * A color set to be used for nodes.\r\n     *\r\n     * iIt works like this:\r\n     *\r\n     * The first level with more than one node, assigns different colors to all\r\n     * nodes in this list. Their child nodes inherit the color.\r\n     *\r\n     * For example, if the top level has one node with three children, the top\r\n     * node will get first color, the first child will get second color, etc.\r\n     *\r\n     * If there are two top nodes, the first top node gets first color, the\r\n     * second top node gets the second color. Their subsequent children inherit\r\n     * colors.\r\n     *\r\n     * @param value  Color set\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"colors\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ForceDirectedSeries.prototype, \"maxLevels\", {\n    /**\r\n     * @return Number of levels\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"maxLevels\");\n    },\n\n    /**\r\n     * Number of levels to be displayed initially.\r\n     *\r\n     * @param  value  Number of levels\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"maxLevels\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ForceDirectedSeries.prototype, \"manyBodyStrength\", {\n    /**\r\n     * @return  Body push/attrack strength\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"manyBodyStrength\");\n    },\n\n    /**\r\n     * Relative strength each node pushes (or attracts) other nodes (it is\r\n     * multiplied by `node.circle.radius` for big nodes to push stronger).\r\n     *\r\n     * Positive value will make nodes attract each other, while negative will\r\n     * push away each other. The bigger the negative number is, the more\r\n     * scattered nodes will be.\r\n     *\r\n     * Available value range: `-XX` to `XX`.\r\n     *\r\n     * @default -15\r\n     * @param  value  Body push/attrack strength\r\n     */\n    set: function set(value) {\n      if (this.setPropertyValue(\"manyBodyStrength\", value)) {\n        this.restartSimulation();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ForceDirectedSeries.prototype, \"centerStrength\", {\n    /**\r\n     * @return  Stregth of attraction to center\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"centerStrength\");\n    },\n\n    /**\r\n     * Relative strength each child node is pushes (or attracted) to the center\r\n     * of the chart.\r\n     *\r\n     * Positive value will make nodes to be attracted to center, while negative\r\n     * will push them away.\r\n     *\r\n     * Available value range: `-50` to `50`.\r\n     *\r\n     * @default 0.8\r\n     * @param  value  Stregth of attraction to center\r\n     */\n    set: function set(value) {\n      if (this.setPropertyValue(\"centerStrength\", value)) {\n        this.restartSimulation();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ForceDirectedSeries.prototype, \"linkWithStrength\", {\n    /**\r\n     * @return Strength\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"linkWithStrength\");\n    },\n\n    /**\r\n     * Relative attraction strength between the nodes connected with `linkWith`.\r\n     *\r\n     * @since 4.4.8\r\n     * @param  value  Strength\r\n     * @default undefined\r\n     */\n    set: function set(value) {\n      if (this.setPropertyValue(\"linkWithStrength\", value)) {\n        this.restartSimulation();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ForceDirectedSeries.prototype, \"velocityDecay\", {\n    /**\r\n     * @return Velocity decay\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"velocityDecay\");\n    },\n\n    /**\r\n     * The bigger the number the more slowly the nodes will move. Think of it as\r\n     * friction.\r\n     *\r\n     * @since 4.9.2\r\n     * @param  value  Velocity decay\r\n     * @default 0.4\r\n     */\n    set: function set(value) {\n      if (this.setPropertyValue(\"velocityDecay\", value)) {\n        this.d3forceSimulation.velocityDecay(value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ForceDirectedSeries.prototype, \"dragFixedNodes\", {\n    /**\r\n     * @return Allow drag fixed nodes?\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"dragFixedNodes\");\n    },\n\n    /**\r\n     * Specifies if user can drag fixed nodes.\r\n     *\r\n     * @since 4.9.0\r\n     * @default false\r\n     * @param  value  Allow drag fixed nodes?\r\n     */\n    set: function set(value) {\n      var _this = this;\n\n      if (this.setPropertyValue(\"dragFixedNodes\", value)) {\n        this.dataItems.each(function (dataItem) {\n          _this.handleFixed(dataItem);\n        });\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Binds related legend data item's visual settings to this series' visual\r\n   * settings.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param marker    Container\r\n   * @param dataItem  Data item\r\n   */\n\n  ForceDirectedSeries.prototype.createLegendMarker = function (marker, dataItem) {\n    marker.children.each(function (child) {\n      var node = dataItem.node;\n\n      if (child instanceof RoundedRectangle) {\n        child.cornerRadius(40, 40, 40, 40);\n      }\n\n      child.defaultState.properties.fill = node.fill;\n      child.defaultState.properties.stroke = node.stroke;\n      child.defaultState.properties.fillOpacity = node.fillOpacity;\n      child.defaultState.properties.strokeOpacity = node.strokeOpacity;\n      child.fill = node.fill;\n      child.stroke = node.stroke;\n      child.fillOpacity = node.fillOpacity;\n      child.strokeOpacity = node.strokeOpacity;\n\n      if (child.fill == undefined) {\n        child.__disabled = true;\n      }\n\n      var legendDataItem = marker.dataItem;\n      legendDataItem.color = node.fill;\n      legendDataItem.colorOrig = node.fill;\n      node.events.on(\"propertychanged\", function (ev) {\n        if (ev.property == \"fill\") {\n          child.__disabled = false;\n\n          if (!child.isActive) {\n            child.fill = node.fill;\n          }\n\n          child.defaultState.properties.fill = node.fill;\n          legendDataItem.color = node.fill;\n          legendDataItem.colorOrig = node.fill;\n        }\n\n        if (ev.property == \"stroke\") {\n          if (!child.isActive) {\n            child.stroke = node.stroke;\n          }\n\n          child.defaultState.properties.stroke = node.stroke;\n        }\n      }, undefined, false);\n    });\n  };\n\n  return ForceDirectedSeries;\n}(Series);\n\nexport { ForceDirectedSeries };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"ForceDirectedSeries\"] = ForceDirectedSeries;\nregistry.registeredClasses[\"ForceDirectedSeriesDataItem\"] = ForceDirectedSeriesDataItem;","map":{"version":3,"sources":["../../../../../src/.internal/plugins/forceDirected/ForceDirectedSeries.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { Series, SeriesDataItem, ISeriesDataFields, ISeriesProperties, ISeriesAdapters, ISeriesEvents } from \"../../charts/series/Series\";\r\nimport { ForceDirectedTree, ForceDirectedTreeDataItem } from \"./ForceDirectedTree\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { ListTemplate, ListDisposer, List } from \"../../core/utils/List\";\r\nimport { ForceDirectedNode } from \"./ForceDirectedNode\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\nimport { ForceDirectedLink } from \"./ForceDirectedLink\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport * as d3force from \"d3-force\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { LinearGradient } from \"../../core/rendering/fills/LinearGradient\";\r\nimport { RadialGradient } from \"../../core/rendering/fills/RadialGradient\";\r\nimport { Pattern } from \"../../core/rendering/fills/Pattern\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport { OrderedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { LegendDataItem } from \"../../charts/Legend\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { AMEvent } from \"../../core/utils/EventDispatcher\";\r\nimport { IDataItemEvents } from \"../../core/DataItem\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ForceDirectedSeries]].\r\n *\r\n * @see {@link DataItem}\r\n * @since 4.3.8\r\n */\r\nexport class ForceDirectedSeriesDataItem extends SeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: ForceDirectedSeries;\r\n\r\n\t/**\r\n\t * A reference to a component of a data item.\r\n\t */\r\n\tpublic component: ForceDirectedSeries;\r\n\r\n\t/**\r\n\t * A type of node used for this series.\r\n\t */\r\n\tpublic _node: ForceDirectedNode;\r\n\r\n\t/**\r\n\t * A list of [[ForceDirectedLink]] elements of links  to node's children.\r\n\t *\r\n\t * This list does not include a link to node's parent, which is available\r\n\t * through `parentLink`.\r\n\t */\r\n\tpublic childLinks: List<ForceDirectedLink>;\r\n\r\n\t/**\r\n\t * A [[ForceDirectedLink]] to node's parent.\r\n\t */\r\n\tpublic parentLink: ForceDirectedLink;\r\n\r\n\t/**\r\n\t * A Legend's data item.\r\n\t */\r\n\tprotected _legendDataItem: LegendDataItem;\r\n\r\n\t/**\r\n\t * Have all children already been initialized?\r\n\t */\r\n\tpublic childrenInited: boolean = false;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ForceDirectedSeriesDataItem\";\r\n\r\n\t\tthis.hasChildren.children = true;\r\n\r\n\t\tthis.childLinks = new List<ForceDirectedLink>();\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Shows the Data Item and related visual elements.\r\n\t *\r\n\t * @param duration  Animation duration (ms)\r\n\t * @param delay     Delay animation (ms)\r\n\t * @param fields    A list of fields to set values of\r\n\t */\r\n\tpublic show(duration?: number, delay?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\tthis._visible = true;\r\n\r\n\t\tif (this.node) {\r\n\t\t\tthis.node.isActive = true;\r\n\t\t}\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic dispatchVisibility(visible: boolean) {\r\n\t\tif (this.events.isEnabled(\"visibilitychanged\")) {\r\n\t\t\tconst event: AMEvent<this, IDataItemEvents>[\"visibilitychanged\"] = {\r\n\t\t\t\ttype: \"visibilitychanged\",\r\n\t\t\t\ttarget: this,\r\n\t\t\t\tvisible: visible\r\n\t\t\t};\r\n\r\n\t\t\tthis.events.dispatchImmediately(\"visibilitychanged\", event);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Hides the Data Item and related visual elements.\r\n\t *\r\n\t * @param duration  Animation duration (ms)\r\n\t * @param delay     Delay animation (ms)\r\n\t * @param toValue   A value to set to `fields` when hiding\r\n\t * @param fields    A list of data fields to set value to `toValue`\r\n\t */\r\n\tpublic hide(duration?: number, delay?: number, toValue?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\tthis._visible = false;\r\n\r\n\t\tif (this.events.isEnabled(\"visibilitychanged\")) {\r\n\t\t\tconst event: AMEvent<this, IDataItemEvents>[\"visibilitychanged\"] = {\r\n\t\t\t\ttype: \"visibilitychanged\",\r\n\t\t\t\ttarget: this,\r\n\t\t\t\tvisible: false\r\n\t\t\t};\r\n\r\n\t\t\tthis.events.dispatchImmediately(\"visibilitychanged\", event);\r\n\t\t}\r\n\r\n\t\tif (this.node) {\r\n\t\t\tthis.node.isActive = false;\r\n\t\t}\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * Numeric value of the item.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set value(value: number) {\r\n\t\tthis.setValue(\"value\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get value(): number {\r\n\r\n\t\tlet value = this.values.value.value;\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tif (this.children) {\r\n\t\t\t\tvalue = 0;\r\n\t\t\t\tthis.children.each((child) => {\r\n\t\t\t\t\tvalue += child.value;\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * An element, related to this data item. (node)\r\n\t *\r\n\t * @readonly\r\n\t * @return node element\r\n\t */\r\n\tpublic get node(): ForceDirectedNode {\r\n\t\tif (!this._node) {\r\n\r\n\t\t\tlet component = this.component;\r\n\r\n\t\t\tlet node = component.nodes.create();\r\n\t\t\tnode.draggable = true;\r\n\t\t\tthis._node = node;\r\n\r\n\t\t\tthis._disposers.push(node);\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tcomponent.nodes.removeValue(node);\r\n\t\t\t}));\r\n\r\n\t\t\tthis.addSprite(node);\r\n\t\t\tnode.visible = this.visible;\r\n\t\t\tnode.hiddenState.properties.visible = true;\r\n\r\n\t\t\t// Apply accessibility\r\n\t\t\tif (component.itemsFocusable()) {\r\n\t\t\t\tthis.component.role = \"menu\";\r\n\t\t\t\tnode.role = \"menuitem\";\r\n\t\t\t\tnode.focusable = true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.component.role = \"list\";\r\n\t\t\t\tnode.role = \"listitem\";\r\n\t\t\t\tnode.focusable = false;\r\n\t\t\t}\r\n\r\n\t\t\t// Apply screen reader label\r\n\t\t\tif (node.focusable) {\r\n\t\t\t\tnode.events.once(\"focus\", (ev) => {\r\n\t\t\t\t\tnode.readerTitle = component.populateString(component.itemReaderText, this);\r\n\t\t\t\t}, undefined, false);\r\n\t\t\t\tnode.events.once(\"blur\", (ev) => {\r\n\t\t\t\t\tnode.readerTitle = \"\";\r\n\t\t\t\t}, undefined, false);\r\n\t\t\t}\r\n\t\t\tif (node.hoverable) {\r\n\t\t\t\tnode.events.once(\"over\", (ev) => {\r\n\t\t\t\t\tnode.readerTitle = component.populateString(component.itemReaderText, this);\r\n\t\t\t\t}, undefined, false);\r\n\t\t\t\tnode.events.once(\"out\", (ev) => {\r\n\t\t\t\t\tnode.readerTitle = \"\";\r\n\t\t\t\t}, undefined, false);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._node;\r\n\t}\r\n\r\n\t/**\r\n\t * Depth level in the series hierarchy.\r\n\t *\r\n\t * The top-level item will have level set at 0. Its children will have\r\n\t * level 1, and so on.\r\n\t *\r\n\t * @readonly\r\n\t * @return Level\r\n\t */\r\n\tpublic get level(): number {\r\n\t\tif (!this.parent) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.parent.level + 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Percent value of a node.\r\n\t *\r\n\t * @since 4.9.0\r\n\t * @return Percent\r\n\t */\r\n\tpublic get percent(): number {\r\n\t\tif (this.parent) {\r\n\t\t\treturn this.value / this.parent.value * 100;\r\n\t\t}\r\n\t\treturn 100;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's color.\r\n\t *\r\n\t * If not set, will use parent's color, or, if that is not set either,\r\n\t * automatically assigned color from chart's color set. (`chart.colors`)\r\n\t *\r\n\t * @param value  : Color | LinearGradient | RadialGradient | Pattern\r\n\t */\r\n\tpublic set color(value: Color | LinearGradient | RadialGradient | Pattern) {\r\n\t\tthis.setProperty(\"color\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Color\r\n\t */\r\n\tpublic get color(): Color | LinearGradient | RadialGradient | Pattern {\r\n\t\tlet color = this.properties.color;\r\n\r\n\t\tif (color == undefined) {\r\n\t\t\tif (this.parent) {\r\n\t\t\t\tcolor = this.parent.color;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (color == undefined) {\r\n\t\t\tif (this.component) {\r\n\t\t\t\tcolor = this.component.colors.getIndex(this.component.colors.step * this.index);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn color;\r\n\t}\r\n\r\n\t/**\r\n\t * An array of id's of other nodes outside of the child/parent tree to link\r\n\t * with.\r\n\t *\r\n\t * @param  value  Link list\r\n\t */\r\n\tpublic set linkWith(value: string[]) {\r\n\t\tthis.setProperty(\"linkWith\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Link list\r\n\t */\r\n\tpublic get linkWith(): string[] {\r\n\t\treturn this.properties.linkWith;\r\n\t}\r\n\r\n\t/**\r\n\t * Should dataItem (node) be hidden in legend?\r\n\t *\r\n\t * @param value Visible in legend?\r\n\t */\r\n\tpublic set hiddenInLegend(value: boolean) {\r\n\t\tthis.setProperty(\"hiddenInLegend\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Hidden in legend?\r\n\t */\r\n\tpublic get hiddenInLegend(): boolean {\r\n\t\treturn this.properties.hiddenInLegend;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates whether node should start off as collapsed.\r\n\t *\r\n\t * This can be used to specify whether node should start off as collapsed\r\n\t * via data.\r\n\t *\r\n\t * To toggle actual node, use its `isActive` property instead.\r\n\t *\r\n\t * @param  value  Collapsed?\r\n\t */\r\n\tpublic set collapsed(value: boolean) {\r\n\t\tthis.setProperty(\"collapsed\", value);\r\n\t\tthis.node.isActive = !value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Collapsed?\r\n\t */\r\n\tpublic get collapsed(): boolean {\r\n\t\treturn this.properties.collapsed;\r\n\t}\r\n\r\n\t/**\r\n\t * Is this node fixed (immovable)?\r\n\t *\r\n\t * @since 4.6.2\r\n\t * @param  value  Fixed?\r\n\t */\r\n\tpublic set fixed(value: boolean) {\r\n\t\tthis.setProperty(\"fixed\", value);\r\n\t\tif (this.component) {\r\n\t\t\tthis.component.handleFixed(this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Fixed?\r\n\t */\r\n\tpublic get fixed(): boolean {\r\n\t\treturn this.properties.fixed;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of item's sub-children.\r\n\t *\r\n\t * @param children  Item's children\r\n\t */\r\n\tpublic set children(children: OrderedListTemplate<ForceDirectedSeriesDataItem>) {\r\n\t\tthis.setProperty(\"children\", children);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Item's children\r\n\t */\r\n\tpublic get children(): OrderedListTemplate<ForceDirectedSeriesDataItem> {\r\n\t\treturn this.properties.children;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a marker used in the legend for this slice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker  Marker container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container) {\r\n\t\tthis.component.createLegendMarker(marker, this);\r\n\t\tif (!this.node.isActive) {\r\n\t\t\tthis.hide();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A legend's data item, that corresponds to this data item.\r\n\t *\r\n\t * @param value  Legend data item\r\n\t */\r\n\tpublic set legendDataItem(value: LegendDataItem) {\r\n\t\tthis._legendDataItem = value;\r\n\t\tif (value.label) {\r\n\t\t\tvalue.label.dataItem = this;\r\n\t\t}\r\n\t\tif (value.valueLabel) {\r\n\t\t\tvalue.valueLabel.dataItem = this;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Legend data item\r\n\t */\r\n\tpublic get legendDataItem(): LegendDataItem {\r\n\t\treturn this._legendDataItem;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ForceDirectedSeries]].\r\n *\r\n * @since 4.3.8\r\n */\r\nexport interface IForceDirectedSeriesDataFields extends ISeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds category.\r\n\t */\r\n\tcategory?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's sub-items.\r\n\t */\r\n\tchildren?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's name.\r\n\t */\r\n\tname?: string;\r\n\r\n\t/**\r\n\t * A name of the field tha holds an array of ids that node should link with\r\n\t * besides of it's own children or parent.\r\n\t */\r\n\tlinkWith?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's color.\r\n\t *\r\n\t * If not set, a new color will be automatically assigned to each item as\r\n\t * defined by theme.\r\n\t */\r\n\tcolor?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds boolean flag if item should be\r\n\t * hidden in legend.\r\n\t */\r\n\thiddenInLegend?: string;\r\n\r\n\t/**\r\n\t * A name of the field that holds boolean flag whether node should start\r\n\t * as collapsed. (nodes start as fully expanded by default)\r\n\t */\r\n\tcollapsed?: string;\r\n\r\n\t/**\r\n\t * name of the field that holds boolean flag indicating whether this node\r\n\t * is \"fixed\" (immobavle).\r\n\t *\r\n\t * @since 4.6.2\r\n\t */\r\n\tfixed?: string;\r\n}\r\n\r\n/**\r\n * Defines properties for [[ForceDirectedSeries]].\r\n *\r\n * @since 4.3.8\r\n */\r\nexport interface IForceDirectedSeriesProperties extends ISeriesProperties {\r\n\r\n\t/**\r\n\t * Smallest possible radius in pixels of the node circle.\r\n\t *\r\n\t * @default 5\r\n\t */\r\n\tminRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Biggest possible radius in pixels of the node circle.\r\n\t *\r\n\t * @default 70\r\n\t */\r\n\tmaxRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * A color set to be used for coloring nodes.\r\n\t *\r\n\t * Each new top level will be assigned a new color from this list.\r\n\t */\r\n\tcolors?: ColorSet;\r\n\r\n\t/**\r\n\t * Number of levels to display initially.\r\n\t */\r\n\tmaxLevels?: number;\r\n\r\n\t/**\r\n\t * A relative strength with which nodes push or attract each other.\r\n\t */\r\n\tmanyBodyStrength?: number;\r\n\r\n\t/**\r\n\t * A relative strength with which nodes are pushed away or attracted to\r\n\t * center of the chart.\r\n\t */\r\n\tcenterStrength?: number;\r\n\r\n\t/**\r\n\t * Relative attraction strength between the nodes connected with `linkWith`.\r\n\t *\r\n\t * @since 4.4.8\r\n\t */\r\n\tlinkWithStrength?: number;\r\n\r\n\t/**\r\n\t * Specifies if user can drag fixed nodes\r\n\t *\r\n\t * @since 4.9.0\r\n\t */\r\n\tdragFixedNodes?: boolean;\r\n\r\n\t/**\r\n\t * The bigger the number the more slowly the nodes will move. Think of it as\r\n\t * friction.\r\n\t * \r\n\t * @default 0.4\r\n\t * @since 4.9.2\r\n\t */\r\n\tvelocityDecay?:number;\r\n}\r\n\r\n/**\r\n * Defines events for [[ForceDirectedSeries]].\r\n *\r\n * @since 4.3.8\r\n */\r\nexport interface IForceDirectedSeriesEvents extends ISeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ForceDirectedSeries]].\r\n *\r\n * @see {@link Adapter}\r\n * @since 4.3.8\r\n */\r\nexport interface IForceDirectedSeriesAdapters extends ISeriesAdapters, IForceDirectedSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a [[ForceDirectedTree]] chart.\r\n *\r\n * @see {@link IForceDirectedSeriesEvents} for a list of available Events\r\n * @see {@link IForceDirectedSeriesAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/ForceDirectedTree/} For more information\r\n * @todo Example\r\n * @since 4.3.8\r\n * @important\r\n */\r\nexport class ForceDirectedSeries extends Series {\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _node: ForceDirectedNode;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected _nodes: ListTemplate<this[\"_node\"]>;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _link: ForceDirectedLink;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected _links: ListTemplate<this[\"_link\"]>;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IForceDirectedSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IForceDirectedSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IForceDirectedSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IForceDirectedSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: ForceDirectedSeriesDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: ForceDirectedTree;\r\n\r\n\t/**\r\n\t * Parent data item of a series.\r\n\t */\r\n\tpublic parentDataItem: ForceDirectedTreeDataItem;\r\n\r\n\t/**\r\n\t * A reference to the `d3.Simulation` instance for fine-grained configuration\r\n\t * of node gravitational dynamics.\r\n\t *\r\n\t * @see {@link https://github.com/d3/d3-force#simulation} For more info\r\n\t */\r\n\tpublic d3forceSimulation: d3force.Simulation<{}, d3force.SimulationLinkDatum<d3force.SimulationNodeDatum>>;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected _maxValue: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic forceLinks: d3force.SimulationLinkDatum<d3force.SimulationNodeDatum>[];\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected _linkForce: d3force.ForceLink<d3force.SimulationNodeDatum, d3force.SimulationLinkDatum<d3force.SimulationNodeDatum>>;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected _collisionForce: d3force.ForceCollide<d3force.SimulationNodeDatum>;\r\n\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ForceDirectedSeries\";\r\n\r\n\t\tthis.d3forceSimulation = d3force.forceSimulation();\r\n\r\n\t\tthis.maxRadius = percent(8);\r\n\t\tthis.minRadius = percent(1);\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\r\n\t\tthis.colors = new ColorSet();\r\n\t\tthis.colors.step = 2;\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\r\n\t\tthis.manyBodyStrength = -15;\r\n\t\tthis.centerStrength = 0.8;\r\n\r\n\t\tthis.setPropertyValue(\"dragFixedNodes\", false);\r\n\t\tthis.setPropertyValue(\"velocityDecay\", 0.4);\r\n\r\n\t\tthis.events.on(\"maxsizechanged\", () => {\r\n\t\t\tthis.updateRadiuses(this.dataItems);\r\n\t\t\tthis.updateLinksAndNodes();\r\n\r\n\t\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\t\tthis.handleFixed(dataItem);\r\n\t\t\t})\r\n\r\n\t\t\tlet d3forceSimulation = this.d3forceSimulation;\r\n\r\n\t\t\tlet w = $math.max(50, this.innerWidth);\r\n\t\t\tlet h = $math.max(50, this.innerHeight);\r\n\r\n\t\t\tif (d3forceSimulation) {\r\n\t\t\t\td3forceSimulation.force(\"x\", d3force.forceX().x(w / 2).strength(this.centerStrength * 100 / w));\r\n\t\t\t\td3forceSimulation.force(\"y\", d3force.forceY().y(h / 2).strength(this.centerStrength * 100 / h));\r\n\t\t\t\tif (d3forceSimulation.alpha() < 0.4) {\r\n\t\t\t\t\td3forceSimulation.alpha(0.4);\r\n\t\t\t\t\td3forceSimulation.restart();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns maximum value from all supplied data items.\r\n\t *\r\n\t * @ignore\r\n\t * @param   dataItems  List of data items\r\n\t * @param   max        Default max\r\n\t * @return             Max\r\n\t */\r\n\tprotected getMaxValue(dataItems: OrderedListTemplate<ForceDirectedSeriesDataItem>, max: number): number {\r\n\t\tdataItems.each((dataItem) => {\r\n\t\t\tif (dataItem.value > max) {\r\n\t\t\t\tmax = dataItem.value;\r\n\t\t\t}\r\n\r\n\t\t\tif (dataItem.children) {\r\n\t\t\t\tlet cmax = this.getMaxValue(dataItem.children, max);\r\n\t\t\t\tif (cmax > max) {\r\n\t\t\t\t\tmax = cmax;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\t\treturn max;\r\n\t}\r\n\r\n\t/**\r\n\t * Validates (processes) data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems(): void {\r\n\r\n\t\tif (this.chart.__disabled) {\r\n\t\t\tsuper.validateDataItems();\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis._dataDisposers.push(new ListDisposer(this.links));\r\n\r\n\t\tthis._maxValue = this.getMaxValue(this.dataItems, 0);\r\n\r\n\t\tthis.forceLinks = [];\r\n\r\n\t\tthis.colors.reset();\r\n\r\n\t\tlet index = 0;\r\n\r\n\t\tlet radius = Math.min(this.innerHeight / 3, this.innerWidth / 3);\r\n\r\n\t\tif (this.dataItems.length <= 1) {\r\n\t\t\tradius = 0;\r\n\t\t}\r\n\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\r\n\t\t\tlet angle = index / this.dataItems.length * 360;\r\n\r\n\t\t\tlet node = dataItem.node;\r\n\r\n\t\t\tlet xField = node.propertyFields.x;\r\n\t\t\tlet yField = node.propertyFields.y;\r\n\r\n\t\t\tif (xField && $type.hasValue((<any>dataItem.dataContext)[xField])) {\r\n\t\t\t\tnode.x = (<any>dataItem.dataContext)[xField];\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tnode.x = this.innerWidth / 2 + radius * $math.cos(angle);\r\n\t\t\t}\r\n\t\t\tif (yField && $type.hasValue((<any>dataItem.dataContext)[yField])) {\r\n\t\t\t\tnode.y = (<any>dataItem.dataContext)[yField];\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tnode.y = this.innerHeight / 2 + radius * $math.sin(angle);\r\n\t\t\t}\r\n\r\n\t\t\tdataItem.node.fill = dataItem.color;\r\n\t\t\tdataItem.node.stroke = dataItem.color;\r\n\r\n\t\t\tindex++;\r\n\r\n\t\t\tthis.initNode(dataItem);\r\n\t\t})\r\n\r\n\t\tif (this.dataFields.linkWith) {\r\n\t\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\t\tthis.processLinkWith(dataItem);\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tlet d3forceSimulation = this.d3forceSimulation;\r\n\r\n\t\td3forceSimulation.on(\"tick\", () => {\r\n\t\t\tthis.updateLinksAndNodes();\r\n\t\t});\r\n\r\n\t\t// helps to avoid initial scatter\r\n\t\tfor (let i = 0; i < 10; i++) {\r\n\t\t\td3forceSimulation.tick();\r\n\t\t}\r\n\t\td3forceSimulation.alphaDecay(1 - Math.pow(0.001, 1 / 600));\r\n\r\n\t\tthis.chart.feedLegend();\r\n\r\n\t\tsuper.validateDataItems();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic handleFixed(dataItem: this[\"_dataItem\"]) {\r\n\t\tlet node = dataItem.node;\r\n\r\n\t\tlet xField = node.propertyFields.x;\r\n\t\tlet yField = node.propertyFields.y;\r\n\r\n\t\tif (xField && $type.hasValue((<any>dataItem.dataContext)[xField])) {\r\n\t\t\tnode.x = (<any>dataItem.dataContext)[xField];\r\n\t\t}\r\n\r\n\t\tif (yField && $type.hasValue((<any>dataItem.dataContext)[yField])) {\r\n\t\t\tnode.y = (<any>dataItem.dataContext)[yField];\r\n\t\t}\r\n\r\n\t\tif (dataItem.fixed) {\r\n\r\n\t\t\tif (node.x instanceof Percent) {\r\n\t\t\t\t(<any>node).fx = $utils.relativeToValue(node.x, this.innerWidth);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t(<any>node).fx = node.x;\r\n\t\t\t}\r\n\r\n\t\t\tif (node.y instanceof Percent) {\r\n\t\t\t\t(<any>node).fy = $utils.relativeToValue(node.y, this.innerHeight);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t(<any>node).fy = node.y;\r\n\t\t\t}\r\n\r\n\t\t\tnode.draggable = this.dragFixedNodes;\r\n\r\n\t\t\tnode.validate(); // for links to redraw\r\n\t\t}\r\n\t\telse {\r\n\t\t\t(<any>node).fx = undefined;\r\n\t\t\t(<any>node).fy = undefined;\r\n\t\t\tnode.draggable = true;\r\n\t\t}\r\n\r\n\t\tif (dataItem && dataItem.children) {\r\n\t\t\tdataItem.children.each((di) => {\r\n\t\t\t\tthis.handleFixed(di)\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @todo description\r\n\t */\r\n\tpublic updateNodeList() {\r\n\t\tlet d3forceSimulation = this.d3forceSimulation;\r\n\t\td3forceSimulation.nodes(this.nodes.values);\r\n\t\tthis._linkForce = d3force.forceLink(this.forceLinks);\r\n\t\td3forceSimulation.force(\"link\", this._linkForce);\r\n\t\tthis._collisionForce = d3force.forceCollide();\r\n\t\td3forceSimulation.force(\"collision\", this._collisionForce);\r\n\r\n\t\tlet w = $math.max(50, this.innerWidth);\r\n\t\tlet h = $math.max(50, this.innerHeight);\r\n\r\n\t\td3forceSimulation.force(\"x\", d3force.forceX().x(w / 2).strength(this.centerStrength * 100 / w));\r\n\t\td3forceSimulation.force(\"y\", d3force.forceY().y(h / 2).strength(this.centerStrength * 100 / h));\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @todo description\r\n\t */\r\n\tpublic updateLinksAndNodes() {\r\n\t\tif (this._linkForce) {\r\n\t\t\tthis._linkForce.distance((linkDatum) => {\r\n\t\t\t\treturn this.getDistance(linkDatum)\r\n\t\t\t});\r\n\t\t\tthis._linkForce.strength((linkDatum) => {\r\n\t\t\t\treturn this.getStrength(linkDatum)\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif (this._collisionForce) {\r\n\t\t\tthis._collisionForce.radius(function(node) {\r\n\t\t\t\tif (node instanceof ForceDirectedNode) {\r\n\t\t\t\t\tlet radius = node.circle.pixelRadius;\r\n\t\t\t\t\tif (!node.outerCircle.__disabled && !node.outerCircle.disabled && node.outerCircle.visible) {\r\n\t\t\t\t\t\tradius = (radius + 3) * node.outerCircle.scale;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn radius + node.paddingRadius;\r\n\t\t\t\t}\r\n\t\t\t\treturn 1;\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tthis.d3forceSimulation.force(\"manybody\", d3force.forceManyBody().strength((node) => {\r\n\t\t\tif (node instanceof ForceDirectedNode) {\r\n\t\t\t\treturn node.circle.pixelRadius * this.manyBodyStrength;\r\n\t\t\t}\r\n\t\t\treturn this.manyBodyStrength;\r\n\t\t}));\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @todo description\r\n\t */\r\n\tprotected getDistance(linkDatum: d3force.SimulationLinkDatum<d3force.SimulationNodeDatum>) {\r\n\t\tlet source: ForceDirectedNode = <ForceDirectedNode>linkDatum.source;\r\n\t\tlet target: ForceDirectedNode = <ForceDirectedNode>linkDatum.target;\r\n\r\n\t\tlet distance = 0;\r\n\t\tif (target.dataItem && source.dataItem) {\r\n\r\n\r\n\t\t\tlet link = source.linksWith.getKey(target.uid);\r\n\r\n\t\t\tif (link) {\r\n\t\t\t\tdistance = link.distance;\r\n\t\t\t}\r\n\r\n\t\t\tif (!source.isActive) {\r\n\t\t\t\tdistance = 1;\r\n\t\t\t}\r\n\r\n\t\t\tif (target.isHidden) {\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\r\n\t\t\treturn (distance * (source.circle.pixelRadius + target.circle.pixelRadius));\r\n\t\t}\r\n\r\n\t\treturn distance;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @todo description\r\n\t */\r\n\tprotected getStrength(linkDatum: d3force.SimulationLinkDatum<d3force.SimulationNodeDatum>) {\r\n\t\tlet source: ForceDirectedNode = <ForceDirectedNode>linkDatum.source;\r\n\t\tlet target: ForceDirectedNode = <ForceDirectedNode>linkDatum.target;\r\n\r\n\t\tlet strength = 0;\r\n\r\n\t\tlet link = source.linksWith.getKey(target.uid);\r\n\t\tif (link) {\r\n\t\t\tstrength = link.strength;\r\n\t\t}\r\n\r\n\t\tif (target.isHidden) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\treturn strength;\r\n\t}\r\n\r\n\t/**\r\n\t * Handler for drag end event.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tpublic nodeDragEnded(): void {\r\n\t\tthis.d3forceSimulation.alphaTarget(0);\r\n\t}\r\n\t/**\r\n\t * Handler for drag start event.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tpublic nodeDragStarted(): void {\r\n\t\tthis.d3forceSimulation.alpha(0.1);\r\n\t\tthis.d3forceSimulation.restart();\r\n\t}\r\n\r\n\t/**\r\n\t * Resets positions of whole tree.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tpublic restartSimulation(): void {\r\n\t\tif (this.d3forceSimulation.alpha() <= 0.3) {\r\n\t\t\tthis.d3forceSimulation.alpha(0.3);\r\n\t\t\tthis.d3forceSimulation.restart();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected updateRadiuses(dataItems: OrderedListTemplate<ForceDirectedSeriesDataItem>) {\r\n\t\tdataItems.each((dataItem) => {\r\n\t\t\tthis.updateRadius(dataItem);\r\n\t\t\tif (dataItem.childrenInited) {\r\n\t\t\t\tthis.updateRadiuses(dataItem.children);\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected updateRadius(dataItem: ForceDirectedSeriesDataItem) {\r\n\t\tlet node = dataItem.node;\r\n\t\tlet minSide = (this.innerWidth + this.innerHeight) / 2;\r\n\t\tlet minRadius = $utils.relativeToValue(this.minRadius, minSide)\r\n\t\tlet maxRadius = $utils.relativeToValue(this.maxRadius, minSide)\r\n\r\n\t\tlet radius = minRadius + dataItem.value / this._maxValue * (maxRadius - minRadius);\r\n\r\n\t\tif (!$type.isNumber(radius)) {\r\n\t\t\tradius = minRadius;\r\n\t\t}\r\n\r\n\t\t//if(!node.circle.isHidden){\r\n\t\tnode.circle.radius = radius;\r\n\t\t//}\r\n\t\tnode.outerCircle.radius = radius + 3;\r\n\r\n\t\tnode.circle.states.getKey(\"active\").properties.radius = radius;\r\n\t\tnode.circle.defaultState.properties.radius = radius;\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes node.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tpublic initNode(dataItem: ForceDirectedSeriesDataItem): void {\r\n\r\n\t\tlet node = dataItem.node;\r\n\t\tnode.parent = this;\r\n\t\tthis.updateRadius(dataItem);\r\n\r\n\t\t//let nodeIndex = this.nodes.indexOf(dataItem.node);\r\n\r\n\t\tif (!dataItem.children || dataItem.children.length == 0) {\r\n\t\t\tnode.outerCircle.disabled = true;\r\n\t\t\tnode.circle.interactionsEnabled = true;\r\n\t\t\tnode.cursorOverStyle = MouseCursorStyle.default;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tnode.cursorOverStyle = MouseCursorStyle.pointer;\r\n\t\t}\r\n\r\n\r\n\t\tif (this.dataItemsInvalid && (dataItem.level >= this.maxLevels - 1 || dataItem.collapsed)) {\r\n\t\t\tnode.isActive = false;\r\n\t\t\tthis.updateNodeList();\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (!node.isActive) {\r\n\t\t\tnode.hide(0);\r\n\t\t}\r\n\r\n\t\tthis.handleFixed(dataItem);\r\n\r\n\t\tif (dataItem.children) {\r\n\t\t\tlet index = 0;\r\n\t\t\tdataItem.childrenInited = true;\r\n\r\n\t\t\tif (this.dataItems.length == 1 && dataItem.level == 0) {\r\n\t\t\t\tthis.colors.next();\r\n\t\t\t}\r\n\r\n\t\t\tdataItem.children.each((child) => {\r\n\t\t\t\t/*\r\n\t\t\t\tlet link = this.links.create();\r\n\t\t\t\tlink.parent = this;\r\n\t\t\t\tlink.zIndex = -1;\r\n\t\t\t\tdataItem.childLinks.push(link);\r\n\t\t\t\tlink.source = dataItem.node;\r\n\t\t\t\tlet childIndex = this.nodes.indexOf(child.node);\r\n\t\t\t\tlink.target = child.node;\r\n\t\t\t\tchild.parentLink = link;\r\n\r\n\t\t\t\tthis._forceLinks.push({ source: nodeIndex, target: childIndex });\r\n\t\t\t\t*/\r\n\r\n\t\t\t\tlet link = node.linkWith(child.node);\r\n\t\t\t\tchild.parentLink = link;\r\n\r\n\t\t\t\tlet radius = 2 * node.circle.pixelRadius + child.node.circle.pixelRadius;\r\n\r\n\t\t\t\tlet angle = index / dataItem.children.length * 360;\r\n\r\n\t\t\t\tchild.node.x = node.pixelX + radius * $math.cos(angle);\r\n\t\t\t\tchild.node.y = node.pixelY + radius * $math.sin(angle);\r\n\r\n\t\t\t\tchild.node.circle.radius = 0;\r\n\r\n\t\t\t\tlet color: Color | LinearGradient | RadialGradient | Pattern;\r\n\r\n\t\t\t\tlet diColor = child.properties.color;\r\n\t\t\t\tif ($type.hasValue(diColor)) {\r\n\t\t\t\t\tcolor = diColor;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (this.dataItems.length == 1 && dataItem.level == 0) {\r\n\t\t\t\t\t\tcolor = this.colors.next();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tcolor = dataItem.color;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tchild.color = color;\r\n\t\t\t\tchild.node.fill = color;\r\n\t\t\t\tchild.node.stroke = color;\r\n\t\t\t\tchild.parentLink.stroke = color;\r\n\r\n\t\t\t\tchild.node.fill = child.node.fill;\r\n\t\t\t\tchild.node.stroke = child.node.stroke;\r\n\r\n\t\t\t\tthis.initNode(child);\r\n\r\n\t\t\t\tindex++;\r\n\t\t\t})\r\n\t\t}\r\n\t\tnode.isActive = true;\r\n\t\tnode.show();\r\n\t\tthis.updateNodeList();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @todo description\r\n\t */\r\n\tprotected processLinkWith(dataItem: ForceDirectedSeriesDataItem) {\r\n\r\n\t\tif (dataItem.linkWith) {\r\n\t\t\t$array.each(dataItem.linkWith, (id, index) => {\r\n\t\t\t\tlet dataItemToConnect = this.getDataItemById(this.dataItems, id);\r\n\r\n\t\t\t\tif (dataItemToConnect) {\r\n\t\t\t\t\tdataItem.node.linkWith(dataItemToConnect.node, this.linkWithStrength);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tif (dataItem.children) {\r\n\t\t\tdataItem.children.each((child) => {\r\n\t\t\t\tthis.processLinkWith(child);\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a [[ForceDirectedSeriesDataItem]] related to node by specific id.\r\n\t *\r\n\t * @param   dataItems  List of data items to search in\r\n\t * @param   id         Id to search for\r\n\t * @return             Data item\r\n\t */\r\n\tpublic getDataItemById(dataItems: OrderedListTemplate<ForceDirectedSeriesDataItem>, id: string): ForceDirectedSeriesDataItem {\r\n\t\tfor (let i = dataItems.length - 1; i >= 0; i--) {\r\n\t\t\tlet dataItem = dataItems.getIndex(i);\r\n\r\n\t\t\tif (dataItem.id == id) {\r\n\t\t\t\treturn dataItem;\r\n\t\t\t}\r\n\t\t\tif (dataItem.children) {\r\n\t\t\t\tlet di = this.getDataItemById(dataItem.children, id);\r\n\t\t\t\tif (di) {\r\n\t\t\t\t\treturn di;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new ForceDirectedSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * A list of nodes in series.\r\n\t *\r\n\t * @return  Node list\r\n\t */\r\n\tpublic get nodes(): ListTemplate<this[\"_node\"]> {\r\n\t\tif (!this._nodes) {\r\n\t\t\tlet node = this.createNode();\r\n\r\n\t\t\tnode.applyOnClones = true;\r\n\t\t\tthis._disposers.push(node);\r\n\r\n\t\t\tthis._nodes = new ListTemplate(node);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._nodes));\r\n\t\t}\r\n\t\treturn this._nodes;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of links between nodes.\r\n\t *\r\n\t * @return  Link list\r\n\t */\r\n\tpublic get links(): ListTemplate<this[\"_link\"]> {\r\n\t\tif (!this._links) {\r\n\t\t\tlet link = this.createLink();\r\n\t\t\tlink.applyOnClones = true;\r\n\t\t\tthis._disposers.push(link);\r\n\r\n\t\t\tthis._links = new ListTemplate(link);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._links));\r\n\t\t}\r\n\t\treturn this._links;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new node.\r\n\t */\r\n\tprotected createNode(): this[\"_node\"] {\r\n\t\treturn new ForceDirectedNode();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new link.\r\n\t */\r\n\tprotected createLink(): this[\"_link\"] {\r\n\t\treturn new ForceDirectedLink();\r\n\t}\r\n\r\n\t/**\r\n\t * Smallest possible radius in pixels of the node circle.\r\n\t *\r\n\t * If set in percent, it radius will be calculated from average width and\r\n\t * height of series.\r\n\t *\r\n\t * @default Percent(1)\r\n\t * @param  value  Minimum radius (px or percent)\r\n\t */\r\n\tpublic set minRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"minRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Minimum radius (px or percent)\r\n\t */\r\n\tpublic get minRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"minRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Biggest possible radius in pixels of the node circle.\r\n\t *\r\n\t * If set in percent, it radius will be calculated from average width and\r\n\t * height of series.\r\n\t *\r\n\t * @default Percent(8)\r\n\t * @param  value  Maximum radius (px or Percent)\r\n\t */\r\n\tpublic set maxRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"maxRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Maximum radius (px or Percent)\r\n\t */\r\n\tpublic get maxRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"maxRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * A color set to be used for nodes.\r\n\t *\r\n\t * iIt works like this:\r\n\t *\r\n\t * The first level with more than one node, assigns different colors to all\r\n\t * nodes in this list. Their child nodes inherit the color.\r\n\t *\r\n\t * For example, if the top level has one node with three children, the top\r\n\t * node will get first color, the first child will get second color, etc.\r\n\t *\r\n\t * If there are two top nodes, the first top node gets first color, the\r\n\t * second top node gets the second color. Their subsequent children inherit\r\n\t * colors.\r\n\t *\r\n\t * @param value  Color set\r\n\t */\r\n\tpublic set colors(value: ColorSet) {\r\n\t\tthis.setPropertyValue(\"colors\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Color set\r\n\t */\r\n\tpublic get colors(): ColorSet {\r\n\t\treturn this.getPropertyValue(\"colors\");\r\n\t}\r\n\r\n\t/**\r\n\t * Number of levels to be displayed initially.\r\n\t *\r\n\t * @param  value  Number of levels\r\n\t */\r\n\tpublic set maxLevels(value: number) {\r\n\t\tthis.setPropertyValue(\"maxLevels\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Number of levels\r\n\t */\r\n\tpublic get maxLevels(): number {\r\n\t\treturn this.getPropertyValue(\"maxLevels\");\r\n\t}\r\n\r\n\t/**\r\n\t * Relative strength each node pushes (or attracts) other nodes (it is\r\n\t * multiplied by `node.circle.radius` for big nodes to push stronger).\r\n\t *\r\n\t * Positive value will make nodes attract each other, while negative will\r\n\t * push away each other. The bigger the negative number is, the more\r\n\t * scattered nodes will be.\r\n\t *\r\n\t * Available value range: `-XX` to `XX`.\r\n\t *\r\n\t * @default -15\r\n\t * @param  value  Body push/attrack strength\r\n\t */\r\n\tpublic set manyBodyStrength(value: number) {\r\n\t\tif (this.setPropertyValue(\"manyBodyStrength\", value)) {\r\n\t\t\tthis.restartSimulation();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return  Body push/attrack strength\r\n\t */\r\n\tpublic get manyBodyStrength(): number {\r\n\t\treturn this.getPropertyValue(\"manyBodyStrength\");\r\n\t}\r\n\r\n\t/**\r\n\t * Relative strength each child node is pushes (or attracted) to the center\r\n\t * of the chart.\r\n\t *\r\n\t * Positive value will make nodes to be attracted to center, while negative\r\n\t * will push them away.\r\n\t *\r\n\t * Available value range: `-50` to `50`.\r\n\t *\r\n\t * @default 0.8\r\n\t * @param  value  Stregth of attraction to center\r\n\t */\r\n\tpublic set centerStrength(value: number) {\r\n\t\tif (this.setPropertyValue(\"centerStrength\", value)) {\r\n\t\t\tthis.restartSimulation();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return  Stregth of attraction to center\r\n\t */\r\n\tpublic get centerStrength(): number {\r\n\t\treturn this.getPropertyValue(\"centerStrength\");\r\n\t}\r\n\r\n\t/**\r\n\t * Relative attraction strength between the nodes connected with `linkWith`.\r\n\t *\r\n\t * @since 4.4.8\r\n\t * @param  value  Strength\r\n\t * @default undefined\r\n\t */\r\n\tpublic set linkWithStrength(value: number) {\r\n\t\tif (this.setPropertyValue(\"linkWithStrength\", value)) {\r\n\t\t\tthis.restartSimulation();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Strength\r\n\t */\r\n\tpublic get linkWithStrength(): number {\r\n\t\treturn this.getPropertyValue(\"linkWithStrength\");\r\n\t}\r\n\r\n\t/**\r\n\t * The bigger the number the more slowly the nodes will move. Think of it as\r\n\t * friction.\r\n\t *\r\n\t * @since 4.9.2\r\n\t * @param  value  Velocity decay\r\n\t * @default 0.4\r\n\t */\r\n\tpublic set velocityDecay(value: number) {\r\n\t\tif (this.setPropertyValue(\"velocityDecay\", value)) {\r\n\t\t\tthis.d3forceSimulation.velocityDecay(value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Velocity decay\r\n\t */\r\n\tpublic get velocityDecay(): number {\r\n\t\treturn this.getPropertyValue(\"velocityDecay\");\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies if user can drag fixed nodes.\r\n\t *\r\n\t * @since 4.9.0\r\n\t * @default false\r\n\t * @param  value  Allow drag fixed nodes?\r\n\t */\r\n\tpublic set dragFixedNodes(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"dragFixedNodes\", value)) {\r\n\t\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\t\tthis.handleFixed(dataItem);\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Allow drag fixed nodes?\r\n\t */\r\n\tpublic get dragFixedNodes(): boolean {\r\n\t\treturn this.getPropertyValue(\"dragFixedNodes\");\r\n\t}\r\n\r\n\t/**\r\n\t * Binds related legend data item's visual settings to this series' visual\r\n\t * settings.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker    Container\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic createLegendMarker(marker: Container, dataItem?: this[\"_dataItem\"]): void {\r\n\t\tmarker.children.each((child) => {\r\n\t\t\tlet node = dataItem.node;\r\n\r\n\t\t\tif (child instanceof RoundedRectangle) {\r\n\t\t\t\tchild.cornerRadius(40, 40, 40, 40);\r\n\t\t\t}\r\n\r\n\r\n\t\t\tchild.defaultState.properties.fill = node.fill;\r\n\t\t\tchild.defaultState.properties.stroke = node.stroke;\r\n\t\t\tchild.defaultState.properties.fillOpacity = node.fillOpacity;\r\n\t\t\tchild.defaultState.properties.strokeOpacity = node.strokeOpacity;\r\n\r\n\t\t\tchild.fill = node.fill;\r\n\t\t\tchild.stroke = node.stroke;\r\n\t\t\tchild.fillOpacity = node.fillOpacity;\r\n\t\t\tchild.strokeOpacity = node.strokeOpacity;\r\n\r\n\t\t\tif (child.fill == undefined) {\r\n\t\t\t\tchild.__disabled = true;\r\n\t\t\t}\r\n\r\n\t\t\tlet legendDataItem = <LegendDataItem>marker.dataItem;\r\n\t\t\tlegendDataItem.color = node.fill;\r\n\t\t\tlegendDataItem.colorOrig = node.fill;\r\n\r\n\t\t\tnode.events.on(\"propertychanged\", (ev) => {\r\n\t\t\t\tif (ev.property == \"fill\") {\r\n\r\n\t\t\t\t\tchild.__disabled = false;\r\n\r\n\t\t\t\t\tif (!child.isActive) {\r\n\t\t\t\t\t\tchild.fill = node.fill;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tchild.defaultState.properties.fill = node.fill;\r\n\t\t\t\t\tlegendDataItem.color = node.fill;\r\n\t\t\t\t\tlegendDataItem.colorOrig = node.fill;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (ev.property == \"stroke\") {\r\n\t\t\t\t\tif (!child.isActive) {\r\n\t\t\t\t\t\tchild.stroke = node.stroke;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tchild.defaultState.properties.stroke = node.stroke;\r\n\t\t\t\t}\r\n\t\t\t}, undefined, false)\r\n\t\t});\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ForceDirectedSeries\"] = ForceDirectedSeries;\r\nregistry.registeredClasses[\"ForceDirectedSeriesDataItem\"] = ForceDirectedSeriesDataItem;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}