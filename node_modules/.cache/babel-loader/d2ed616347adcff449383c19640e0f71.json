{"ast":null,"code":"/**\r\n * Module that defines everything related to building ForceDirectedNodes.\r\n *\r\n * It is a container which has ForceDirectedNode element which is a RoundedRectangle.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Container } from \"../../core/Container\";\nimport { registry } from \"../../core/Registry\";\nimport { Circle } from \"../../core/elements/Circle\";\nimport { Label } from \"../../core/elements/Label\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport * as $type from \"../../core/utils/Type\";\nimport { Dictionary, DictionaryDisposer } from \"../../core/utils/Dictionary\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Class used to creates [[ForceDirectedNode]] elements (circles).\r\n *\r\n * @see {@link IForceDirectedNodeEvents} for a list of available events\r\n * @see {@link IForceDirectedNodeAdapters} for a list of available Adapters\r\n * @since 4.3.8\r\n * @important\r\n */\n\nvar ForceDirectedNode =\n/** @class */\nfunction (_super) {\n  __extends(ForceDirectedNode, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function ForceDirectedNode() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"ForceDirectedNode\"; //this.isMeasured = true; // for correct position of the tooltip\n\n    _this.applyOnClones = true;\n    _this.togglable = true;\n    _this.draggable = true;\n    _this.setStateOnChildren = true;\n    _this.isActive = false;\n    _this.expandAll = true;\n    _this.paddingRadius = 0;\n    _this.linksWith = new Dictionary();\n\n    _this._disposers.push(new DictionaryDisposer(_this.linksWith));\n\n    _this.events.on(\"dragstart\", function () {\n      if (_this.dataItem.component) {\n        _this.dataItem.component.nodeDragStarted();\n      }\n    }, _this, false);\n\n    _this.events.on(\"drag\", function () {\n      _this.updateSimulation();\n    }, _this, false);\n\n    var outerCircle = _this.createChild(Circle);\n\n    outerCircle.shouldClone = false;\n    outerCircle.strokeWidth = 2;\n    outerCircle.nonScalingStroke = true;\n    var bgColor = new InterfaceColorSet().getFor(\"background\");\n    outerCircle.fill = bgColor;\n    _this.outerCircle = outerCircle;\n    var hoverState = outerCircle.states.create(\"hover\");\n    hoverState.properties.scale = 1.1;\n    var outerActiveState = outerCircle.states.create(\"active\");\n    outerActiveState.properties.scale = 1.1;\n    outerActiveState.properties.visible = true;\n    var activeHoverState = outerCircle.states.create(\"hoverActive\");\n    activeHoverState.properties.scale = 1;\n\n    var circle = _this.createChild(Circle);\n\n    var activeState = circle.states.create(\"active\");\n    activeState.properties.visible = true;\n    circle.shouldClone = false;\n    circle.interactionsEnabled = false;\n    circle.hiddenState.properties.radius = 0.01;\n    circle.events.on(\"validated\", _this.updateSimulation, _this, false);\n    circle.hiddenState.properties.visible = true;\n    _this.circle = circle;\n\n    _this.addDisposer(circle.events.on(\"validated\", _this.updateLabelSize, _this, false));\n\n    _this._disposers.push(_this.circle);\n\n    var label = _this.createChild(Label);\n\n    label.shouldClone = false;\n    label.horizontalCenter = \"middle\";\n    label.verticalCenter = \"middle\";\n    label.fill = bgColor;\n    label.strokeOpacity = 0;\n    label.interactionsEnabled = false;\n    label.textAlign = \"middle\";\n    label.textValign = \"middle\";\n    label.nonScaling = true;\n    _this.label = label;\n\n    _this.adapter.add(\"tooltipY\", function (y, target) {\n      return -target.circle.pixelRadius;\n    });\n\n    return _this;\n  }\n  /**\r\n   * @ignore\r\n   */\n\n\n  ForceDirectedNode.prototype.updateLabelSize = function () {\n    if (this.label.text) {\n      var circle = this.circle;\n      var radius = circle.pixelRadius;\n      var ds = circle.defaultState;\n      var dsRadius = ds.properties.radius;\n\n      if ($type.isNumber(dsRadius)) {\n        radius = dsRadius;\n      }\n\n      this.label.width = 2 * radius;\n      this.label.height = 2 * radius;\n    }\n  };\n  /**\r\n   * Copies all parameters from another [[ForceDirectedNode]].\r\n   *\r\n   * @param source Source ForceDirectedNode\r\n   */\n\n\n  ForceDirectedNode.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n\n    if (this.circle) {\n      this.circle.copyFrom(source.circle);\n    }\n\n    if (this.label) {\n      this.label.copyFrom(source.label);\n    }\n\n    if (this.outerCircle) {\n      this.outerCircle.copyFrom(source.outerCircle);\n    }\n  };\n  /**\r\n   * Sets node as \"active\" (expanded).\r\n   *\r\n   * @ignore\r\n   * @param  value  Active or not?\r\n   */\n\n\n  ForceDirectedNode.prototype.setActive = function (value) {\n    var _this = this;\n\n    _super.prototype.setActive.call(this, value);\n\n    var dataItem = this.dataItem;\n\n    if (dataItem) {\n      var children = dataItem.children;\n      var component = dataItem.component;\n\n      if (!component.dataItemsInvalid) {\n        if (value && children && !dataItem.childrenInited) {\n          component.initNode(dataItem);\n          component.updateNodeList();\n        }\n\n        if (value) {\n          this.show();\n\n          if (children) {\n            children.each(function (child) {\n              child.node.show();\n              child.node.interactionsEnabled = true;\n\n              if (child.parentLink) {\n                child.parentLink.show();\n              }\n\n              if (_this.expandAll) {\n                child.node.isActive = true;\n              } else {\n                child.node.isActive = false; //child.node.hide(0)\n              }\n            });\n          }\n\n          dataItem.dispatchVisibility(true);\n        } else {\n          if (children) {\n            children.each(function (child) {\n              if (child.parentLink) {\n                child.parentLink.hide();\n              }\n\n              child.node.isActive = false;\n              child.node.interactionsEnabled = false;\n              child.node.hide();\n            });\n          }\n\n          dataItem.dispatchVisibility(false);\n        }\n      }\n    }\n\n    this.updateSimulation();\n  };\n  /**\r\n   * @ignore\r\n   * @todo description\r\n   */\n\n\n  ForceDirectedNode.prototype.updateSimulation = function () {\n    var dataItem = this.dataItem;\n\n    if (dataItem && dataItem.component) {\n      dataItem.component.restartSimulation();\n    }\n  };\n\n  Object.defineProperty(ForceDirectedNode.prototype, \"expandAll\", {\n    /**\r\n     * @return Expand all?\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"expandAll\");\n    },\n\n    /**\r\n     * If set to `true` (default) toggling a node on will automatically expand\r\n     * all nodes across the whole tree (all levels) of its descendants.\r\n     *\r\n     * Setting to `false` will only expand immediate children (one level).\r\n     *\r\n     * @default true\r\n     * @since 4.4.8\r\n     * @param  value  Expand all?\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"expandAll\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Creates a new link between two nodes.\r\n   *\r\n   * Use this method to dynamically add links without requiring to revalidate\r\n   * whole of the data.\r\n   *\r\n   * @since 4.4.8\r\n   * @param   node      Target node\r\n   * @param   strength  Link strength\r\n   * @return            New link\r\n   */\n\n  ForceDirectedNode.prototype.linkWith = function (node, strength) {\n    var link = this.linksWith.getKey(node.uid);\n\n    if (!link) {\n      link = node.linksWith.getKey(this.uid);\n    }\n\n    if (!link) {\n      var dataItem = this.dataItem;\n      var component = dataItem.component;\n      link = component.links.create();\n      link.parent = component;\n      link.zIndex = -1;\n      link.source = this;\n      link.target = node;\n      link.stroke = dataItem.node.fill;\n      link.dataItem = node.dataItem;\n\n      if ($type.isNumber(strength)) {\n        link.strength = strength;\n      }\n\n      var nodeIndex = component.nodes.indexOf(dataItem.node);\n      var childIndex = component.nodes.indexOf(node);\n      component.forceLinks.push({\n        source: nodeIndex,\n        target: childIndex\n      });\n      component.updateNodeList();\n      dataItem.childLinks.push(link);\n      this.linksWith.setKey(node.uid, link);\n    }\n\n    return link;\n  };\n  /**\r\n   * Removes a link between two nodes.\r\n   *\r\n   * @since 4.4.8\r\n   * @param  node  Target node\r\n   */\n\n\n  ForceDirectedNode.prototype.unlinkWith = function (node) {\n    this.linksWith.removeKey(node.uid);\n  };\n\n  Object.defineProperty(ForceDirectedNode.prototype, \"paddingRadius\", {\n    /**\r\n     * @return Padding radius\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"paddingRadius\");\n    },\n\n    /**\r\n     * Padding of the nodes, in pixels.\r\n     *\r\n     * @since 4.6.7\r\n     * @default 0\r\n     * @param  value  padding radius\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"paddingRadius\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return ForceDirectedNode;\n}(Container);\n\nexport { ForceDirectedNode };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"ForceDirectedNode\"] = ForceDirectedNode;","map":{"version":3,"sources":["../../../../../src/.internal/plugins/forceDirected/ForceDirectedNode.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Module that defines everything related to building ForceDirectedNodes.\r\n * \r\n * It is a container which has ForceDirectedNode element which is a RoundedRectangle.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { ForceDirectedSeriesDataItem } from \"./ForceDirectedSeries\";\r\nimport { ForceDirectedLink } from \"./ForceDirectedLink\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Dictionary, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ForceDirectedNode]].\r\n */\r\nexport interface IForceDirectedNodeProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * If set to `true` (default) toggling a node on will automatically expand\r\n\t * all nodes across the whole tree (all levels) of its descendants.\r\n\t *\r\n\t * Setting to `false` will only expand immediate children (one level).\r\n\t */\r\n\texpandAll?: boolean;\r\n\r\n\t/**\r\n\t * Padding of the nodes, in pixels.\r\n\t */\r\n\tpaddingRadius?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[ForceDirectedNode]].\r\n */\r\nexport interface IForceDirectedNodeEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ForceDirectedNode]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IForceDirectedNodeAdapters extends IContainerAdapters, IForceDirectedNodeProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates [[ForceDirectedNode]] elements (circles).\r\n *\r\n * @see {@link IForceDirectedNodeEvents} for a list of available events\r\n * @see {@link IForceDirectedNodeAdapters} for a list of available Adapters\r\n * @since 4.3.8\r\n * @important\r\n */\r\nexport class ForceDirectedNode extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IForceDirectedNodeProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IForceDirectedNodeAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IForceDirectedNodeEvents;\r\n\r\n\t/**\r\n\t * A node's [[Circle]] element.\r\n\t */\r\n\tpublic circle: Circle;\r\n\r\n\t/**\r\n\t * A [[Circle]] element for node's outline. This outline is used on nodes\r\n\t * that have children.\r\n\t */\r\n\tpublic outerCircle: Circle;\r\n\r\n\t/**\r\n\t * Related data item.\r\n\t */\r\n\tpublic _dataItem: ForceDirectedSeriesDataItem;\r\n\r\n\t/**\r\n\t * Node's [[Label]] element.\r\n\t */\r\n\tpublic label: Label;\r\n\r\n\t/**\r\n\t * A list of other [[ForceDirectedNode]] elements this node is linked with\r\n\t * using `linkWith`.\r\n\t *\r\n\t * @since 4.4.8\r\n\t */\r\n\tpublic linksWith: Dictionary<string, ForceDirectedLink>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ForceDirectedNode\";\r\n\r\n\t\t//this.isMeasured = true; // for correct position of the tooltip\r\n\t\tthis.applyOnClones = true;\r\n\t\tthis.togglable = true;\r\n\t\tthis.draggable = true;\r\n\t\tthis.setStateOnChildren = true;\r\n\r\n\t\tthis.isActive = false;\r\n\t\tthis.expandAll = true;\r\n\t\tthis.paddingRadius = 0;\r\n\r\n\t\tthis.linksWith = new Dictionary<string, ForceDirectedLink>()\r\n\t\tthis._disposers.push(new DictionaryDisposer(this.linksWith));\r\n\r\n\t\tthis.events.on(\"dragstart\", () => {\r\n\t\t\tif (this.dataItem.component) {\r\n\t\t\t\tthis.dataItem.component.nodeDragStarted();\r\n\t\t\t}\r\n\t\t}, this, false);\r\n\r\n\t\tthis.events.on(\"drag\", () => {\r\n\t\t\tthis.updateSimulation();\r\n\t\t}, this, false);\r\n\r\n\t\tlet outerCircle = this.createChild(Circle);\r\n\t\touterCircle.shouldClone = false;\r\n\t\touterCircle.strokeWidth = 2;\r\n\t\touterCircle.nonScalingStroke = true;\r\n\r\n\t\tlet bgColor = new InterfaceColorSet().getFor(\"background\");\r\n\t\touterCircle.fill = bgColor;\r\n\t\tthis.outerCircle = outerCircle;\r\n\r\n\t\tlet hoverState = outerCircle.states.create(\"hover\");\r\n\t\thoverState.properties.scale = 1.1;\r\n\r\n\t\tlet outerActiveState = outerCircle.states.create(\"active\");\r\n\t\touterActiveState.properties.scale = 1.1;\r\n\t\touterActiveState.properties.visible = true;\r\n\r\n\t\tlet activeHoverState = outerCircle.states.create(\"hoverActive\");\r\n\t\tactiveHoverState.properties.scale = 1;\r\n\r\n\t\tlet circle = this.createChild(Circle);\r\n\r\n\t\tlet activeState = circle.states.create(\"active\");\r\n\t\tactiveState.properties.visible = true;\r\n\r\n\t\tcircle.shouldClone = false;\r\n\t\tcircle.interactionsEnabled = false;\r\n\t\tcircle.hiddenState.properties.radius = 0.01;\r\n\t\tcircle.events.on(\"validated\", this.updateSimulation, this, false)\r\n\t\tcircle.hiddenState.properties.visible = true;\r\n\r\n\r\n\t\tthis.circle = circle;\r\n\r\n\t\tthis.addDisposer(circle.events.on(\"validated\", this.updateLabelSize, this, false));\r\n\r\n\t\tthis._disposers.push(this.circle);\r\n\r\n\t\tlet label = this.createChild(Label);\r\n\t\tlabel.shouldClone = false;\r\n\t\tlabel.horizontalCenter = \"middle\";\r\n\t\tlabel.verticalCenter = \"middle\";\r\n\t\tlabel.fill = bgColor;\r\n\t\tlabel.strokeOpacity = 0;\r\n\t\tlabel.interactionsEnabled = false;\r\n\t\tlabel.textAlign = \"middle\";\r\n\t\tlabel.textValign = \"middle\";\r\n\t\tlabel.nonScaling = true;\r\n\t\tthis.label = label;\r\n\r\n\t\tthis.adapter.add(\"tooltipY\", (y, target) => {\r\n\t\t\treturn -target.circle.pixelRadius;\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected updateLabelSize() {\r\n\t\tif (this.label.text) {\r\n\t\t\tlet circle = this.circle;\r\n\t\t\tlet radius = circle.pixelRadius;\r\n\r\n\t\t\tlet ds = circle.defaultState;\r\n\t\t\tlet dsRadius = ds.properties.radius\r\n\t\t\tif ($type.isNumber(dsRadius)) {\r\n\t\t\t\tradius = dsRadius;\r\n\t\t\t}\r\n\r\n\t\t\tthis.label.width = 2 * radius;\r\n\t\t\tthis.label.height = 2 * radius;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[ForceDirectedNode]].\r\n\t *\r\n\t * @param source Source ForceDirectedNode\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tif (this.circle) {\r\n\t\t\tthis.circle.copyFrom(source.circle);\r\n\t\t}\r\n\t\tif (this.label) {\r\n\t\t\tthis.label.copyFrom(source.label);\r\n\t\t}\r\n\t\tif (this.outerCircle) {\r\n\t\t\tthis.outerCircle.copyFrom(source.outerCircle);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets node as \"active\" (expanded).\r\n\t * \r\n\t * @ignore\r\n\t * @param  value  Active or not?\r\n\t */\r\n\tpublic setActive(value: boolean) {\r\n\t\tsuper.setActive(value);\r\n\r\n\t\tlet dataItem = this.dataItem;\r\n\r\n\t\tif (dataItem) {\r\n\r\n\r\n\t\t\tlet children = dataItem.children;\r\n\t\t\tlet component = dataItem.component;\r\n\t\t\tif (!component.dataItemsInvalid) {\r\n\t\t\t\tif (value && children && !dataItem.childrenInited) {\r\n\t\t\t\t\tcomponent.initNode(dataItem);\r\n\t\t\t\t\tcomponent.updateNodeList();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (value) {\r\n\t\t\t\t\tthis.show();\r\n\t\t\t\t\tif (children) {\r\n\t\t\t\t\t\tchildren.each((child) => {\r\n\t\t\t\t\t\t\tchild.node.show();\r\n\t\t\t\t\t\t\tchild.node.interactionsEnabled = true;\r\n\t\t\t\t\t\t\tif (child.parentLink) {\r\n\t\t\t\t\t\t\t\tchild.parentLink.show();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (this.expandAll) {\r\n\t\t\t\t\t\t\t\tchild.node.isActive = true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tchild.node.isActive = false;\r\n\t\t\t\t\t\t\t\t//child.node.hide(0)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdataItem.dispatchVisibility(true);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (children) {\r\n\t\t\t\t\t\tchildren.each((child) => {\r\n\t\t\t\t\t\t\tif (child.parentLink) {\r\n\t\t\t\t\t\t\t\tchild.parentLink.hide();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tchild.node.isActive = false;\r\n\t\t\t\t\t\t\tchild.node.interactionsEnabled = false;\r\n\r\n\t\t\t\t\t\t\tchild.node.hide();\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdataItem.dispatchVisibility(false);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.updateSimulation();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @todo description\r\n\t */\r\n\tprotected updateSimulation() {\r\n\t\tlet dataItem = this.dataItem;\r\n\t\tif (dataItem && dataItem.component) {\r\n\t\t\tdataItem.component.restartSimulation();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * If set to `true` (default) toggling a node on will automatically expand\r\n\t * all nodes across the whole tree (all levels) of its descendants.\r\n\t *\r\n\t * Setting to `false` will only expand immediate children (one level).\r\n\t * \r\n\t * @default true\r\n\t * @since 4.4.8\r\n\t * @param  value  Expand all?\r\n\t */\r\n\tpublic set expandAll(value: boolean) {\r\n\t\tthis.setPropertyValue(\"expandAll\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Expand all?\r\n\t */\r\n\tpublic get expandAll(): boolean {\r\n\t\treturn this.getPropertyValue(\"expandAll\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new link between two nodes.\r\n\t *\r\n\t * Use this method to dynamically add links without requiring to revalidate\r\n\t * whole of the data.\r\n\t * \r\n\t * @since 4.4.8\r\n\t * @param   node      Target node\r\n\t * @param   strength  Link strength\r\n\t * @return            New link\r\n\t */\r\n\tpublic linkWith(node: ForceDirectedNode, strength?: number): ForceDirectedLink {\r\n\t\tlet link = this.linksWith.getKey(node.uid);\r\n\t\tif (!link) {\r\n\t\t\tlink = node.linksWith.getKey(this.uid);\r\n\t\t}\r\n\r\n\t\tif (!link) {\r\n\t\t\tlet dataItem = this.dataItem;\r\n\t\t\tlet component = dataItem.component;\r\n\t\t\tlink = component.links.create();\r\n\t\t\tlink.parent = component;\r\n\t\t\tlink.zIndex = -1;\r\n\t\t\tlink.source = this;\r\n\t\t\tlink.target = node;\r\n\t\t\tlink.stroke = dataItem.node.fill;\r\n\r\n\t\t\tlink.dataItem = node.dataItem;\r\n\r\n\t\t\tif ($type.isNumber(strength)) {\r\n\t\t\t\tlink.strength = strength;\r\n\t\t\t}\r\n\r\n\t\t\tlet nodeIndex = component.nodes.indexOf(dataItem.node);\r\n\t\t\tlet childIndex = component.nodes.indexOf(node);\r\n\r\n\t\t\tcomponent.forceLinks.push({ source: nodeIndex, target: childIndex });\r\n\t\t\tcomponent.updateNodeList();\r\n\r\n\t\t\tdataItem.childLinks.push(link);\r\n\r\n\t\t\tthis.linksWith.setKey(node.uid, link);\r\n\t\t}\r\n\t\treturn link;\r\n\t}\r\n\r\n\t/**\r\n\t * Removes a link between two nodes.\r\n\t * \r\n\t * @since 4.4.8\r\n\t * @param  node  Target node\r\n\t */\r\n\tpublic unlinkWith(node: ForceDirectedNode) {\r\n\t\tthis.linksWith.removeKey(node.uid);\r\n\t}\r\n\r\n\t/**\r\n\t * Padding of the nodes, in pixels.\r\n\t * \r\n\t * @since 4.6.7\r\n\t * @default 0\r\n\t * @param  value  padding radius\r\n\t */\r\n\tpublic set paddingRadius(value: number) {\r\n\t\tthis.setPropertyValue(\"paddingRadius\", value);\r\n\t}\r\n\r\n\t/** \r\n\t * @return Padding radius\r\n\t */\r\n\tpublic get paddingRadius(): number {\r\n\t\treturn this.getPropertyValue(\"paddingRadius\");\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ForceDirectedNode\"] = ForceDirectedNode;"],"sourceRoot":""},"metadata":{},"sourceType":"module"}