{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/spenc/Documents/GitHub/hci-com/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\spenc\\\\Documents\\\\GitHub\\\\hci-com\\\\src\\\\containers\\\\Home\\\\components\\\\WaffleChart.tsx\",\n    _s2 = $RefreshSig$();\n\nimport React, { useRef, useLayoutEffect } from 'react';\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar user_id = \"634739719\";\nam4core.useTheme(am4themes_animated);\n/*\r\nfunction WaffleAny(ns: Number[], num_cols: number){\r\n  var datas = [];\r\n  var vals = [];\r\n  for (let n of ns){\r\n    vals.push(n.valueOf());\r\n  }\r\n\r\n  var l = vals.length;\r\n  \r\n  var tot = vals.reduce((a, b) => a + b, 0)\r\n\r\n  var nums = []\r\n  var last = 0\r\n\r\n  for (let i = 0; i < l; i++){\r\n    var num = vals[i] / tot;\r\n    nums.push(num);\r\n    last = num + last\r\n  }\r\n\r\n  var row = 1\r\n  var col = 1\r\n\r\n  var new_data_x = [];\r\n  var new_data_y = [];\r\n\r\n  for (let i = 1; i <= num_cols; i++) {\r\n    new_data_x.push({x : i.toString()});\r\n  }\r\n\r\n  for (let i = 1; i <= num_cols; i++) {\r\n    new_data_y.push({y : i.toString()});\r\n  }\r\n\r\n  var r_tot = 0\r\n\r\n  for (let h = 0; h <= (l-1); h++){\r\n    var data = [];\r\n    for (let i = r_tot; i < (r_tot + rs[h]); i++) {\r\n      var x_str = row.toString();\r\n      var y_str = col.toString();\r\n      data.push({ x: x_str, y: y_str});\r\n      if(col == num_cols){\r\n        row = row + 1;\r\n        col = 1\r\n      } else {\r\n        col = col + 1\r\n      }\r\n    }\r\n    datas.push(data)\r\n    r_tot = r_tot + rs[h];\r\n  }\r\n\r\n  var data = [];\r\n  for (let i = r_tot; i < num_cells; i++) {\r\n    var x_str = row.toString();\r\n    var y_str = col.toString();\r\n    data.push({ x: x_str, y: y_str});\r\n    if(col == num_cols){\r\n      row = row + 1;\r\n      col = 1\r\n    } else {\r\n      col = col + 1\r\n    }\r\n  }\r\n  datas.push(data);\r\n\r\n  return({data_list: datas,\r\n          data_x: new_data_x,\r\n          data_y: new_data_y});\r\n}\r\n*/\n\nfunction WaffleChart(props) {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const chart = useRef(null);\n  var rs = 3600;\n  var nrs = 6400;\n  useLayoutEffect(_s(() => {\n    _s();\n\n    let x = am4core.create(props.divid, am4charts.XYChart);\n    x.paddingRight = 20;\n    x.paddingLeft = 20;\n    /* Chart code */\n    // Themes begin\n\n    am4core.useTheme(am4themes_animated); // Themes end\n    // Chart\n\n    let chart = am4core.create(props.divid, am4charts.XYChart);\n    chart.hiddenState.properties.opacity = 0; // this creates initial fade-in\n    //chart.colors.step = 2;\n\n    switch (props.scheme) {\n      case \"followers\":\n        {\n          chart.colors.list = [am4core.color(\"#98a2df\"), am4core.color(\"#e96b6a\"), am4core.color(\"#a2df98\")];\n          break;\n        }\n\n      case \"tweets\":\n        {\n          chart.colors.list = [am4core.color(\"#CF30B2\"), am4core.color(\"#30B2CF\"), am4core.color(\"#B2CF30\")];\n          break;\n        }\n\n      default:\n        {\n          chart.colors.list = [am4core.color(\"#98a2df\"), am4core.color(\"#e96b6a\"), am4core.color(\"#a2df98\")];\n        }\n    } //chart.colors.list = [am4core.color( \"#98a2df\" ), am4core.color( \"#e96b6a\" ), am4core.color(\"#a2df98\")]\n    // X axis\n\n\n    let xAxis = chart.xAxes.push(new am4charts.CategoryAxis());\n    xAxis.dataFields.category = \"x\";\n    xAxis.renderer.grid.template.location = 0;\n    xAxis.renderer.minGridDistance = 10;\n    xAxis.renderer.labels.template.disabled = true;\n    xAxis.data = [{\n      x: \"1\"\n    }, {\n      x: \"2\"\n    }, {\n      x: \"3\"\n    }, {\n      x: \"4\"\n    }, {\n      x: \"5\"\n    }, {\n      x: \"6\"\n    }, {\n      x: \"7\"\n    }, {\n      x: \"8\"\n    }, {\n      x: \"9\"\n    }, {\n      x: \"10\"\n    }]; // Y axis\n\n    let yAxis = chart.yAxes.push(new am4charts.CategoryAxis());\n    yAxis.renderer.labels.template.disabled = true;\n    yAxis.renderer.grid.template.location = 0;\n    yAxis.renderer.minGridDistance = 10;\n    yAxis.dataFields.category = \"y\";\n    yAxis.data = [{\n      y: \"1\"\n    }, {\n      y: \"2\"\n    }, {\n      y: \"3\"\n    }, {\n      y: \"4\"\n    }, {\n      y: \"5\"\n    }, {\n      y: \"6\"\n    }, {\n      y: \"7\"\n    }, {\n      y: \"8\"\n    }, {\n      y: \"9\"\n    }, {\n      y: \"10\"\n    }]; // Create series\n\n    function createSeries(name) {\n      let series = chart.series.push(new am4charts.ColumnSeries());\n      series.dataFields.categoryX = \"x\";\n      series.dataFields.categoryY = \"y\";\n      series.sequencedInterpolation = true;\n      series.defaultState.transitionDuration = 3000;\n      series.name = name; // Set up column appearance\n\n      let column = series.columns.template;\n      column.strokeWidth = 1;\n      column.strokeOpacity = 1;\n      column.fillOpacity = 1;\n      column.stroke = am4core.color(\"#ffffff\");\n      column.width = am4core.percent(100);\n      column.height = am4core.percent(100); //column.column.cornerRadius(6, 6, 6, 6);\n\n      let hs = series.columns.template.states.create(\"active\");\n      hs.properties.fillOpacity = 0.5;\n      return series;\n    }\n\n    let series_list = [];\n    let data = JSON.parse(props.data);\n    console.log(data);\n    let nums_list = [];\n    let denom = 0;\n    /*\r\n    for (let i = 0; i < data.length; i++){\r\n      var num = new Number();\r\n      num = data[i]['data'];\r\n      denom = denom + vars[i]['data'];\r\n      nums_list.push(num);\r\n    }\r\n    \r\n    for (let i = 0; i < vars.length; i++){\r\n      var percent = vars[i]['data']/denom;\r\n      var rat = (percent * 100).toFixed(1).toString();\r\n      series_list.push(createSeries(vars[i]['name'] + \": \" + rat + \"% (\"  + nums_list[i].toString() + \")\" ));\r\n    }\r\n    \r\n    var datas = WaffleProportionAny(nums_list);\r\n    \r\n    for (let i = 0; i < vars.length; i++){\r\n      series_list[i].data = datas['data_list'][i]\r\n    }\r\n    \r\n    xAxis.data = datas['data_x']\r\n    yAxis.data = datas['data_y']\r\n    */\n    // Legend\n\n    chart.legend = new am4charts.Legend();\n    chart.legend.scrollable = true;\n    chart.legend.maxWidth = 120;\n    chart.legend.minWidth = 10;\n    chart.legend.labels.template.truncate = true;\n    chart.legend.itemContainers.template.tooltipText = \"{name}\";\n\n    switch (props.legend_pos) {\n      case \"right\":\n        {\n          chart.legend.position = \"right\";\n          break;\n        }\n\n      case \"left\":\n        {\n          chart.legend.position = \"left\";\n          break;\n        }\n\n      case \"top\":\n        {\n          chart.legend.position = \"top\";\n          break;\n        }\n\n      case \"bottom\":\n        {\n          chart.legend.position = \"bottom\";\n          break;\n        }\n\n      default:\n        {\n          chart.legend.position = \"right\";\n          break;\n        }\n    } //Custom code for legend\n\n\n    chart.legend.itemContainers.template.togglable = false;\n    var series_dict = {};\n    var keys = [];\n\n    for (let i = 0; i < data.length; i++) {\n      var key = series_list[i].name;\n      series_dict[key] = series_list[i]['columns']['template'];\n      keys.push(key);\n    }\n\n    chart.legend.itemContainers.template.events.on(\"hit\", function (ev) {\n      let seriesColumn = ev.target.dataItem.dataContext['columns']['template'];\n      let sname = ev.target.dataItem.dataContext['name'];\n      let other_series = [];\n\n      var _iterator = _createForOfIteratorHelper(keys),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          let k = _step.value;\n\n          if (sname != k) {\n            other_series.push(series_dict[k]);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      if (other_series[0].isActive) {\n        other_series.map(function (e) {\n          e.isActive = false;\n          return e;\n        });\n      } else {\n        other_series.map(function (e) {\n          e.isActive = true;\n          return e;\n        });\n      }\n\n      seriesColumn.isActive = false;\n    });\n    /*\r\n    let series1 = createSeries(\"Researchers\");\r\n    series1.data = [\r\n      { x: \"1\", y: \"1\" }\r\n    \r\n    ];\r\n    \r\n    let series2 = createSeries(\"Non-Researchers\");\r\n    series2.data = [\r\n      \r\n    \r\n      { x: \"7\", y: \"1\" }\r\n    ];\r\n    \r\n    var num1 = new Number(0)\r\n    num1 = props.r\r\n    var num2 = new Number(0)\r\n    num2 = props.n\r\n    \r\n    series1.name = \"Researchers: \" + num1.toString();\r\n    series2.name = \"Other: \" + num2.toString();\r\n    \r\n    //var datas = WaffleProportionCheat(num1, num2);\r\n    var datas = WaffleProportionAny([num1, num2]);\r\n    \r\n    //xAxis.data = datas[2];\r\n    //yAxis.data = datas[3];\r\n    \r\n    //series1.data = datas[0];\r\n    //series2.data = datas[1];\r\n    \r\n    series1.data = datas['data_list'][0]\r\n    series2.data = datas['data_list'][1]\r\n    \r\n    xAxis.data = datas['data_x']\r\n    yAxis.data = datas['data_y']\r\n    \r\n    // Legend\r\n    chart.legend = new am4charts.Legend();\r\n    chart.legend.position = \"right\";\r\n    chart.legend.scrollable = true;\r\n    chart.legend.maxWidth = 200;\r\n    \r\n    //Custom code for legend\r\n    chart.legend.itemContainers.template.togglable = false;\r\n    \r\n    var series_dict = {\r\n      [series1.name]: series1['columns']['template'],\r\n      [series2.name]: series2['columns']['template']\r\n    }\r\n    \r\n    var keys = [series1.name, series2.name]\r\n    \r\n    chart.legend.itemContainers.template.events.on(\"hit\", function(ev) {\r\n      let seriesColumn = ev.target.dataItem.dataContext['columns']['template'];\r\n      let sname = ev.target.dataItem.dataContext['name'];\r\n      let other_series = []\r\n      for (let k of keys){\r\n        if (sname != k){\r\n          other_series.push(series_dict[k]);\r\n        }\r\n      }\r\n      if (other_series[0].isActive){\r\n        other_series.map(function(e) { \r\n          e.isActive = false; \r\n          return e;\r\n        });\r\n      } else {\r\n        other_series.map(function(e) { \r\n          e.isActive = true; \r\n          return e;\r\n        });\r\n      }\r\n      seriesColumn.isActive = false;\r\n    });\r\n    \r\n    */\n  }, \"tFi1QeP7MrrEQ5RfFlomBKZonOc=\", false, function () {\n    return [am4core.useTheme];\n  }), []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: props.divid,\n      style: {\n        width: \"100%\",\n        height: \"250px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 348,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(WaffleChart, \"a4NZWiQVwnDvUnwE0MxHAIGLIqg=\");\n\n_c = WaffleChart;\nexport default WaffleChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"WaffleChart\");","map":{"version":3,"sources":["C:/Users/spenc/Documents/GitHub/hci-com/src/containers/Home/components/WaffleChart.tsx"],"names":["React","useRef","useLayoutEffect","am4core","am4charts","am4themes_animated","user_id","useTheme","WaffleChart","props","chart","rs","nrs","x","create","divid","XYChart","paddingRight","paddingLeft","hiddenState","properties","opacity","scheme","colors","list","color","xAxis","xAxes","push","CategoryAxis","dataFields","category","renderer","grid","template","location","minGridDistance","labels","disabled","data","yAxis","yAxes","y","createSeries","name","series","ColumnSeries","categoryX","categoryY","sequencedInterpolation","defaultState","transitionDuration","column","columns","strokeWidth","strokeOpacity","fillOpacity","stroke","width","percent","height","hs","states","series_list","JSON","parse","console","log","nums_list","denom","legend","Legend","scrollable","maxWidth","minWidth","truncate","itemContainers","tooltipText","legend_pos","position","togglable","series_dict","keys","i","length","key","events","on","ev","seriesColumn","target","dataItem","dataContext","sname","other_series","k","isActive","map","e"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,eAAxB,QAA+C,OAA/C;AAEA,OAAO,KAAKC,OAAZ,MAAyB,0BAAzB;AACA,OAAO,KAAKC,SAAZ,MAA2B,4BAA3B;AACA,OAAOC,kBAAP,MAA+B,qCAA/B;;AAMA,IAAIC,OAAO,GAAG,WAAd;AAEAH,OAAO,CAACI,QAAR,CAAiBF,kBAAjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASG,WAAT,CAAqBC,KAArB,EAA4B;AAAA;;AAAA;;AAC1B,QAAMC,KAAK,GAAGT,MAAM,CAAC,IAAD,CAApB;AAEA,MAAIU,EAAE,GAAG,IAAT;AACA,MAAIC,GAAG,GAAG,IAAV;AAEAV,EAAAA,eAAe,IAAC,MAAM;AAAA;;AACpB,QAAIW,CAAC,GAAGV,OAAO,CAACW,MAAR,CAAeL,KAAK,CAACM,KAArB,EAA4BX,SAAS,CAACY,OAAtC,CAAR;AAEAH,IAAAA,CAAC,CAACI,YAAF,GAAiB,EAAjB;AACAJ,IAAAA,CAAC,CAACK,WAAF,GAAgB,EAAhB;AAEA;AACJ;;AACAf,IAAAA,OAAO,CAACI,QAAR,CAAiBF,kBAAjB,EARwB,CASxB;AAEA;;AACA,QAAIK,KAAK,GAAGP,OAAO,CAACW,MAAR,CAAgBL,KAAK,CAACM,KAAtB,EAA6BX,SAAS,CAACY,OAAvC,CAAZ;AACAN,IAAAA,KAAK,CAACS,WAAN,CAAkBC,UAAlB,CAA6BC,OAA7B,GAAuC,CAAvC,CAbwB,CAakB;AAC1C;;AACA,YAAOZ,KAAK,CAACa,MAAb;AACE,WAAK,WAAL;AAAkB;AAChBZ,UAAAA,KAAK,CAACa,MAAN,CAAaC,IAAb,GAAoB,CAACrB,OAAO,CAACsB,KAAR,CAAe,SAAf,CAAD,EAA6BtB,OAAO,CAACsB,KAAR,CAAe,SAAf,CAA7B,EAAyDtB,OAAO,CAACsB,KAAR,CAAc,SAAd,CAAzD,CAApB;AACA;AACD;;AACD,WAAK,QAAL;AAAe;AACbf,UAAAA,KAAK,CAACa,MAAN,CAAaC,IAAb,GAAoB,CAACrB,OAAO,CAACsB,KAAR,CAAe,SAAf,CAAD,EAA6BtB,OAAO,CAACsB,KAAR,CAAe,SAAf,CAA7B,EAAyDtB,OAAO,CAACsB,KAAR,CAAc,SAAd,CAAzD,CAApB;AACA;AACD;;AACD;AAAS;AACPf,UAAAA,KAAK,CAACa,MAAN,CAAaC,IAAb,GAAoB,CAACrB,OAAO,CAACsB,KAAR,CAAe,SAAf,CAAD,EAA6BtB,OAAO,CAACsB,KAAR,CAAe,SAAf,CAA7B,EAAyDtB,OAAO,CAACsB,KAAR,CAAc,SAAd,CAAzD,CAApB;AACD;AAXH,KAfwB,CA4BxB;AAEA;;;AACA,QAAIC,KAAK,GAAGhB,KAAK,CAACiB,KAAN,CAAYC,IAAZ,CAAkB,IAAIxB,SAAS,CAACyB,YAAd,EAAlB,CAAZ;AACAH,IAAAA,KAAK,CAACI,UAAN,CAAiBC,QAAjB,GAA4B,GAA5B;AACAL,IAAAA,KAAK,CAACM,QAAN,CAAeC,IAAf,CAAoBC,QAApB,CAA6BC,QAA7B,GAAwC,CAAxC;AACAT,IAAAA,KAAK,CAACM,QAAN,CAAeI,eAAf,GAAiC,EAAjC;AACAV,IAAAA,KAAK,CAACM,QAAN,CAAeK,MAAf,CAAsBH,QAAtB,CAA+BI,QAA/B,GAA0C,IAA1C;AACAZ,IAAAA,KAAK,CAACa,IAAN,GAAa,CAAC;AAAE1B,MAAAA,CAAC,EAAE;AAAL,KAAD,EAAa;AAAEA,MAAAA,CAAC,EAAE;AAAL,KAAb,EAAyB;AAAEA,MAAAA,CAAC,EAAE;AAAL,KAAzB,EAAqC;AAAEA,MAAAA,CAAC,EAAE;AAAL,KAArC,EAAiD;AAAEA,MAAAA,CAAC,EAAE;AAAL,KAAjD,EAA6D;AAAEA,MAAAA,CAAC,EAAE;AAAL,KAA7D,EAAyE;AAAEA,MAAAA,CAAC,EAAE;AAAL,KAAzE,EAAqF;AAAEA,MAAAA,CAAC,EAAE;AAAL,KAArF,EAAiG;AAAEA,MAAAA,CAAC,EAAE;AAAL,KAAjG,EAA6G;AAAEA,MAAAA,CAAC,EAAE;AAAL,KAA7G,CAAb,CApCwB,CAsCxB;;AACA,QAAI2B,KAAK,GAAG9B,KAAK,CAAC+B,KAAN,CAAYb,IAAZ,CAAkB,IAAIxB,SAAS,CAACyB,YAAd,EAAlB,CAAZ;AACAW,IAAAA,KAAK,CAACR,QAAN,CAAeK,MAAf,CAAsBH,QAAtB,CAA+BI,QAA/B,GAA0C,IAA1C;AACAE,IAAAA,KAAK,CAACR,QAAN,CAAeC,IAAf,CAAoBC,QAApB,CAA6BC,QAA7B,GAAwC,CAAxC;AACAK,IAAAA,KAAK,CAACR,QAAN,CAAeI,eAAf,GAAiC,EAAjC;AACAI,IAAAA,KAAK,CAACV,UAAN,CAAiBC,QAAjB,GAA4B,GAA5B;AACAS,IAAAA,KAAK,CAACD,IAAN,GAAa,CAAC;AAAEG,MAAAA,CAAC,EAAE;AAAL,KAAD,EAAa;AAAEA,MAAAA,CAAC,EAAE;AAAL,KAAb,EAAyB;AAAEA,MAAAA,CAAC,EAAE;AAAL,KAAzB,EAAqC;AAAEA,MAAAA,CAAC,EAAE;AAAL,KAArC,EAAiD;AAAEA,MAAAA,CAAC,EAAE;AAAL,KAAjD,EAA6D;AAAEA,MAAAA,CAAC,EAAE;AAAL,KAA7D,EAAyE;AAAEA,MAAAA,CAAC,EAAE;AAAL,KAAzE,EAAqF;AAAEA,MAAAA,CAAC,EAAE;AAAL,KAArF,EAAiG;AAAEA,MAAAA,CAAC,EAAE;AAAL,KAAjG,EAA6G;AAAEA,MAAAA,CAAC,EAAE;AAAL,KAA7G,CAAb,CA5CwB,CA8CxB;;AACA,aAASC,YAAT,CAAsBC,IAAtB,EAA4B;AAC1B,UAAIC,MAAM,GAAGnC,KAAK,CAACmC,MAAN,CAAajB,IAAb,CAAmB,IAAIxB,SAAS,CAAC0C,YAAd,EAAnB,CAAb;AACAD,MAAAA,MAAM,CAACf,UAAP,CAAkBiB,SAAlB,GAA8B,GAA9B;AACAF,MAAAA,MAAM,CAACf,UAAP,CAAkBkB,SAAlB,GAA8B,GAA9B;AACAH,MAAAA,MAAM,CAACI,sBAAP,GAAgC,IAAhC;AACAJ,MAAAA,MAAM,CAACK,YAAP,CAAoBC,kBAApB,GAAyC,IAAzC;AACAN,MAAAA,MAAM,CAACD,IAAP,GAAcA,IAAd,CAN0B,CAS1B;;AACA,UAAIQ,MAAM,GAAGP,MAAM,CAACQ,OAAP,CAAenB,QAA5B;AACAkB,MAAAA,MAAM,CAACE,WAAP,GAAqB,CAArB;AACAF,MAAAA,MAAM,CAACG,aAAP,GAAuB,CAAvB;AACAH,MAAAA,MAAM,CAACI,WAAP,GAAqB,CAArB;AACAJ,MAAAA,MAAM,CAACK,MAAP,GAAgBtD,OAAO,CAACsB,KAAR,CAAe,SAAf,CAAhB;AACA2B,MAAAA,MAAM,CAACM,KAAP,GAAevD,OAAO,CAACwD,OAAR,CAAiB,GAAjB,CAAf;AACAP,MAAAA,MAAM,CAACQ,MAAP,GAAgBzD,OAAO,CAACwD,OAAR,CAAiB,GAAjB,CAAhB,CAhB0B,CAiB1B;;AAEA,UAAIE,EAAE,GAAGhB,MAAM,CAACQ,OAAP,CAAenB,QAAf,CAAwB4B,MAAxB,CAA+BhD,MAA/B,CAAsC,QAAtC,CAAT;AACA+C,MAAAA,EAAE,CAACzC,UAAH,CAAcoC,WAAd,GAA4B,GAA5B;AAEA,aAAOX,MAAP;AACD;;AAED,QAAIkB,WAAW,GAAG,EAAlB;AAEA,QAAIxB,IAAI,GAAGyB,IAAI,CAACC,KAAL,CAAWxD,KAAK,CAAC8B,IAAjB,CAAX;AACA2B,IAAAA,OAAO,CAACC,GAAR,CAAY5B,IAAZ;AAEA,QAAI6B,SAAS,GAAG,EAAhB;AAEA,QAAIC,KAAK,GAAG,CAAZ;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA3D,IAAAA,KAAK,CAAC4D,MAAN,GAAe,IAAIlE,SAAS,CAACmE,MAAd,EAAf;AACA7D,IAAAA,KAAK,CAAC4D,MAAN,CAAaE,UAAb,GAA0B,IAA1B;AACA9D,IAAAA,KAAK,CAAC4D,MAAN,CAAaG,QAAb,GAAwB,GAAxB;AACA/D,IAAAA,KAAK,CAAC4D,MAAN,CAAaI,QAAb,GAAwB,EAAxB;AACAhE,IAAAA,KAAK,CAAC4D,MAAN,CAAajC,MAAb,CAAoBH,QAApB,CAA6ByC,QAA7B,GAAwC,IAAxC;AACAjE,IAAAA,KAAK,CAAC4D,MAAN,CAAaM,cAAb,CAA4B1C,QAA5B,CAAqC2C,WAArC,GAAmD,QAAnD;;AAEA,YAAOpE,KAAK,CAACqE,UAAb;AACE,WAAK,OAAL;AAAc;AACZpE,UAAAA,KAAK,CAAC4D,MAAN,CAAaS,QAAb,GAAwB,OAAxB;AACA;AACD;;AACD,WAAK,MAAL;AAAa;AACXrE,UAAAA,KAAK,CAAC4D,MAAN,CAAaS,QAAb,GAAwB,MAAxB;AACA;AACD;;AACD,WAAK,KAAL;AAAY;AACVrE,UAAAA,KAAK,CAAC4D,MAAN,CAAaS,QAAb,GAAwB,KAAxB;AACA;AACD;;AACD,WAAK,QAAL;AAAe;AACbrE,UAAAA,KAAK,CAAC4D,MAAN,CAAaS,QAAb,GAAwB,QAAxB;AACA;AACD;;AACD;AAAS;AACPrE,UAAAA,KAAK,CAAC4D,MAAN,CAAaS,QAAb,GAAwB,OAAxB;AACA;AACD;AApBH,KAjHwB,CAwIxB;;;AACArE,IAAAA,KAAK,CAAC4D,MAAN,CAAaM,cAAb,CAA4B1C,QAA5B,CAAqC8C,SAArC,GAAiD,KAAjD;AAEA,QAAIC,WAAW,GAAG,EAAlB;AACA,QAAIC,IAAI,GAAG,EAAX;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG5C,IAAI,CAAC6C,MAAzB,EAAiCD,CAAC,EAAlC,EAAqC;AACnC,UAAIE,GAAG,GAAGtB,WAAW,CAACoB,CAAD,CAAX,CAAevC,IAAzB;AACAqC,MAAAA,WAAW,CAACI,GAAD,CAAX,GAAmBtB,WAAW,CAACoB,CAAD,CAAX,CAAe,SAAf,EAA0B,UAA1B,CAAnB;AACAD,MAAAA,IAAI,CAACtD,IAAL,CAAUyD,GAAV;AACD;;AAED3E,IAAAA,KAAK,CAAC4D,MAAN,CAAaM,cAAb,CAA4B1C,QAA5B,CAAqCoD,MAArC,CAA4CC,EAA5C,CAA+C,KAA/C,EAAsD,UAASC,EAAT,EAAa;AACjE,UAAIC,YAAY,GAAGD,EAAE,CAACE,MAAH,CAAUC,QAAV,CAAmBC,WAAnB,CAA+B,SAA/B,EAA0C,UAA1C,CAAnB;AACA,UAAIC,KAAK,GAAGL,EAAE,CAACE,MAAH,CAAUC,QAAV,CAAmBC,WAAnB,CAA+B,MAA/B,CAAZ;AACA,UAAIE,YAAY,GAAG,EAAnB;;AAHiE,iDAInDZ,IAJmD;AAAA;;AAAA;AAIjE,4DAAmB;AAAA,cAAVa,CAAU;;AACjB,cAAIF,KAAK,IAAIE,CAAb,EAAe;AACbD,YAAAA,YAAY,CAAClE,IAAb,CAAkBqD,WAAW,CAACc,CAAD,CAA7B;AACD;AACF;AARgE;AAAA;AAAA;AAAA;AAAA;;AASjE,UAAID,YAAY,CAAC,CAAD,CAAZ,CAAgBE,QAApB,EAA6B;AAC3BF,QAAAA,YAAY,CAACG,GAAb,CAAiB,UAASC,CAAT,EAAY;AAC3BA,UAAAA,CAAC,CAACF,QAAF,GAAa,KAAb;AACA,iBAAOE,CAAP;AACD,SAHD;AAID,OALD,MAKO;AACLJ,QAAAA,YAAY,CAACG,GAAb,CAAiB,UAASC,CAAT,EAAY;AAC3BA,UAAAA,CAAC,CAACF,QAAF,GAAa,IAAb;AACA,iBAAOE,CAAP;AACD,SAHD;AAID;;AACDT,MAAAA,YAAY,CAACO,QAAb,GAAwB,KAAxB;AACD,KArBD;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIG,GA3Pc;AAAA,YAQjB7F,OAAO,CAACI,QARS;AAAA,MA2PZ,EA3PY,CAAf;AA6PA,sBACE;AAAA,2BACI;AAAK,MAAA,EAAE,EAAEE,KAAK,CAACM,KAAf;AAAsB,MAAA,KAAK,EAAE;AAAE2C,QAAAA,KAAK,EAAE,MAAT;AAAiBE,QAAAA,MAAM,EAAE;AAAzB;AAA7B;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADF;AAMD;;IAzQQpD,W;;KAAAA,W;AA0QT,eAAeA,WAAf","sourcesContent":["import React, { useRef, useLayoutEffect } from 'react';\r\nimport logo from './logo.svg';\r\nimport * as am4core from \"@amcharts/amcharts4/core\";\r\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\r\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\r\nimport styled from 'styled-components';\r\nimport {space, color, layout} from 'styled-system';\r\nimport Card from 'react-bootstrap/Card';\r\nimport axios from 'axios'\r\n\r\nvar user_id = \"634739719\";\r\n\r\nam4core.useTheme(am4themes_animated);\r\n/*\r\nfunction WaffleAny(ns: Number[], num_cols: number){\r\n  var datas = [];\r\n  var vals = [];\r\n  for (let n of ns){\r\n    vals.push(n.valueOf());\r\n  }\r\n\r\n  var l = vals.length;\r\n  \r\n  var tot = vals.reduce((a, b) => a + b, 0)\r\n\r\n  var nums = []\r\n  var last = 0\r\n\r\n  for (let i = 0; i < l; i++){\r\n    var num = vals[i] / tot;\r\n    nums.push(num);\r\n    last = num + last\r\n  }\r\n\r\n  var row = 1\r\n  var col = 1\r\n\r\n  var new_data_x = [];\r\n  var new_data_y = [];\r\n\r\n  for (let i = 1; i <= num_cols; i++) {\r\n    new_data_x.push({x : i.toString()});\r\n  }\r\n\r\n  for (let i = 1; i <= num_cols; i++) {\r\n    new_data_y.push({y : i.toString()});\r\n  }\r\n\r\n  var r_tot = 0\r\n\r\n  for (let h = 0; h <= (l-1); h++){\r\n    var data = [];\r\n    for (let i = r_tot; i < (r_tot + rs[h]); i++) {\r\n      var x_str = row.toString();\r\n      var y_str = col.toString();\r\n      data.push({ x: x_str, y: y_str});\r\n      if(col == num_cols){\r\n        row = row + 1;\r\n        col = 1\r\n      } else {\r\n        col = col + 1\r\n      }\r\n    }\r\n    datas.push(data)\r\n    r_tot = r_tot + rs[h];\r\n  }\r\n\r\n  var data = [];\r\n  for (let i = r_tot; i < num_cells; i++) {\r\n    var x_str = row.toString();\r\n    var y_str = col.toString();\r\n    data.push({ x: x_str, y: y_str});\r\n    if(col == num_cols){\r\n      row = row + 1;\r\n      col = 1\r\n    } else {\r\n      col = col + 1\r\n    }\r\n  }\r\n  datas.push(data);\r\n\r\n  return({data_list: datas,\r\n          data_x: new_data_x,\r\n          data_y: new_data_y});\r\n}\r\n*/\r\n\r\nfunction WaffleChart(props) {\r\n  const chart = useRef(null);\r\n\r\n  var rs = 3600\r\n  var nrs = 6400\r\n\r\n  useLayoutEffect(() => {\r\n    let x = am4core.create(props.divid, am4charts.XYChart);\r\n\r\n    x.paddingRight = 20;\r\n    x.paddingLeft = 20;\r\n\r\n    /* Chart code */\r\n// Themes begin\r\nam4core.useTheme(am4themes_animated);\r\n// Themes end\r\n\r\n// Chart\r\nlet chart = am4core.create( props.divid, am4charts.XYChart );\r\nchart.hiddenState.properties.opacity = 0; // this creates initial fade-in\r\n//chart.colors.step = 2;\r\nswitch(props.scheme){\r\n  case \"followers\": {\r\n    chart.colors.list = [am4core.color( \"#98a2df\" ), am4core.color( \"#e96b6a\" ), am4core.color(\"#a2df98\")];\r\n    break;\r\n  }\r\n  case \"tweets\": {\r\n    chart.colors.list = [am4core.color( \"#CF30B2\" ), am4core.color( \"#30B2CF\" ), am4core.color(\"#B2CF30\")];\r\n    break;\r\n  }\r\n  default: {\r\n    chart.colors.list = [am4core.color( \"#98a2df\" ), am4core.color( \"#e96b6a\" ), am4core.color(\"#a2df98\")];\r\n  }\r\n}\r\n//chart.colors.list = [am4core.color( \"#98a2df\" ), am4core.color( \"#e96b6a\" ), am4core.color(\"#a2df98\")]\r\n\r\n// X axis\r\nlet xAxis = chart.xAxes.push( new am4charts.CategoryAxis() );\r\nxAxis.dataFields.category = \"x\";\r\nxAxis.renderer.grid.template.location = 0;\r\nxAxis.renderer.minGridDistance = 10;\r\nxAxis.renderer.labels.template.disabled = true;\r\nxAxis.data = [{ x: \"1\" }, { x: \"2\" }, { x: \"3\" }, { x: \"4\" }, { x: \"5\" }, { x: \"6\" }, { x: \"7\" }, { x: \"8\" }, { x: \"9\" }, { x: \"10\" }];\r\n\r\n// Y axis\r\nlet yAxis = chart.yAxes.push( new am4charts.CategoryAxis() );\r\nyAxis.renderer.labels.template.disabled = true;\r\nyAxis.renderer.grid.template.location = 0;\r\nyAxis.renderer.minGridDistance = 10;\r\nyAxis.dataFields.category = \"y\";\r\nyAxis.data = [{ y: \"1\" }, { y: \"2\" }, { y: \"3\" }, { y: \"4\" }, { y: \"5\" }, { y: \"6\" }, { y: \"7\" }, { y: \"8\" }, { y: \"9\" }, { y: \"10\" }];\r\n\r\n// Create series\r\nfunction createSeries(name) {\r\n  let series = chart.series.push( new am4charts.ColumnSeries() );\r\n  series.dataFields.categoryX = \"x\";\r\n  series.dataFields.categoryY = \"y\";\r\n  series.sequencedInterpolation = true;\r\n  series.defaultState.transitionDuration = 3000;\r\n  series.name = name;\r\n\r\n\r\n  // Set up column appearance\r\n  let column = series.columns.template;\r\n  column.strokeWidth = 1;\r\n  column.strokeOpacity = 1;\r\n  column.fillOpacity = 1;\r\n  column.stroke = am4core.color( \"#ffffff\" );\r\n  column.width = am4core.percent( 100 );\r\n  column.height = am4core.percent( 100 );\r\n  //column.column.cornerRadius(6, 6, 6, 6);\r\n\r\n  let hs = series.columns.template.states.create(\"active\");\r\n  hs.properties.fillOpacity = 0.5;\r\n  \r\n  return series;\r\n}\r\n\r\nlet series_list = [];\r\n\r\nlet data = JSON.parse(props.data)\r\nconsole.log(data)\r\n\r\nlet nums_list = [];\r\n\r\nlet denom = 0;\r\n\r\n/*\r\nfor (let i = 0; i < data.length; i++){\r\n  var num = new Number();\r\n  num = data[i]['data'];\r\n  denom = denom + vars[i]['data'];\r\n  nums_list.push(num);\r\n}\r\n\r\nfor (let i = 0; i < vars.length; i++){\r\n  var percent = vars[i]['data']/denom;\r\n  var rat = (percent * 100).toFixed(1).toString();\r\n  series_list.push(createSeries(vars[i]['name'] + \": \" + rat + \"% (\"  + nums_list[i].toString() + \")\" ));\r\n}\r\n\r\nvar datas = WaffleProportionAny(nums_list);\r\n\r\nfor (let i = 0; i < vars.length; i++){\r\n  series_list[i].data = datas['data_list'][i]\r\n}\r\n\r\nxAxis.data = datas['data_x']\r\nyAxis.data = datas['data_y']\r\n*/\r\n\r\n// Legend\r\nchart.legend = new am4charts.Legend();\r\nchart.legend.scrollable = true;\r\nchart.legend.maxWidth = 120;\r\nchart.legend.minWidth = 10;\r\nchart.legend.labels.template.truncate = true;\r\nchart.legend.itemContainers.template.tooltipText = \"{name}\";\r\n\r\nswitch(props.legend_pos){\r\n  case \"right\": {\r\n    chart.legend.position = \"right\";\r\n    break;\r\n  }\r\n  case \"left\": {\r\n    chart.legend.position = \"left\";\r\n    break;\r\n  }\r\n  case \"top\": {\r\n    chart.legend.position = \"top\";\r\n    break;\r\n  }\r\n  case \"bottom\": {\r\n    chart.legend.position = \"bottom\";\r\n    break;\r\n  }\r\n  default: {\r\n    chart.legend.position = \"right\";\r\n    break;\r\n  }\r\n}\r\n\r\n//Custom code for legend\r\nchart.legend.itemContainers.template.togglable = false;\r\n\r\nvar series_dict = {}\r\nvar keys = [];\r\n\r\nfor (let i = 0; i < data.length; i++){\r\n  var key = series_list[i].name;\r\n  series_dict[key] = series_list[i]['columns']['template'];\r\n  keys.push(key);\r\n}\r\n\r\nchart.legend.itemContainers.template.events.on(\"hit\", function(ev) {\r\n  let seriesColumn = ev.target.dataItem.dataContext['columns']['template'];\r\n  let sname = ev.target.dataItem.dataContext['name'];\r\n  let other_series = []\r\n  for (let k of keys){\r\n    if (sname != k){\r\n      other_series.push(series_dict[k]);\r\n    }\r\n  }\r\n  if (other_series[0].isActive){\r\n    other_series.map(function(e) { \r\n      e.isActive = false; \r\n      return e;\r\n    });\r\n  } else {\r\n    other_series.map(function(e) { \r\n      e.isActive = true; \r\n      return e;\r\n    });\r\n  }\r\n  seriesColumn.isActive = false;\r\n});\r\n\r\n/*\r\nlet series1 = createSeries(\"Researchers\");\r\nseries1.data = [\r\n  { x: \"1\", y: \"1\" }\r\n\r\n];\r\n\r\nlet series2 = createSeries(\"Non-Researchers\");\r\nseries2.data = [\r\n  \r\n\r\n  { x: \"7\", y: \"1\" }\r\n];\r\n\r\nvar num1 = new Number(0)\r\nnum1 = props.r\r\nvar num2 = new Number(0)\r\nnum2 = props.n\r\n\r\nseries1.name = \"Researchers: \" + num1.toString();\r\nseries2.name = \"Other: \" + num2.toString();\r\n\r\n//var datas = WaffleProportionCheat(num1, num2);\r\nvar datas = WaffleProportionAny([num1, num2]);\r\n\r\n//xAxis.data = datas[2];\r\n//yAxis.data = datas[3];\r\n\r\n//series1.data = datas[0];\r\n//series2.data = datas[1];\r\n\r\nseries1.data = datas['data_list'][0]\r\nseries2.data = datas['data_list'][1]\r\n\r\nxAxis.data = datas['data_x']\r\nyAxis.data = datas['data_y']\r\n\r\n// Legend\r\nchart.legend = new am4charts.Legend();\r\nchart.legend.position = \"right\";\r\nchart.legend.scrollable = true;\r\nchart.legend.maxWidth = 200;\r\n\r\n//Custom code for legend\r\nchart.legend.itemContainers.template.togglable = false;\r\n\r\nvar series_dict = {\r\n  [series1.name]: series1['columns']['template'],\r\n  [series2.name]: series2['columns']['template']\r\n}\r\n\r\nvar keys = [series1.name, series2.name]\r\n\r\nchart.legend.itemContainers.template.events.on(\"hit\", function(ev) {\r\n  let seriesColumn = ev.target.dataItem.dataContext['columns']['template'];\r\n  let sname = ev.target.dataItem.dataContext['name'];\r\n  let other_series = []\r\n  for (let k of keys){\r\n    if (sname != k){\r\n      other_series.push(series_dict[k]);\r\n    }\r\n  }\r\n  if (other_series[0].isActive){\r\n    other_series.map(function(e) { \r\n      e.isActive = false; \r\n      return e;\r\n    });\r\n  } else {\r\n    other_series.map(function(e) { \r\n      e.isActive = true; \r\n      return e;\r\n    });\r\n  }\r\n  seriesColumn.isActive = false;\r\n});\r\n\r\n*/\r\n\r\n\r\n\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n        <div id={props.divid} style={{ width: \"100%\", height: \"250px\" }}></div>\r\n    </div>\r\n    \r\n  );\r\n}\r\nexport default WaffleChart;"]},"metadata":{},"sourceType":"module"}