{"ast":null,"code":"import _objectSpread from \"C:/Users/spenc/Documents/GitHub/hci-com/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _taggedTemplateLiteral from \"C:/Users/spenc/Documents/GitHub/hci-com/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\spenc\\\\Documents\\\\GitHub\\\\hci-com\\\\src\\\\containers\\\\Tweets\\\\Tweets.tsx\",\n    _templateObject,\n    _templateObject2,\n    _templateObject3,\n    _templateObject4,\n    _templateObject5,\n    _templateObject6,\n    _s = $RefreshSig$();\n\nimport React, { useMemo } from 'react';\nimport styled from 'styled-components';\nimport { MetaInfo } from '../../components';\nimport { RoutesConfig } from '../../config/routes.config';\nimport { FeatureInfoConfig } from '../../config/features.config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Grid = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n&&& {\\n  display: grid;\\n  grid-column-gap: 0px;\\n  grid-template-columns: auto 1px;\\n}\"])));\nconst Space = styled.p(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\\n    &&& {\\n    padding: 0em;\\n    margin-bottom: 1.4em;\\n}\"])));\nconst Sticky = styled.div(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"\\n&&& {\\n  position: -webkit-sticky; /* Safari */\\n  position: sticky;\\n  top: 50%;\\n  left: 75%;\\n  max-height: 300px;\\n  max-width: 250px;\\n}\"])));\nconst Test = styled.div(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"\\n&&& {\\n  position: -webkit-sticky; /* Safari */\\n  position: sticky;\\n  top: 2%;\\n  left: 95%;\\n  max-height: 300px;\\n  max-width: 250px;\\n  background-color: lightblue;\\n}\"])));\nconst Title = styled.p(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral([\"\\n    &&& {\\n    font-size: 30px;\\n    font-weight:bold;\\n}\"])));\nconst Subtitle = styled.p(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral([\"\\n    &&& {\\n    padding: .05em;\\n    font-size: 24px;\\n}\"])));\n\nconst Tweets = () => {\n  _s();\n\n  const featureList = useMemo(() => {\n    return Object.keys(FeatureInfoConfig).map(key => FeatureInfoConfig[key]);\n  }, []);\n\n  function CSVToArray(strData, strDelimiter) {\n    // Check to see if the delimiter is defined. If not,\n    // then default to comma.\n    strDelimiter = strDelimiter || \",\"; // Create a regular expression to parse the CSV values.\n\n    var objPattern = new RegExp( // Delimiters.\n    \"(\\\\\" + strDelimiter + \"|\\\\r?\\\\n|\\\\r|^)\" + // Quoted fields.\n    \"(?:\\\"([^\\\"]*(?:\\\"\\\"[^\\\"]*)*)\\\"|\" + // Standard fields.\n    \"([^\\\"\\\\\" + strDelimiter + \"\\\\r\\\\n]*))\", \"gi\"); // Create an array to hold our data. Give the array\n    // a default empty first row.\n\n    var arrData = [[]]; // Create an array to hold our individual pattern\n    // matching groups.\n\n    var arrMatches = null; // Keep looping over the regular expression matches\n    // until we can no longer find a match.\n\n    while (arrMatches = objPattern.exec(strData)) {\n      // Get the delimiter that was found.\n      var strMatchedDelimiter = arrMatches[1]; // Check to see if the given delimiter has a length\n      // (is not the start of string) and if it matches\n      // field delimiter. If id does not, then we know\n      // that this delimiter is a row delimiter.\n\n      if (strMatchedDelimiter.length && strMatchedDelimiter !== strDelimiter) {\n        // Since we have reached a new row of data,\n        // add an empty row to our data array.\n        arrData.push([]);\n      }\n\n      var strMatchedValue; // Now that we have our delimiter out of the way,\n      // let's check to see which kind of value we\n      // captured (quoted or unquoted).\n\n      if (arrMatches[2]) {\n        // We found a quoted value. When we capture\n        // this value, unescape any double quotes.\n        strMatchedValue = arrMatches[2].replace(new RegExp(\"\\\"\\\"\", \"g\"), \"\\\"\");\n      } else {\n        // We found a non-quoted value.\n        strMatchedValue = arrMatches[3];\n      } // Now that we have our value string, let's add\n      // it to the data array.\n\n\n      arrData[arrData.length - 1].push(strMatchedValue);\n    } // Return the parsed data.\n\n\n    return arrData;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"view-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(MetaInfo, _objectSpread({}, RoutesConfig.Home.metaInfo), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"container dashboard-content\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Test\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Tweets, \"VC2sZ+5NoEUWiIZEGn6rMb1sWSE=\");\n\n_c = Tweets;\nexport default Tweets;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tweets\");","map":{"version":3,"sources":["C:/Users/spenc/Documents/GitHub/hci-com/src/containers/Tweets/Tweets.tsx"],"names":["React","useMemo","styled","MetaInfo","RoutesConfig","FeatureInfoConfig","Grid","div","Space","p","Sticky","Test","Title","Subtitle","Tweets","featureList","Object","keys","map","key","CSVToArray","strData","strDelimiter","objPattern","RegExp","arrData","arrMatches","exec","strMatchedDelimiter","length","push","strMatchedValue","replace","Home","metaInfo"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAGA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,YAAT,QAA6B,4BAA7B;AAEA,SAASC,iBAAT,QAA+C,8BAA/C;;AASA,MAAMC,IAAI,GAAGJ,MAAM,CAACK,GAAV,8JAAV;AAOA,MAAMC,KAAK,GAAGN,MAAM,CAACO,CAAV,mIAAX;AAMA,MAAMC,MAAM,GAAGR,MAAM,CAACK,GAAV,sNAAZ;AAUA,MAAMI,IAAI,GAAGT,MAAM,CAACK,GAAV,qPAAV;AAWA,MAAMK,KAAK,GAAGV,MAAM,CAACO,CAAV,kIAAX;AAMA,MAAMI,QAAQ,GAAGX,MAAM,CAACO,CAAV,gIAAd;;AAMA,MAAMK,MAAgB,GAAG,MAAM;AAAA;;AAC7B,QAAMC,WAAW,GAAGd,OAAO,CAAgB,MAAM;AAC/C,WAAOe,MAAM,CAACC,IAAP,CAAYZ,iBAAZ,EAA+Ba,GAA/B,CAAoCC,GAAD,IAASd,iBAAiB,CAACc,GAAD,CAA7D,CAAP;AACD,GAF0B,EAExB,EAFwB,CAA3B;;AAIA,WAASC,UAAT,CAAqBC,OAArB,EAA8BC,YAA9B,EAA4C;AAC1C;AACA;AACAA,IAAAA,YAAY,GAAIA,YAAY,IAAI,GAAhC,CAH0C,CAK1C;;AACA,QAAIC,UAAU,GAAG,IAAIC,MAAJ,EAET;AACA,YAAQF,YAAR,GAAuB,iBAAvB,GAEA;AACA,qCAHA,GAKA;AACA,aANA,GAMYA,YANZ,GAM2B,YATlB,EAWb,IAXa,CAAjB,CAN0C,CAqB1C;AACA;;AACA,QAAIG,OAAO,GAAG,CAAC,EAAD,CAAd,CAvB0C,CAyB1C;AACA;;AACA,QAAIC,UAAU,GAAG,IAAjB,CA3B0C,CA8B1C;AACA;;AACA,WAAOA,UAAU,GAAGH,UAAU,CAACI,IAAX,CAAiBN,OAAjB,CAApB,EAA+C;AAE3C;AACA,UAAIO,mBAAmB,GAAGF,UAAU,CAAE,CAAF,CAApC,CAH2C,CAK3C;AACA;AACA;AACA;;AACA,UACIE,mBAAmB,CAACC,MAApB,IACAD,mBAAmB,KAAKN,YAF5B,EAGK;AAED;AACA;AACAG,QAAAA,OAAO,CAACK,IAAR,CAAc,EAAd;AAEH;;AAED,UAAIC,eAAJ,CApB2C,CAsB3C;AACA;AACA;;AACA,UAAIL,UAAU,CAAE,CAAF,CAAd,EAAoB;AAEhB;AACA;AACAK,QAAAA,eAAe,GAAGL,UAAU,CAAE,CAAF,CAAV,CAAgBM,OAAhB,CACd,IAAIR,MAAJ,CAAY,MAAZ,EAAoB,GAApB,CADc,EAEd,IAFc,CAAlB;AAKH,OATD,MASO;AAEH;AACAO,QAAAA,eAAe,GAAGL,UAAU,CAAE,CAAF,CAA5B;AAEH,OAvC0C,CA0C3C;AACA;;;AACAD,MAAAA,OAAO,CAAEA,OAAO,CAACI,MAAR,GAAiB,CAAnB,CAAP,CAA8BC,IAA9B,CAAoCC,eAApC;AACH,KA7EyC,CA+E1C;;;AACA,WAAQN,OAAR;AACH;;AAEC,sBACE;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA,4BACE,QAAC,QAAD,oBAAcrB,YAAY,CAAC6B,IAAb,CAAkBC,QAAhC;AAAA;AAAA;AAAA;AAAA,YADF,eAGE;AAAS,MAAA,SAAS,EAAC,6BAAnB;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CAjGD;;GAAMpB,M;;KAAAA,M;AAmGN,eAAeA,MAAf","sourcesContent":["import React, { useMemo } from 'react';\r\nimport styled from 'styled-components';\r\nimport Box from '@material-ui/core/Box';\r\nimport Button from 'react-bootstrap/Button'\r\nimport { MetaInfo } from '../../components';\r\nimport { RoutesConfig } from '../../config/routes.config';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { FeatureInfoConfig, FeatureInfo } from '../../config/features.config';\r\nimport axios from 'axios'\r\nimport * as am4core from \"@amcharts/amcharts4/core\";\r\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\r\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\r\nimport { Tweet} from 'react-twitter-widgets'\r\nimport Card from 'react-bootstrap/Card';\r\nimport SideBar from '../../components/SideBar';\r\n\r\nconst Grid = styled.div`\r\n&&& {\r\n  display: grid;\r\n  grid-column-gap: 0px;\r\n  grid-template-columns: auto 1px;\r\n}`\r\n\r\nconst Space = styled.p`\r\n    &&& {\r\n    padding: 0em;\r\n    margin-bottom: 1.4em;\r\n}`\r\n\r\nconst Sticky = styled.div`\r\n&&& {\r\n  position: -webkit-sticky; /* Safari */\r\n  position: sticky;\r\n  top: 50%;\r\n  left: 75%;\r\n  max-height: 300px;\r\n  max-width: 250px;\r\n}`\r\n\r\nconst Test = styled.div`\r\n&&& {\r\n  position: -webkit-sticky; /* Safari */\r\n  position: sticky;\r\n  top: 2%;\r\n  left: 95%;\r\n  max-height: 300px;\r\n  max-width: 250px;\r\n  background-color: lightblue;\r\n}`\r\n\r\nconst Title = styled.p`\r\n    &&& {\r\n    font-size: 30px;\r\n    font-weight:bold;\r\n}`\r\n\r\nconst Subtitle = styled.p`\r\n    &&& {\r\n    padding: .05em;\r\n    font-size: 24px;\r\n}`\r\n\r\nconst Tweets: React.FC = () => {\r\n  const featureList = useMemo<FeatureInfo[]>(() => {\r\n    return Object.keys(FeatureInfoConfig).map((key) => FeatureInfoConfig[key]);\r\n  }, []);\r\n\r\n  function CSVToArray( strData, strDelimiter ){\r\n    // Check to see if the delimiter is defined. If not,\r\n    // then default to comma.\r\n    strDelimiter = (strDelimiter || \",\");\r\n\r\n    // Create a regular expression to parse the CSV values.\r\n    var objPattern = new RegExp(\r\n        (\r\n            // Delimiters.\r\n            \"(\\\\\" + strDelimiter + \"|\\\\r?\\\\n|\\\\r|^)\" +\r\n\r\n            // Quoted fields.\r\n            \"(?:\\\"([^\\\"]*(?:\\\"\\\"[^\\\"]*)*)\\\"|\" +\r\n\r\n            // Standard fields.\r\n            \"([^\\\"\\\\\" + strDelimiter + \"\\\\r\\\\n]*))\"\r\n        ),\r\n        \"gi\"\r\n        );\r\n\r\n\r\n    // Create an array to hold our data. Give the array\r\n    // a default empty first row.\r\n    var arrData = [[]];\r\n\r\n    // Create an array to hold our individual pattern\r\n    // matching groups.\r\n    var arrMatches = null;\r\n\r\n\r\n    // Keep looping over the regular expression matches\r\n    // until we can no longer find a match.\r\n    while (arrMatches = objPattern.exec( strData )){\r\n\r\n        // Get the delimiter that was found.\r\n        var strMatchedDelimiter = arrMatches[ 1 ];\r\n\r\n        // Check to see if the given delimiter has a length\r\n        // (is not the start of string) and if it matches\r\n        // field delimiter. If id does not, then we know\r\n        // that this delimiter is a row delimiter.\r\n        if (\r\n            strMatchedDelimiter.length &&\r\n            strMatchedDelimiter !== strDelimiter\r\n            ){\r\n\r\n            // Since we have reached a new row of data,\r\n            // add an empty row to our data array.\r\n            arrData.push( [] );\r\n\r\n        }\r\n\r\n        var strMatchedValue;\r\n\r\n        // Now that we have our delimiter out of the way,\r\n        // let's check to see which kind of value we\r\n        // captured (quoted or unquoted).\r\n        if (arrMatches[ 2 ]){\r\n\r\n            // We found a quoted value. When we capture\r\n            // this value, unescape any double quotes.\r\n            strMatchedValue = arrMatches[ 2 ].replace(\r\n                new RegExp( \"\\\"\\\"\", \"g\" ),\r\n                \"\\\"\"\r\n                );\r\n\r\n        } else {\r\n\r\n            // We found a non-quoted value.\r\n            strMatchedValue = arrMatches[ 3 ];\r\n\r\n        }\r\n\r\n\r\n        // Now that we have our value string, let's add\r\n        // it to the data array.\r\n        arrData[ arrData.length - 1 ].push( strMatchedValue );\r\n    }\r\n\r\n    // Return the parsed data.\r\n    return( arrData );\r\n}\r\n\r\n  return (\r\n    <div className='view-wrapper'>\r\n      <MetaInfo {...RoutesConfig.Home.metaInfo} />\r\n      \r\n      <section className='container dashboard-content'>\r\n        <h1>Test</h1>\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Tweets;\r\n"]},"metadata":{},"sourceType":"module"}