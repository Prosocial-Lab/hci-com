{"ast":null,"code":"import _slicedToArray from \"C:/Users/spenc/Documents/GitHub/hci-com/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"C:/Users/spenc/Documents/GitHub/hci-com/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\spenc\\\\Documents\\\\GitHub\\\\hci-com\\\\src\\\\containers\\\\Home\\\\components\\\\MyTweets.tsx\",\n    _templateObject,\n    _templateObject2,\n    _templateObject3,\n    _templateObject4,\n    _templateObject5,\n    _templateObject6,\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport Card from 'react-bootstrap/Card';\nimport axios from 'axios';\nimport { Tweet } from 'react-twitter-widgets';\nimport Carousel from 'react-bootstrap/Carousel';\nimport IconArray from './IconArray';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n//var id = \"634739719\"\n//var id = \"1293416714923683841\"\n//var id = \"192812670\"\n//var id = \"802233409338675200\"\n//var id = \"18256350\"\n//var id = \"2490180804\"\n//var id = \"18670940\"\n//var id = \"486899842\"\n//var id = \"238753895\"\nconst Title = styled.p(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n    &&& {\\n    padding: 1em;\\n    font-size: 30px;\\n    font-weight:bold;\\n}\"])));\n_c = Title;\nconst Subtitle = styled.p(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\\n    &&& {\\n    padding: .05em;\\n    font-size: 16px;\\n}\"])));\nconst Semititle = styled.p(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"\\n    &&& {\\n    padding: .05em;\\n    font-size: 22px;\\n    margin-left: auto;\\n    margin-right: auto;\\n}\"])));\n_c2 = Semititle;\nconst Center = styled.div(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"\\n    &&& {\\n    margin: auto;\\n    text-align: center;\\n}\"])));\n_c3 = Center;\nconst Retweet = styled.p(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral([\"\\n    &&& {\\n    padding: 1em;\\n    font-size: 24px;\\n    font-weight:bold;\\n    margin-left:80px\\n}\"])));\nconst tweetwind = {\n  padding: '1em',\n  width: '840px',\n  maxWidth: '840px',\n  maxHeight: '700px',\n  'overflow-y': 'auto'\n};\nconst square = {\n  width: \"200px\",\n  maxWidth: \"200px\",\n  maxHeight: \"200x\",\n  height: \"200px\",\n  padding: \"0.5em\"\n};\nconst Pop = styled.button(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral([\"{\\n    background:none;\\n    border:none;\\n    margin:0;\\n    padding:0;\\n    cursor: pointer;\\n    color:blue;\\n  }\"])));\nconst tweetpop = {\n  width: '600px',\n  maxWidth: 'none',\n  height: '600px',\n  maxHeight: '800px'\n};\nconst roundButton = {\n  borderRadius: '8px',\n  background: '#ffffff',\n  height: '50px',\n  widght: '100px'\n};\n/*\r\nfunction RenderTweet(tweets, num){\r\n    if (tweets.length < num){\r\n        return (<div></div>);\r\n    } else if (tweets[tweets.length - num]['downstream_r'] + tweets[tweets.length - num]['downstream_n'] <= 0){\r\n        return (<div></div>);\r\n    }\r\n    else{\r\n        return(\r\n            <div>\r\n                <Card style ={{padding:\"3em\"}}>\r\n            <div className='columns'>\r\n                <div className='column'>\r\n                    <Tweet tweetId={tweets[tweets.length - num]['tweet_id_text']} options={{ width: \"50%\", cards: \"hidden\" }}/>\r\n\r\n                    \r\n                </div>\r\n                <div className='column'>\r\n                    <WaffleChart legend_pos = \"right\" title = {tweets[tweets.length - num]['retweets'].toString()} divid={\"td\".concat(num.toString())} vars = {[{name: \"Researchers\", data: tweets[tweets.length - num]['downstream_r']}, {name: \"Non-researchers\", data: tweets[tweets.length - num]['downstream_n']}]} />\r\n                    <Retweet>\r\n                    Retweets: {tweets[tweets.length - num]['retweets']}\r\n                    </Retweet>\r\n                </div>\r\n            </div>\r\n            </Card>\r\n\r\n            <br/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n*/\n\nfunction CalcPlotSize(downstream, min_cols, min_rows, denom) {\n  var num_cols = 1;\n  var num_rows = 1;\n  var f = JSON.parse(downstream);\n  var tot_fsquares = 0;\n\n  for (const key in f) {\n    tot_fsquares = tot_fsquares + Math.round(f[key] / denom);\n  }\n\n  var num = Math.floor(Math.sqrt(tot_fsquares)) + 1;\n  num_cols = Math.max(num, min_cols);\n  num_rows = Math.max(num + 1, min_rows);\n  return [num_cols, num_rows];\n}\n/*\r\nfunction PopButton(tweet_id, downstream, num_cols, num_rows, denom, dict) {\r\n    return (\r\n    <OverlayTrigger trigger=\"click\" rootClose placement=\"top\" overlay={TweetPop(tweet_id, downstream, num_cols, num_rows, denom, dict)}>\r\n    <button style = {roundButton}>See Reach</button>\r\n      \r\n    </OverlayTrigger>\r\n    )\r\n  };\r\n  \r\n  function TweetPop(tweet_id, data, num_cols, num_rows, denom, dict){\r\n    var new_lines = CalcPlotSize(data, num_cols, num_rows, denom)\r\n    num_cols = new_lines[0]\r\n    num_rows = new_lines[1]\r\n    return(\r\n\r\n    <div>\r\n      <Popover id=\"popover-basic\" placement=\"top\" style={tweetpop}>\r\n        <Popover.Title>Sample Tweets</Popover.Title>\r\n        <Popover.Content>\r\n            <IconArray divid = {tweet_id + \"_icon\"} data = {JSON.parse(data)} cols = {num_cols} rows = {num_rows} denom = {denom} series_dict = {dict}/>\r\n        </Popover.Content>\r\n      </Popover>\r\n    </div>\r\n\r\n    )\r\n  }\r\n  */\n\n/*\r\nfunction TweetCarousel(tweets){\r\n    var divs = [] \r\n    for (var i = 0; i < tweets.length; i++){\r\n        divs.push(tweets[i])\r\n    }\r\n    return(\r\n        <Carousel>\r\n            <div>{qtip}</div>\r\n            <div>{qtip}</div>\r\n        </Carousel>\r\n    )\r\n}\r\n*/\n\n\n_c4 = CalcPlotSize;\n\nfunction TweetCarousel(tweets) {\n  return /*#__PURE__*/_jsxDEV(Carousel, {\n    children: tweets.map(item => /*#__PURE__*/_jsxDEV(Carousel.Item, {\n      children: item\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 33\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 197,\n    columnNumber: 9\n  }, this);\n}\n\n_c5 = TweetCarousel;\n\nfunction RenderTweet(tweet_id, downstream, num_cols, num_rows, denom, dict) {\n  return /*#__PURE__*/_jsxDEV(Card, {\n    style: {\n      padding: \"3em\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"columns\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"column\",\n        children: [/*#__PURE__*/_jsxDEV(Center, {\n          children: /*#__PURE__*/_jsxDEV(Semititle, {\n            children: \"Tweet\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Tweet, {\n          tweetId: tweet_id,\n          options: {\n            width: \"100%\",\n            cards: \"hidden\",\n            conversation: \"none\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"column\",\n        children: [/*#__PURE__*/_jsxDEV(Center, {\n          children: /*#__PURE__*/_jsxDEV(Semititle, {\n            children: \"Downstream\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(IconArray, {\n          divid: tweet_id + \"_icon\",\n          data: JSON.parse(downstream),\n          cols: num_cols,\n          rows: num_rows,\n          denom: denom,\n          series_dict: dict\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 11\n    }, this)\n  }, tweet_id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 206,\n    columnNumber: 9\n  }, this);\n  /*\r\n  var new_text = \"\"\r\n   if (text.length > 110){\r\n     new_text = text.slice(0, 110)\r\n     new_text = new_text + \"...\"\r\n  } else{\r\n     new_text = text\r\n  }\r\n   return(\r\n  <div key = {tweet_id}>\r\n      <Card style = {square}>\r\n      <p>{new_text}</p>\r\n      </Card>\r\n      <br/>\r\n  </div>\r\n  )\r\n  */\n}\n\n_c6 = RenderTweet;\n\nfunction MyTweets(props) {\n  _s();\n\n  const _useState = useState(true),\n        _useState2 = _slicedToArray(_useState, 2),\n        isLoading = _useState2[0],\n        setLoading = _useState2[1];\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        tweets = _useState4[0],\n        setTweets = _useState4[1];\n\n  var id = props.id;\n  useEffect(() => {\n    axios.get(\"http://localhost:4001/twitter/retweetsWhereUserID/\".concat(id)).then(response => {\n      setTweets(response.data);\n      setLoading(false);\n    }).catch(error => console.error(\"There was an error retrieving the retweets list: \".concat(error)));\n  }, []);\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Title, {\n        children: \"My Tweets\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 16\n    }, this);\n  }\n  /*\r\n    var col1 = []\r\n  var col2 = []\r\n  var col3 = []\r\n  */\n\n\n  var tweet_array = [];\n  var max = Math.min(tweets.length, 2);\n  max = max + 1;\n  const cols = props.cols;\n  const rows = props.rows;\n  const denom = props.denom;\n  const dict = props.series_dict;\n\n  for (var i = 1; i < max; i++) {\n    /*\r\n    if (i % 3 == 0){\r\n      console.log(\"col1\")\r\n      col1.push(RenderTweet(tweets[i].tweet_id_text, tweets[i].tweet_text))\r\n    }\r\n    if (i % 3 == 1){\r\n      console.log(\"col2\")\r\n      col2.push(RenderTweet(tweets[i].tweet_id_text, tweets[i].tweet_text))\r\n    }\r\n    if (i % 3 == 2){\r\n      console.log(\"col3\")\r\n      col3.push(RenderTweet(tweets[i].tweet_id_text, tweets[i].tweet_text))\r\n    }\r\n    */\n    tweet_array.push(RenderTweet(tweets[tweets.length - i].tweet_id_text, tweets[tweets.length - i].downstream_class, cols, rows, denom, dict));\n    console.log(tweets[tweets.length - i].tweet_id_text);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"columns\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"column\",\n      children: TweetCarousel(tweet_array)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 313,\n    columnNumber: 13\n  }, this);\n  /*\r\n  return (\r\n  <div>\r\n  <Card style ={{padding:\"3em\"}}>\r\n      <Title>My Tweets</Title>\r\n          <div className='columns'>\r\n              <div className='column'>\r\n                  <Title>Tweets</Title>\r\n                  <Tweet tweetId={tweets[tweets.length - 1]['tweet_id_text']} options={{ width: \"50%\", cards: \"hidden\" }}/>\r\n                    \r\n              </div>\r\n              <div className='column'>\r\n                  <Title>Downstream Audience</Title>\r\n                  <WaffleChart title = {tweets[tweets.length - 1]['retweets']} divid=\"td1\" r = {tweets[tweets.length - 1]['downstream_r']} n = {tweets[tweets.length - 1]['downstream_n']}/>\r\n              </div>\r\n          </div>\r\n            <br/>\r\n          <div className='columns'>\r\n              <div className='column'>\r\n                  <Tweet tweetId={tweets[tweets.length - 2]['tweet_id_text']} options={{ width: \"50%\", cards: \"hidden\" }}/>\r\n              </div>\r\n              <div className='column'>\r\n                  <WaffleChart title = {tweets[tweets.length - 2]['retweets']} divid=\"td2\" r = {tweets[tweets.length - 2]['downstream_r']} n = {tweets[tweets.length - 2]['downstream_n']}/>\r\n              </div>\r\n          </div>\r\n            <br/>\r\n          <div className='columns'>\r\n              <div className='column'>\r\n                  <Tweet tweetId={tweets[tweets.length - 3]['tweet_id_text']} options={{ width: \"50%\", cards: \"hidden\" }}/>\r\n              </div>\r\n              <div className='column'>\r\n                  <WaffleChart title = {tweets[tweets.length - 3]['retweets']} divid=\"td3\" r = {tweets[tweets.length - 3]['downstream_r']} n = {tweets[tweets.length - 3]['downstream_n']}/>\r\n              </div>\r\n          </div>\r\n            <br/>\r\n          <div className='columns'>\r\n              <div className='column'>\r\n                  <Tweet tweetId={tweets[tweets.length - 4]['tweet_id_text']} options={{ width: \"50%\", cards: \"hidden\" }}/>\r\n              </div>\r\n              <div className='column'>\r\n                  <WaffleChart title = {tweets[tweets.length - 4]['retweets']} divid=\"td4\" r = {tweets[tweets.length - 4]['downstream_r']} n = {tweets[tweets.length - 4]['downstream_n']}/>\r\n              </div>\r\n          </div>\r\n            <br/>\r\n          <div className='columns'>\r\n              <div className='column'>\r\n                  <Tweet tweetId={tweets[tweets.length - 5]['tweet_id_text']} options={{ width: \"50%\", cards: \"hidden\" }}/>\r\n              </div>\r\n              <div className='column'>\r\n                  <WaffleChart title = {tweets[tweets.length - 5]['retweets']} divid=\"td5\" r = {tweets[tweets.length - 5]['downstream_r']} n = {tweets[tweets.length - 5]['downstream_n']}/>\r\n              </div>\r\n          </div>\r\n    </Card>\r\n  </div>\r\n  );*/\n}\n\n_s(MyTweets, \"2eC+Id8v39Nmueex3OQO1vL/H3E=\");\n\n_c7 = MyTweets;\nexport default MyTweets;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n\n$RefreshReg$(_c, \"Title\");\n$RefreshReg$(_c2, \"Semititle\");\n$RefreshReg$(_c3, \"Center\");\n$RefreshReg$(_c4, \"CalcPlotSize\");\n$RefreshReg$(_c5, \"TweetCarousel\");\n$RefreshReg$(_c6, \"RenderTweet\");\n$RefreshReg$(_c7, \"MyTweets\");","map":{"version":3,"sources":["C:/Users/spenc/Documents/GitHub/hci-com/src/containers/Home/components/MyTweets.tsx"],"names":["React","useEffect","useState","styled","Card","axios","Tweet","Carousel","IconArray","Title","p","Subtitle","Semititle","Center","div","Retweet","tweetwind","padding","width","maxWidth","maxHeight","square","height","Pop","button","tweetpop","roundButton","borderRadius","background","widght","CalcPlotSize","downstream","min_cols","min_rows","denom","num_cols","num_rows","f","JSON","parse","tot_fsquares","key","Math","round","num","floor","sqrt","max","TweetCarousel","tweets","map","item","RenderTweet","tweet_id","dict","cards","conversation","MyTweets","props","isLoading","setLoading","setTweets","id","get","then","response","data","catch","error","console","tweet_array","min","length","cols","rows","series_dict","i","push","tweet_id_text","downstream_class","log"],"mappings":"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,CAACA,MAAM,CAACuB,MAAP,GAAgBI,CAAjB,CAAN,CAA0BG,gBAApE,EAAsFN,IAAtF,EAA4FC,IAA5F,EAAkGxC,KAAlG,EAAyGoB,IAAzG,CAA5B;AACAe,IAAAA,OAAO,CAACW,GAAR,CAAY/B,MAAM,CAACA,MAAM,CAACuB,MAAP,GAAgBI,CAAjB,CAAN,CAA0BE,aAAtC;AAEA;;AAED,sBACM;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA,2BACI;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,gBAEK9B,aAAa,CAACsB,WAAD;AAFlB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADN;AASF;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQC;;GApIQb,Q;;MAAAA,Q;AAuIT,eAAeA,QAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport {space, color, layout} from 'styled-system';\r\nimport Card from 'react-bootstrap/Card';\r\nimport CardColumns from 'react-bootstrap/CardColumns';\r\nimport WaffleChart from './WaffleChart';\r\nimport axios from 'axios'\r\nimport { Tweet} from 'react-twitter-widgets'\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger'\r\nimport Popover from 'react-bootstrap/Popover'\r\nimport Carousel from 'react-bootstrap/Carousel'\r\nimport IconArray from './IconArray';\r\nimport * as am4core from \"@amcharts/amcharts4/core\";\r\n\r\n\r\n//var id = \"634739719\"\r\n//var id = \"1293416714923683841\"\r\n//var id = \"192812670\"\r\n//var id = \"802233409338675200\"\r\n//var id = \"18256350\"\r\n//var id = \"2490180804\"\r\n//var id = \"18670940\"\r\n//var id = \"486899842\"\r\n//var id = \"238753895\"\r\n\r\nconst Title = styled.p`\r\n    &&& {\r\n    padding: 1em;\r\n    font-size: 30px;\r\n    font-weight:bold;\r\n}`\r\n\r\nconst Subtitle = styled.p`\r\n    &&& {\r\n    padding: .05em;\r\n    font-size: 16px;\r\n}`\r\n\r\nconst Semititle = styled.p`\r\n    &&& {\r\n    padding: .05em;\r\n    font-size: 22px;\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n}`\r\n\r\nconst Center = styled.div`\r\n    &&& {\r\n    margin: auto;\r\n    text-align: center;\r\n}`\r\n\r\nconst Retweet = styled.p`\r\n    &&& {\r\n    padding: 1em;\r\n    font-size: 24px;\r\n    font-weight:bold;\r\n    margin-left:80px\r\n}`\r\n\r\nconst tweetwind = {\r\n    padding: '1em',\r\n    width: '840px',\r\n    maxWidth: '840px',\r\n    maxHeight: '700px',\r\n    'overflow-y': 'auto'\r\n    \r\n  };\r\n\r\nconst square = {\r\n    width: \"200px\",\r\n    maxWidth: \"200px\",\r\n    maxHeight: \"200x\",\r\n    height: \"200px\",\r\n    padding: \"0.5em\",\r\n}\r\n\r\nconst Pop = styled.button `{\r\n    background:none;\r\n    border:none;\r\n    margin:0;\r\n    padding:0;\r\n    cursor: pointer;\r\n    color:blue;\r\n  }`\r\n  \r\n  const tweetpop = {\r\n    width: '600px',\r\n    maxWidth: 'none',\r\n    height: '600px',\r\n    maxHeight: '800px'\r\n    \r\n  };\r\n\r\n  const roundButton = {\r\n      borderRadius: '8px',\r\n      background: '#ffffff',\r\n      height: '50px',\r\n      widght: '100px'\r\n  }\r\n\r\n/*\r\nfunction RenderTweet(tweets, num){\r\n    if (tweets.length < num){\r\n        return (<div></div>);\r\n    } else if (tweets[tweets.length - num]['downstream_r'] + tweets[tweets.length - num]['downstream_n'] <= 0){\r\n        return (<div></div>);\r\n    }\r\n    else{\r\n        return(\r\n            <div>\r\n                <Card style ={{padding:\"3em\"}}>\r\n            <div className='columns'>\r\n                <div className='column'>\r\n                    <Tweet tweetId={tweets[tweets.length - num]['tweet_id_text']} options={{ width: \"50%\", cards: \"hidden\" }}/>\r\n\r\n                    \r\n                </div>\r\n                <div className='column'>\r\n                    <WaffleChart legend_pos = \"right\" title = {tweets[tweets.length - num]['retweets'].toString()} divid={\"td\".concat(num.toString())} vars = {[{name: \"Researchers\", data: tweets[tweets.length - num]['downstream_r']}, {name: \"Non-researchers\", data: tweets[tweets.length - num]['downstream_n']}]} />\r\n                    <Retweet>\r\n                    Retweets: {tweets[tweets.length - num]['retweets']}\r\n                    </Retweet>\r\n                </div>\r\n            </div>\r\n            </Card>\r\n\r\n            <br/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n*/\r\n\r\nfunction CalcPlotSize(downstream, min_cols, min_rows, denom){\r\n    var num_cols = 1\r\n    var num_rows = 1\r\n    var f = JSON.parse(downstream)\r\n    var tot_fsquares = 0\r\n\r\n    for (const key in f){\r\n        tot_fsquares = tot_fsquares + Math.round(f[key] / denom)\r\n    }\r\n\r\n    var num = Math.floor(Math.sqrt(tot_fsquares)) + 1\r\n    num_cols = Math.max(num, min_cols)\r\n    num_rows = Math.max(num + 1, min_rows)\r\n    return([num_cols, num_rows])\r\n}\r\n\r\n/*\r\nfunction PopButton(tweet_id, downstream, num_cols, num_rows, denom, dict) {\r\n    return (\r\n    <OverlayTrigger trigger=\"click\" rootClose placement=\"top\" overlay={TweetPop(tweet_id, downstream, num_cols, num_rows, denom, dict)}>\r\n    <button style = {roundButton}>See Reach</button>\r\n      \r\n    </OverlayTrigger>\r\n    )\r\n  };\r\n  \r\n  function TweetPop(tweet_id, data, num_cols, num_rows, denom, dict){\r\n    var new_lines = CalcPlotSize(data, num_cols, num_rows, denom)\r\n    num_cols = new_lines[0]\r\n    num_rows = new_lines[1]\r\n    return(\r\n\r\n    <div>\r\n      <Popover id=\"popover-basic\" placement=\"top\" style={tweetpop}>\r\n        <Popover.Title>Sample Tweets</Popover.Title>\r\n        <Popover.Content>\r\n            <IconArray divid = {tweet_id + \"_icon\"} data = {JSON.parse(data)} cols = {num_cols} rows = {num_rows} denom = {denom} series_dict = {dict}/>\r\n        </Popover.Content>\r\n      </Popover>\r\n    </div>\r\n\r\n    )\r\n  }\r\n  */\r\n\r\n  /*\r\n  function TweetCarousel(tweets){\r\n      var divs = [] \r\n      for (var i = 0; i < tweets.length; i++){\r\n          divs.push(tweets[i])\r\n      }\r\n      return(\r\n          <Carousel>\r\n              <div>{qtip}</div>\r\n              <div>{qtip}</div>\r\n          </Carousel>\r\n      )\r\n  }\r\n  */\r\n\r\n  function TweetCarousel(tweets) {\r\n      return(\r\n        <Carousel>\r\n            {tweets.map(item => <Carousel.Item>{item}</Carousel.Item>)}\r\n      </Carousel>\r\n      )\r\n  }\r\n\r\nfunction RenderTweet(tweet_id, downstream, num_cols, num_rows, denom, dict){\r\n\r\n    return(\r\n        <Card key = {tweet_id} style ={{padding:\"3em\"}}>\r\n          <div className='columns'>\r\n            <div className='column'>\r\n              <Center>\r\n                <Semititle>Tweet</Semititle>\r\n              </Center>\r\n              <Tweet tweetId={tweet_id} options={{ width: \"100%\", cards: \"hidden\", conversation: \"none\"}}/>\r\n              {/*PopButton(tweet_id, downstream, num_cols, num_rows, denom, dict)*/}\r\n            </div>\r\n            <div className='column'>\r\n              <Center>\r\n                <Semititle>Downstream</Semititle>\r\n              </Center>\r\n              <IconArray divid = {tweet_id + \"_icon\"} data = {JSON.parse(downstream)} cols = {num_cols} rows = {num_rows} denom = {denom} series_dict = {dict}/>\r\n            </div>\r\n          </div>\r\n        </Card>\r\n    )\r\n\r\n\r\n    /*\r\n   var new_text = \"\"\r\n\r\n   if (text.length > 110){\r\n       new_text = text.slice(0, 110)\r\n       new_text = new_text + \"...\"\r\n   } else{\r\n       new_text = text\r\n   }\r\n\r\n   return(\r\n    <div key = {tweet_id}>\r\n        <Card style = {square}>\r\n        <p>{new_text}</p>\r\n        </Card>\r\n        <br/>\r\n    </div>\r\n   )\r\n   */\r\n   \r\n}\r\n\r\n\r\n\r\n\r\nfunction MyTweets(props) {\r\n    const [isLoading, setLoading] = useState(true);\r\n    const [tweets, setTweets] = useState([]);\r\n    var id = props.id\r\n  \r\n    useEffect(() => {\r\n        axios\r\n        .get(`http://localhost:4001/twitter/retweetsWhereUserID/${id}`)\r\n        .then(response => {\r\n          setTweets(response.data);\r\n          setLoading(false);\r\n        })\r\n        .catch(error => console.error(`There was an error retrieving the retweets list: ${error}`));\r\n      }, []);\r\n\r\n      if (isLoading) {\r\n        return <div>\r\n\r\n            <Title>My Tweets</Title>\r\n            <p>Loading...</p>\r\n \r\n        </div>\r\n      }\r\n\r\n      /*\r\n\r\n      var col1 = []\r\n      var col2 = []\r\n      var col3 = []\r\n      */\r\n      var tweet_array = []\r\n\r\n      var max = Math.min(tweets.length, 2)\r\n      max = max + 1\r\n\r\n      const cols = props.cols\r\n      const rows = props.rows\r\n      const denom = props.denom\r\n      const dict = props.series_dict\r\n\r\n      for (var i = 1; i < max; i++){\r\n          /*\r\n        if (i % 3 == 0){\r\n            console.log(\"col1\")\r\n            col1.push(RenderTweet(tweets[i].tweet_id_text, tweets[i].tweet_text))\r\n        }\r\n        if (i % 3 == 1){\r\n            console.log(\"col2\")\r\n            col2.push(RenderTweet(tweets[i].tweet_id_text, tweets[i].tweet_text))\r\n        }\r\n        if (i % 3 == 2){\r\n            console.log(\"col3\")\r\n            col3.push(RenderTweet(tweets[i].tweet_id_text, tweets[i].tweet_text))\r\n        }\r\n        */\r\n\r\n       tweet_array.push(RenderTweet(tweets[tweets.length - i].tweet_id_text, tweets[tweets.length - i].downstream_class, cols, rows, denom, dict))\r\n       console.log(tweets[tweets.length - i].tweet_id_text)\r\n\r\n      }\r\n\r\n      return (\r\n            <div className='columns'>\r\n                <div className='column'>\r\n                    {/*tweet_array*/}\r\n                    {TweetCarousel(tweet_array)}\r\n                </div>\r\n            </div>\r\n        );\r\n    \r\n    /*\r\n    return (\r\n<div>\r\n    <Card style ={{padding:\"3em\"}}>\r\n        <Title>My Tweets</Title>\r\n            <div className='columns'>\r\n                <div className='column'>\r\n                    <Title>Tweets</Title>\r\n                    <Tweet tweetId={tweets[tweets.length - 1]['tweet_id_text']} options={{ width: \"50%\", cards: \"hidden\" }}/>\r\n\r\n                    \r\n                </div>\r\n                <div className='column'>\r\n                    <Title>Downstream Audience</Title>\r\n                    <WaffleChart title = {tweets[tweets.length - 1]['retweets']} divid=\"td1\" r = {tweets[tweets.length - 1]['downstream_r']} n = {tweets[tweets.length - 1]['downstream_n']}/>\r\n                </div>\r\n            </div>\r\n\r\n            <br/>\r\n            <div className='columns'>\r\n                <div className='column'>\r\n                    <Tweet tweetId={tweets[tweets.length - 2]['tweet_id_text']} options={{ width: \"50%\", cards: \"hidden\" }}/>\r\n                </div>\r\n                <div className='column'>\r\n                    <WaffleChart title = {tweets[tweets.length - 2]['retweets']} divid=\"td2\" r = {tweets[tweets.length - 2]['downstream_r']} n = {tweets[tweets.length - 2]['downstream_n']}/>\r\n                </div>\r\n            </div>\r\n\r\n            <br/>\r\n            <div className='columns'>\r\n                <div className='column'>\r\n                    <Tweet tweetId={tweets[tweets.length - 3]['tweet_id_text']} options={{ width: \"50%\", cards: \"hidden\" }}/>\r\n                </div>\r\n                <div className='column'>\r\n                    <WaffleChart title = {tweets[tweets.length - 3]['retweets']} divid=\"td3\" r = {tweets[tweets.length - 3]['downstream_r']} n = {tweets[tweets.length - 3]['downstream_n']}/>\r\n                </div>\r\n            </div>\r\n\r\n            <br/>\r\n            <div className='columns'>\r\n                <div className='column'>\r\n                    <Tweet tweetId={tweets[tweets.length - 4]['tweet_id_text']} options={{ width: \"50%\", cards: \"hidden\" }}/>\r\n                </div>\r\n                <div className='column'>\r\n                    <WaffleChart title = {tweets[tweets.length - 4]['retweets']} divid=\"td4\" r = {tweets[tweets.length - 4]['downstream_r']} n = {tweets[tweets.length - 4]['downstream_n']}/>\r\n                </div>\r\n            </div>\r\n\r\n            <br/>\r\n            <div className='columns'>\r\n                <div className='column'>\r\n                    <Tweet tweetId={tweets[tweets.length - 5]['tweet_id_text']} options={{ width: \"50%\", cards: \"hidden\" }}/>\r\n                </div>\r\n                <div className='column'>\r\n                    <WaffleChart title = {tweets[tweets.length - 5]['retweets']} divid=\"td5\" r = {tweets[tweets.length - 5]['downstream_r']} n = {tweets[tweets.length - 5]['downstream_n']}/>\r\n                </div>\r\n            </div>\r\n\r\n    </Card>\r\n\r\n</div>\r\n);*/\r\n}\r\n\r\n\r\nexport default MyTweets;"]},"metadata":{},"sourceType":"module"}