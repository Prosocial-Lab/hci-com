{"ast":null,"code":"/**\r\n * ForceDirectedLink module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Sprite } from \"../../core/Sprite\";\nimport { registry } from \"../../core/Registry\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport * as $path from \"../../core/rendering/Path\";\nimport { percent, Percent } from \"../../core/utils/Percent\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * A class that builds links between [[ForceDirectedNode]] elements.\r\n *\r\n * @see {@link IForceDirectedLinkEvents} for a list of available events\r\n * @see {@link IForceDirectedLinkAdapters} for a list of available Adapters\r\n * @since 4.3.8\r\n * @important\r\n */\n\nvar ForceDirectedLink =\n/** @class */\nfunction (_super) {\n  __extends(ForceDirectedLink, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function ForceDirectedLink() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"ForceDirectedLink\";\n    var interfaceColors = new InterfaceColorSet();\n    _this.fillOpacity = 0;\n    _this.strokeOpacity = 0.5;\n    _this.stroke = interfaceColors.getFor(\"grid\");\n    _this.isMeasured = false;\n    _this.nonScalingStroke = true;\n    _this.interactionsEnabled = false;\n    _this.distance = 1.5;\n    _this.strength = 1;\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Validates element:\r\n   * * Triggers events\r\n   * * Redraws the element\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  ForceDirectedLink.prototype.validate = function () {\n    _super.prototype.validate.call(this);\n\n    var source = this.source;\n    var target = this.target;\n\n    if (source && target) {\n      this.path = $path.moveTo({\n        x: source.pixelX,\n        y: source.pixelY\n      }) + $path.lineTo({\n        x: target.pixelX,\n        y: target.pixelY\n      });\n\n      if (source.isHidden || target.isHidden || source.isHiding || target.isHiding) {\n        this.hide();\n      } else {\n        this.show();\n      }\n    }\n  };\n\n  Object.defineProperty(ForceDirectedLink.prototype, \"source\", {\n    /**\r\n     * @return Source node\r\n     */\n    get: function get() {\n      return this._source;\n    },\n\n    /**\r\n     * Source node - a node link starts from.\r\n     *\r\n     * @param  value  Source node\r\n     */\n    set: function set(value) {\n      if (value) {\n        this._source = value;\n\n        this._disposers.push(value.events.on(\"positionchanged\", this.invalidate, this, false));\n\n        this._disposers.push(value.events.on(\"validated\", this.invalidate, this, false));\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ForceDirectedLink.prototype, \"target\", {\n    /**\r\n     * @return Target node\r\n     */\n    get: function get() {\n      return this._target;\n    },\n\n    /**\r\n     * Target node - a node link ends at.\r\n     *\r\n     * @param  value  Target node\r\n     */\n    set: function set(value) {\n      if (value) {\n        this._target = value;\n\n        this._disposers.push(value.events.on(\"positionchanged\", this.invalidate, this, false));\n\n        this._disposers.push(value.events.on(\"validated\", this.invalidate, this, false));\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ForceDirectedLink.prototype, \"distance\", {\n    /**\r\n     * @return Distance\r\n     */\n    get: function get() {\n      if (this._adapterO) {\n        if (this._adapterO.isEnabled(\"distance\")) {\n          return this._adapterO.apply(\"distance\", this.properties.distance);\n        }\n      }\n\n      return this.properties.distance;\n    },\n\n    /**\r\n     * Distance between centers of source and target nodes.\r\n     *\r\n     * This is relative to the radii to sum of both source and target nodes.\r\n     *\r\n     * E.g. if this would be set to `1` both nodes would be touching each other.\r\n     *\r\n     * @default 1.5\r\n     * @param  value  Distance\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"distance\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ForceDirectedLink.prototype, \"strength\", {\n    /**\r\n     * @return Strength\r\n     */\n    get: function get() {\n      if (this._adapterO) {\n        if (this._adapterO.isEnabled(\"strength\")) {\n          return this._adapterO.apply(\"strength\", this.properties.strength);\n        }\n      }\n\n      return this.properties.strength;\n    },\n\n    /**\r\n     * Relative \"strength\" of the traction between linked nodes.\r\n     *\r\n     * Available values: 0 to XX.\r\n     *\r\n     * The bigger the number, the more rigid the link and the less it will\r\n     * stretch when node is dragged.\r\n     *\r\n     * Carefully with very big numbers: nodes and links might start behaving\r\n     * quite \"nerviously\".\r\n     *\r\n     * @default 1\r\n     * @param  value  Strength\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"strength\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * X coordinate for the slice tooltip.\r\n   *\r\n   * @ignore\r\n   * @return X\r\n   */\n\n  ForceDirectedLink.prototype.getTooltipX = function () {\n    var x = this.getPropertyValue(\"tooltipX\");\n\n    if (!(x instanceof Percent)) {\n      x = percent(50);\n    }\n\n    if (x instanceof Percent) {\n      var source = this.source;\n      var target = this.target;\n\n      if (source && target) {\n        var x1 = source.pixelX;\n        var x2 = target.pixelX;\n        return x1 + (x2 - x1) * x.value;\n      }\n    }\n\n    return 0;\n  };\n  /**\r\n   * Y coordinate for the slice tooltip.\r\n   *\r\n   * @ignore\r\n   * @return Y\r\n   */\n\n\n  ForceDirectedLink.prototype.getTooltipY = function () {\n    var y = this.getPropertyValue(\"tooltipY\");\n\n    if (!(y instanceof Percent)) {\n      y = percent(50);\n    }\n\n    if (y instanceof Percent) {\n      var source = this.source;\n      var target = this.target;\n\n      if (source && target) {\n        var y1 = source.pixelY;\n        var y2 = target.pixelY;\n        return y1 + (y2 - y1) * y.value;\n      }\n    }\n\n    return 0;\n  };\n\n  return ForceDirectedLink;\n}(Sprite);\n\nexport { ForceDirectedLink };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"ForceDirectedLink\"] = ForceDirectedLink;","map":{"version":3,"sources":["../../../../../src/.internal/plugins/forceDirected/ForceDirectedLink.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * ForceDirectedLink module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite, ISpriteProperties, ISpriteAdapters, ISpriteEvents } from \"../../core/Sprite\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { ForceDirectedNode } from \"./ForceDirectedNode\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ForceDirectedLink]].\r\n */\r\nexport interface IForceDirectedLinkProperties extends ISpriteProperties {\r\n\r\n\t/**\r\n\t * Distance between centers of source and target nodes.\r\n\t */\r\n\tdistance?: number;\r\n\r\n\t/**\r\n\t * Strength of the \"traction\" between source and target nodes.\r\n\t */\r\n\tstrength?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[ForceDirectedLink]].\r\n */\r\nexport interface IForceDirectedLinkEvents extends ISpriteEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ForceDirectedLink]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IForceDirectedLinkAdapters extends ISpriteAdapters, IForceDirectedLinkProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A class that builds links between [[ForceDirectedNode]] elements.\r\n *\r\n * @see {@link IForceDirectedLinkEvents} for a list of available events\r\n * @see {@link IForceDirectedLinkAdapters} for a list of available Adapters\r\n * @since 4.3.8\r\n * @important\r\n */\r\nexport class ForceDirectedLink extends Sprite {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IForceDirectedLinkProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IForceDirectedLinkAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IForceDirectedLinkEvents;\r\n\r\n\t/**\r\n\t * Link source node\r\n\t */\r\n\tprotected _source: ForceDirectedNode;\r\n\r\n\t/**\r\n\t * Link parent node\r\n\t */\r\n\tprotected _target: ForceDirectedNode;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ForceDirectedLink\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.fillOpacity = 0;\r\n\t\tthis.strokeOpacity = 0.5;\r\n\t\tthis.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.nonScalingStroke = true;\r\n\r\n\t\tthis.interactionsEnabled = false;\r\n\r\n\t\tthis.distance = 1.5;\r\n\t\tthis.strength = 1;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates element:\r\n\t * * Triggers events\r\n\t * * Redraws the element\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\tlet source = this.source;\r\n\t\tlet target = this.target;\r\n\t\tif (source && target) {\r\n\t\t\tthis.path = $path.moveTo({ x: source.pixelX, y: source.pixelY }) + $path.lineTo({ x: target.pixelX, y: target.pixelY });\r\n\r\n\t\t\tif (source.isHidden || target.isHidden || source.isHiding || target.isHiding) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.show();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Source node - a node link starts from.\r\n\t * \r\n\t * @param  value  Source node\r\n\t */\r\n\tpublic set source(value: ForceDirectedNode) {\r\n\t\tif (value) {\r\n\t\t\tthis._source = value;\r\n\t\t\tthis._disposers.push(value.events.on(\"positionchanged\", this.invalidate, this, false));\r\n\t\t\tthis._disposers.push(value.events.on(\"validated\", this.invalidate, this, false));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Source node\r\n\t */\r\n\tpublic get source(): ForceDirectedNode {\r\n\t\treturn this._source;\r\n\t}\r\n\r\n\t/**\r\n\t * Target node - a node link ends at.\r\n\t * \r\n\t * @param  value  Target node\r\n\t */\r\n\tpublic set target(value: ForceDirectedNode) {\r\n\t\tif (value) {\r\n\t\t\tthis._target = value;\r\n\t\t\tthis._disposers.push(value.events.on(\"positionchanged\", this.invalidate, this, false));\r\n\t\t\tthis._disposers.push(value.events.on(\"validated\", this.invalidate, this, false));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Target node\r\n\t */\r\n\tpublic get target(): ForceDirectedNode {\r\n\t\treturn this._target;\r\n\t}\r\n\r\n\t/**\r\n\t * Distance between centers of source and target nodes.\r\n\t *\r\n\t * This is relative to the radii to sum of both source and target nodes.\r\n\t *\r\n\t * E.g. if this would be set to `1` both nodes would be touching each other.\r\n\t *\r\n\t * @default 1.5\r\n\t * @param  value  Distance\r\n\t */\r\n\tpublic set distance(value: number) {\r\n\t\tthis.setPropertyValue(\"distance\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Distance\r\n\t */\r\n\tpublic get distance(): number {\r\n\t\tif (this._adapterO) {\r\n\t\t\tif (this._adapterO.isEnabled(\"distance\")) {\r\n\t\t\t\treturn this._adapterO.apply(\"distance\", this.properties.distance);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.properties.distance;\r\n\t}\r\n\r\n\t/**\r\n\t * Relative \"strength\" of the traction between linked nodes.\r\n\t *\r\n\t * Available values: 0 to XX.\r\n\t *\r\n\t * The bigger the number, the more rigid the link and the less it will\r\n\t * stretch when node is dragged.\r\n\t *\r\n\t * Carefully with very big numbers: nodes and links might start behaving\r\n\t * quite \"nerviously\".\r\n\t *\r\n\t * @default 1\r\n\t * @param  value  Strength\r\n\t */\r\n\tpublic set strength(value: number) {\r\n\t\tthis.setPropertyValue(\"strength\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Strength\r\n\t */\r\n\tpublic get strength(): number {\r\n\t\tif (this._adapterO) {\r\n\t\t\tif (this._adapterO.isEnabled(\"strength\")) {\r\n\t\t\t\treturn this._adapterO.apply(\"strength\", this.properties.strength);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.properties.strength;\r\n\t}\r\n\r\n\t/**\r\n\t * X coordinate for the slice tooltip.\r\n\t *\r\n\t * @ignore\r\n\t * @return X\r\n\t */\r\n\tpublic getTooltipX(): number {\r\n\t\tlet x = this.getPropertyValue(\"tooltipX\");\r\n\t\tif (!(x instanceof Percent)) {\r\n\t\t\tx = percent(50);\r\n\t\t}\r\n\t\tif (x instanceof Percent) {\r\n\t\t\tlet source = this.source;\r\n\t\t\tlet target = this.target;\r\n\t\t\tif (source && target) {\r\n\t\t\t\tlet x1 = source.pixelX;\r\n\t\t\t\tlet x2 = target.pixelX;\r\n\t\t\t\treturn x1 + (x2 - x1) * x.value;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Y coordinate for the slice tooltip.\r\n\t *\r\n\t * @ignore\r\n\t * @return Y\r\n\t */\r\n\tpublic getTooltipY(): number {\r\n\t\tlet y = this.getPropertyValue(\"tooltipY\");\r\n\t\tif (!(y instanceof Percent)) {\r\n\t\t\ty = percent(50);\r\n\t\t}\r\n\t\tif (y instanceof Percent) {\r\n\t\t\tlet source = this.source;\r\n\t\t\tlet target = this.target;\r\n\t\t\tif (source && target) {\r\n\t\t\t\tlet y1 = source.pixelY;\r\n\t\t\t\tlet y2 = target.pixelY;\r\n\t\t\t\treturn y1 + (y2 - y1) * y.value;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ForceDirectedLink\"] = ForceDirectedLink;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}