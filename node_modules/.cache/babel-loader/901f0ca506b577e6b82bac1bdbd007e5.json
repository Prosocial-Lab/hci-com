{"ast":null,"code":"import _slicedToArray from \"C:/Users/spenc/Documents/GitHub/hci-com/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"C:/Users/spenc/Documents/GitHub/hci-com/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\spenc\\\\Documents\\\\GitHub\\\\hci-com\\\\src\\\\containers\\\\Home\\\\components\\\\IndividualStats.tsx\",\n    _templateObject,\n    _templateObject2,\n    _templateObject3,\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport Card from 'react-bootstrap/Card';\nimport axios from 'axios';\nimport IconArray from './IconArray';\nimport BubbleChart from './BubbleChart';\nimport 'bootstrap/dist/css/bootstrap.min.css'; //var id = \"634739719\"\n//var id = \"1293416714923683841\"\n//var id = \"192812670\"\n//var id = \"802233409338675200\"\n//var id = \"18256350\"\n//var id = \"2490180804\"\n//var id = \"18670940\"\n//var id = \"486899842\"\n//var id = \"238753895\"\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar id = \"247943631\";\nconst Title = styled.p(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n    &&& {\\n    font-size: 30px;\\n    font-weight:bold;\\n}\"])));\n_c = Title;\nconst Subtitle = styled.p(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\\n    &&& {\\n    padding: .05em;\\n    font-size: 24px;\\n}\"])));\n_c2 = Subtitle;\nconst Poptitle = styled.p(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"\\n    &&& {\\n    padding: 0.3em;\\n    font-size: 24px;\\n}\"])));\nconst vizpop = {\n  width: '860px',\n  maxWidth: 'none'\n};\nconst linepop = {\n  width: '700px',\n  maxWidth: 'none'\n};\n\nfunction IndividualStats(props) {\n  _s();\n\n  const _useState = useState(true),\n        _useState2 = _slicedToArray(_useState, 2),\n        isLoading = _useState2[0],\n        setLoading = _useState2[1];\n\n  const _useState3 = useState(true),\n        _useState4 = _slicedToArray(_useState3, 2),\n        isLoading2 = _useState4[0],\n        setLoading2 = _useState4[1];\n\n  const _useState5 = useState([]),\n        _useState6 = _slicedToArray(_useState5, 2),\n        user = _useState6[0],\n        setUser = _useState6[1];\n\n  var num_cols = 10;\n  var num_rows = 20;\n  var denom = 50;\n  var ids = [];\n  /*\r\n  const [isLoading2, setLoading2] = useState(true);\r\n  const [med, setMed] = useState([]);\r\n  */\n\n  useEffect(() => {\n    axios.get(\"http://localhost:4001/twitter/userWhereID/\".concat(id)).then(response => {\n      setUser(response.data);\n      setLoading(false);\n    }).catch(error => console.error(\"There was an error retrieving the retweets list: \".concat(error)));\n    axios.get(\"http://localhost:4001/twitter/audienceWhereIDs\".concat(ids)).then(response => {\n      setMed(response.data);\n      setLoading2(false);\n    }).catch(error => console.error(\"There was an error retrieving the median list: \".concat(error)));\n  }, []);\n\n  if (isLoading || isLoading2) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        children: [/*#__PURE__*/_jsxDEV(Title, {\n          children: \"My Tweets\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 16\n    }, this);\n  } else {\n    var f = JSON.parse(user[0]['followers_class']);\n    var tot_fsquares = 0;\n\n    for (const key in f) {\n      tot_fsquares = tot_fsquares + Math.round(f[key] / denom);\n    }\n\n    var d = JSON.parse(user[0]['median_downstream_class']);\n    var tot_dsquares = 0;\n\n    for (const key in d) {\n      tot_dsquares = tot_dsquares + Math.round(d[key] / denom);\n    }\n\n    var num = Math.max(tot_fsquares, tot_dsquares);\n    num = Math.floor(Math.sqrt(num)) + 1;\n    num_cols = num;\n    num_rows = num + 1;\n  }\n  /*\r\n  //Followers Popover\r\n  const pop_followers = (\r\n    <Popover id=\"popover-basic\" placement=\"bottom\" style={vizpop}>\r\n        <Popover.Title>Median Followers</Popover.Title>\r\n      <Popover.Content>\r\n      <Card>\r\n        <div className=\"columns\">\r\n        <div className=\"column\">\r\n        <Poptitle>Community Median</Poptitle>\r\n      <WaffleChart legend_pos = \"right\" divid = \"medfollowers\" vars = {[{name: \"Researchers\", data: med[med.length - 1]['researchers']}, {name: \"Non-researchers\", data: med[med.length-1]['non_researchers']}]} r = {med[med.length - 1]['researchers']} n = {med[med.length - 1]['non_researchers']} />\r\n      </div>\r\n      <div className=\"column\">\r\n        <Poptitle>My Followers</Poptitle>\r\n        <WaffleChart divid = \"myfollowerscomp\" vars = {[{name: \"Researchers\", data: snaps[snaps.length - 1]['researchers']}, {name: \"Non-researchers\", data: snaps[snaps.length-1]['non_researchers']}]} />\r\n        </div>\r\n        </div>\r\n        </Card>\r\n      </Popover.Content>\r\n    </Popover>\r\n  );\r\n  \r\n  const PopFollowers = () => (\r\n    <OverlayTrigger trigger=\"click\" placement=\"right\" overlay={pop_followers}>\r\n    <Button variant=\"outline-primary\">Compare to Community Median</Button>\r\n      \r\n    </OverlayTrigger>\r\n  );\r\n    //Downstream Popover\r\n  const pop_downstream = (\r\n    <Popover id=\"popover-basic\" placement=\"top\" style={vizpop}>\r\n        <Popover.Title>Median Downstream</Popover.Title>\r\n      <Popover.Content>\r\n        <Card>\r\n        <div className=\"columns\">\r\n        <div className=\"column\">\r\n        <Poptitle>Community Median</Poptitle>\r\n        <WaffleChart legend_pos = \"right\" divid = \"meddownstream\" vars = {[{name: \"Researchers\", data: med[med.length - 1]['median_down_r']}, {name: \"Non-researchers\", data: med[med.length-1]['median_down_n']}]} />\r\n        </div>\r\n        <div className=\"column\">\r\n        <Poptitle>My Downstream</Poptitle>\r\n        <WaffleChart divid = \"mydownstreamcomp\" vars = {[{name: \"Researchers\", data: snaps[snaps.length - 1]['median_down_r']}, {name: \"Non-researchers\", data: snaps[snaps.length-1]['median_down_n']}]} />\r\n        </div>\r\n        </div>\r\n        </Card>\r\n      </Popover.Content>\r\n    </Popover>\r\n  );\r\n  \r\n  const PopDownstream = () => (\r\n    <OverlayTrigger trigger=\"click\" placement=\"right\" overlay={pop_downstream}>\r\n    <Button variant=\"outline-primary\">Compare to Community Median</Button>\r\n      \r\n    </OverlayTrigger>\r\n  );\r\n    //Growth Popover\r\n  const pop_growth = (\r\n    <Popover id=\"popover-basic\" placement=\"top\" style={linepop}>\r\n      <Popover.Content>\r\n          <Poptitle>Community Median</Poptitle>\r\n      <LineChart data = {snaps} med = {med} id = {\"indlinemed\"} dv = \"total_followers\" yaxis = \"Followers\"/>\r\n        </Popover.Content>\r\n    </Popover>\r\n  );\r\n  \r\n  const PopGrowth= () => (\r\n    <OverlayTrigger trigger=\"click\" placement=\"right\" overlay={pop_growth}>\r\n    <Button variant=\"outline-primary\">Compare to Community Median</Button>\r\n    </OverlayTrigger>\r\n  );\r\n    //Tweet Popover\r\n  const pop_tweet = (\r\n    <Popover id=\"popover-basic\" placement=\"top\" style={linepop}>\r\n      <Popover.Content>\r\n      <Poptitle>Community Median</Poptitle>\r\n      <LineChart data = {snaps} med = {med} id = {\"indlinemed2\"} dv = \"total_tweets\" yaxis = \"Tweets\"/>\r\n      </Popover.Content>\r\n    </Popover>\r\n  );\r\n  \r\n  const PopTweet= () => (\r\n    <OverlayTrigger trigger=\"click\" placement=\"right\" overlay={pop_tweet}>\r\n    <Button variant=\"outline-primary\">Compare to Community Median</Button>\r\n    </OverlayTrigger>\r\n  ); */\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Card, {\n      style: {\n        padding: \"2em\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Title, {\n        children: \"My Statistics\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"columns\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"column\",\n          children: [/*#__PURE__*/_jsxDEV(Subtitle, {\n            children: \"My Followers\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(IconArray, {\n            divid: \"followers_icon\",\n            data: JSON.parse(user[0]['followers_class']),\n            cols: num_cols,\n            rows: num_rows\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"column\",\n          children: [/*#__PURE__*/_jsxDEV(Subtitle, {\n            children: \"My Downstream Audience\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(IconArray, {\n            divid: \"downstream_icon\",\n            data: JSON.parse(user[0]['median_downstream_class']),\n            cols: num_cols,\n            rows: num_rows\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"columns\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"column\",\n          children: [/*#__PURE__*/_jsxDEV(Subtitle, {\n            children: \"Followers' Top Keywords\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(BubbleChart, {\n            divid: \"f_bubble\",\n            data: JSON.parse(user[0]['follower_keywords'])\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"column\",\n          children: [/*#__PURE__*/_jsxDEV(Subtitle, {\n            children: \"Downstream Top Keywords\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(BubbleChart, {\n            divid: \"d_bubble\",\n            data: JSON.parse(user[0]['downstream_keywords'])\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 219,\n    columnNumber: 1\n  }, this);\n}\n\n_s(IndividualStats, \"cQamr3JBAbHftYxXQrAKwNbv87I=\");\n\n_c3 = IndividualStats;\n;\nexport default IndividualStats;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Title\");\n$RefreshReg$(_c2, \"Subtitle\");\n$RefreshReg$(_c3, \"IndividualStats\");","map":{"version":3,"sources":["C:/Users/spenc/Documents/GitHub/hci-com/src/containers/Home/components/IndividualStats.tsx"],"names":["React","useEffect","useState","styled","Card","axios","IconArray","BubbleChart","id","Title","p","Subtitle","Poptitle","vizpop","width","maxWidth","linepop","IndividualStats","props","isLoading","setLoading","isLoading2","setLoading2","user","setUser","num_cols","num_rows","denom","ids","get","then","response","data","catch","error","console","setMed","f","JSON","parse","tot_fsquares","key","Math","round","d","tot_dsquares","num","max","floor","sqrt","padding"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport {space, color, layout} from 'styled-system';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Popover from 'react-bootstrap/Popover'\r\nimport Overlay from 'react-bootstrap/Overlay'\r\nimport Button from 'react-bootstrap/Button'\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger'\r\nimport CardColumns from 'react-bootstrap/CardColumns';\r\nimport MyWaffle from './MyWaffle';\r\nimport MyDownstream from './MyDownstream';\r\nimport WaffleChart from './WaffleChart';\r\nimport axios from 'axios';\r\nimport LineChart from './LineChart';\r\nimport IconArray from './IconArray';\r\nimport BubbleChart from './BubbleChart';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n//var id = \"634739719\"\r\n//var id = \"1293416714923683841\"\r\n//var id = \"192812670\"\r\n//var id = \"802233409338675200\"\r\n//var id = \"18256350\"\r\n//var id = \"2490180804\"\r\n//var id = \"18670940\"\r\n//var id = \"486899842\"\r\n//var id = \"238753895\"\r\nvar id = \"247943631\"\r\n\r\nconst Title = styled.p`\r\n    &&& {\r\n    font-size: 30px;\r\n    font-weight:bold;\r\n}`\r\n\r\nconst Subtitle = styled.p`\r\n    &&& {\r\n    padding: .05em;\r\n    font-size: 24px;\r\n}`\r\n\r\nconst Poptitle = styled.p`\r\n    &&& {\r\n    padding: 0.3em;\r\n    font-size: 24px;\r\n}`\r\n\r\nconst vizpop = {\r\n    width: '860px',\r\n    maxWidth: 'none'\r\n  };\r\n\r\nconst linepop = {\r\n    width: '700px',\r\n    maxWidth: 'none'\r\n  };\r\n    \r\n\r\nfunction IndividualStats(props) {\r\n    \r\n\r\n    const [isLoading, setLoading] = useState(true);\r\n    const [isLoading2, setLoading2] = useState(true);\r\n    const [user, setUser] = useState([]);\r\n    var num_cols = 10\r\n    var num_rows = 20\r\n    var denom = 50\r\n\r\n    var ids = []\r\n\r\n    /*\r\n    const [isLoading2, setLoading2] = useState(true);\r\n    const [med, setMed] = useState([]);\r\n    */\r\n\r\n    useEffect(() => {\r\n        axios\r\n        .get(`http://localhost:4001/twitter/userWhereID/${id}`)\r\n        .then(response => {\r\n          setUser(response.data);\r\n          setLoading(false);\r\n        })\r\n        .catch(error => console.error(`There was an error retrieving the retweets list: ${error}`));\r\n\r\n        \r\n        axios\r\n        .get(`http://localhost:4001/twitter/audienceWhereIDs${ids}`)\r\n        .then(response => {\r\n          setMed(response.data);\r\n          setLoading2(false);\r\n        })\r\n        .catch(error => console.error(`There was an error retrieving the median list: ${error}`));\r\n        \r\n\r\n      }, []);\r\n\r\n      if (isLoading || isLoading2) {\r\n        return <div>\r\n        <Card>\r\n            <Title>My Tweets</Title>\r\n            <p>Loading...</p>\r\n        </Card>\r\n        </div>\r\n      } else {\r\n        var f = JSON.parse(user[0]['followers_class'])\r\n        var tot_fsquares = 0\r\n        for (const key in f){\r\n          tot_fsquares = tot_fsquares + Math.round(f[key] / denom)\r\n        }\r\n\r\n        var d = JSON.parse(user[0]['median_downstream_class'])\r\n        var tot_dsquares = 0\r\n        for (const key in d){\r\n          tot_dsquares = tot_dsquares + Math.round(d[key] / denom)\r\n        }\r\n\r\n        var num = Math.max(tot_fsquares, tot_dsquares)\r\n        num = Math.floor(Math.sqrt(num)) + 1\r\n        num_cols = num\r\n        num_rows = num + 1\r\n\r\n      }\r\n      \r\n      /*\r\n      //Followers Popover\r\n      const pop_followers = (\r\n        <Popover id=\"popover-basic\" placement=\"bottom\" style={vizpop}>\r\n            <Popover.Title>Median Followers</Popover.Title>\r\n          <Popover.Content>\r\n          <Card>\r\n            <div className=\"columns\">\r\n            <div className=\"column\">\r\n            <Poptitle>Community Median</Poptitle>\r\n          <WaffleChart legend_pos = \"right\" divid = \"medfollowers\" vars = {[{name: \"Researchers\", data: med[med.length - 1]['researchers']}, {name: \"Non-researchers\", data: med[med.length-1]['non_researchers']}]} r = {med[med.length - 1]['researchers']} n = {med[med.length - 1]['non_researchers']} />\r\n          </div>\r\n          <div className=\"column\">\r\n            <Poptitle>My Followers</Poptitle>\r\n            <WaffleChart divid = \"myfollowerscomp\" vars = {[{name: \"Researchers\", data: snaps[snaps.length - 1]['researchers']}, {name: \"Non-researchers\", data: snaps[snaps.length-1]['non_researchers']}]} />\r\n            </div>\r\n            </div>\r\n            </Card>\r\n          </Popover.Content>\r\n        </Popover>\r\n      );\r\n      \r\n      const PopFollowers = () => (\r\n        <OverlayTrigger trigger=\"click\" placement=\"right\" overlay={pop_followers}>\r\n        <Button variant=\"outline-primary\">Compare to Community Median</Button>\r\n          \r\n        </OverlayTrigger>\r\n      );\r\n\r\n      //Downstream Popover\r\n      const pop_downstream = (\r\n        <Popover id=\"popover-basic\" placement=\"top\" style={vizpop}>\r\n            <Popover.Title>Median Downstream</Popover.Title>\r\n          <Popover.Content>\r\n            <Card>\r\n            <div className=\"columns\">\r\n            <div className=\"column\">\r\n            <Poptitle>Community Median</Poptitle>\r\n            <WaffleChart legend_pos = \"right\" divid = \"meddownstream\" vars = {[{name: \"Researchers\", data: med[med.length - 1]['median_down_r']}, {name: \"Non-researchers\", data: med[med.length-1]['median_down_n']}]} />\r\n            </div>\r\n            <div className=\"column\">\r\n            <Poptitle>My Downstream</Poptitle>\r\n            <WaffleChart divid = \"mydownstreamcomp\" vars = {[{name: \"Researchers\", data: snaps[snaps.length - 1]['median_down_r']}, {name: \"Non-researchers\", data: snaps[snaps.length-1]['median_down_n']}]} />\r\n            </div>\r\n            </div>\r\n            </Card>\r\n          </Popover.Content>\r\n        </Popover>\r\n      );\r\n      \r\n      const PopDownstream = () => (\r\n        <OverlayTrigger trigger=\"click\" placement=\"right\" overlay={pop_downstream}>\r\n        <Button variant=\"outline-primary\">Compare to Community Median</Button>\r\n          \r\n        </OverlayTrigger>\r\n      );\r\n\r\n      //Growth Popover\r\n      const pop_growth = (\r\n        <Popover id=\"popover-basic\" placement=\"top\" style={linepop}>\r\n          <Popover.Content>\r\n\r\n            <Poptitle>Community Median</Poptitle>\r\n          <LineChart data = {snaps} med = {med} id = {\"indlinemed\"} dv = \"total_followers\" yaxis = \"Followers\"/>\r\n\r\n          </Popover.Content>\r\n        </Popover>\r\n      );\r\n      \r\n      const PopGrowth= () => (\r\n        <OverlayTrigger trigger=\"click\" placement=\"right\" overlay={pop_growth}>\r\n        <Button variant=\"outline-primary\">Compare to Community Median</Button>\r\n        </OverlayTrigger>\r\n      );\r\n\r\n      //Tweet Popover\r\n      const pop_tweet = (\r\n        <Popover id=\"popover-basic\" placement=\"top\" style={linepop}>\r\n          <Popover.Content>\r\n          <Poptitle>Community Median</Poptitle>\r\n          <LineChart data = {snaps} med = {med} id = {\"indlinemed2\"} dv = \"total_tweets\" yaxis = \"Tweets\"/>\r\n          </Popover.Content>\r\n        </Popover>\r\n      );\r\n      \r\n      const PopTweet= () => (\r\n        <OverlayTrigger trigger=\"click\" placement=\"right\" overlay={pop_tweet}>\r\n        <Button variant=\"outline-primary\">Compare to Community Median</Button>\r\n        </OverlayTrigger>\r\n      ); */\r\n\r\n      \r\n\r\n      return(\r\n\r\n<div>\r\n    <Card style ={{padding:\"2em\"}}>\r\n        <Title>My Statistics</Title>\r\n            <div className='columns'>\r\n                <div className='column'>\r\n                    <Subtitle>My Followers</Subtitle>\r\n                    {/*<WaffleChart divid = \"myfollowers\" data = {user['followers_class']} />*/}\r\n                    {/*<PopFollowers/>*/}\r\n                    <IconArray divid = \"followers_icon\" data = {JSON.parse(user[0]['followers_class'])} cols = {num_cols} rows = {num_rows}/>\r\n                    \r\n                </div>\r\n                <div className='column'>\r\n                    <Subtitle>My Downstream Audience</Subtitle>\r\n                    {/*<WaffleChart divid = \"mydownstream\" data = {user['followers_class']} />*/}\r\n                    {/*<PopDownstream/>*/}\r\n                    <IconArray divid = \"downstream_icon\" data = {JSON.parse(user[0]['median_downstream_class'])} cols = {num_cols} rows = {num_rows}/>\r\n                </div>\r\n            </div>\r\n\r\n            <br/>\r\n            <div className='columns'>\r\n                <div className='column'>\r\n                  <Subtitle>Followers' Top Keywords</Subtitle>\r\n                  <BubbleChart divid = \"f_bubble\" data = {JSON.parse(user[0]['follower_keywords'])}/>\r\n\r\n                </div>\r\n                <div className='column'>\r\n                  <Subtitle>Downstream Top Keywords</Subtitle>\r\n                  <BubbleChart divid = \"d_bubble\" data = {JSON.parse(user[0]['downstream_keywords'])}/>\r\n\r\n                </div>\r\n            </div>\r\n    </Card>\r\n    <br/>\r\n\r\n</div>\r\n      );\r\n};\r\n\r\n\r\nexport default IndividualStats;"]},"metadata":{},"sourceType":"module"}